{"Channels/Channels-3":{"title":"Channels","links":["Channels/𝕏/𝕏"],"tags":[],"content":"\n𝕏\n"},"Channels/Channels":{"title":"Channels","links":["Channels/𝕏/𝕏"],"tags":[],"content":"\n𝕏\n"},"Channels/𝕏/𝕏":{"title":"𝕏","links":[],"tags":[],"content":""},"Essay/1막을-마치며-3":{"title":"1막을 마치며","links":[],"tags":["essay"],"content":"학창시절 §\n어릴 적 똑똑한 아이로 알려졌던 나는, 오히려 중학교, 고등학교를 가면서 좌절을 맛봤다. 머리가 좋은 줄 알았는데 그게 아니었다. 경기도 권에서 시험을 보고 들어올 정도로 좋은 고등학교를 진학한 이후, 같은 시간을 쏟아도 다른 성적이 나오는 것을 보면서 이전에 받았던 그 기대에 부응하지 못한다는 생각이 누적된 스트레스로 찾아왔다. 무엇이 문제인지에 대해서 제대로 마주하는 것이 두려웠고, 그렇게 공부를 하는 척만 하는 의미없는 반복을 되풀이 했다. 그리고 원하던 대학에 진학하지 못했다. 내 주변에 모두가 의대, 치대, 한의대, SKY, 인서울을 하는 와중, 내가 지원했던 모든 학교는 나를 거절했다.\n재수 §\n여전히 이런 나를 믿어주시는 감사한 부모님을 둔 덕분에, 한번의 기회를 더 가질 수 있었다. 높은 학원비에도 불구하고 재수학원을 등록해주셨다. 입과하기 전에 방에 누워있던 도중 눈물이 났다. 할줄 아는 것이 아무 것도 없었다. 말을 잘하는 것도 아니고, 공부를 잘하는 것도 아니고, 스트레스로 인한 폭식 때문에 100kg에 육박해 있었다. 거울을 보는 것도 싫었다. 아무것도 없으면서 같잖은 자존심만 부리는 내 모습이 보였다. 내가 너무 싫었다. 왜 대학을 가야하는 지도 몰랐다.\n그리고 혼자서 오랜시간 고민했다. 내가 가지고 있던 모든 것에 대해 질문하고 답을 하는 시간을 마련했다. 왜 대학을 가야할까, 왜 나는 말을 못할까, 왜 살이 찔까. 조바심과 압박감이 내 삶을 이렇게 만들었다는 결론이 났다. 항상 누군가와 남을 비교하고, 내 줏대없이 그 사람이 하는 것을 따라하면 되겠지와 같은 타향에 젖어 행동했다. 맞다. 나는 내가 왜 하고 있는지에 대해서도 잘 몰랐다.\n그리고 본질적으로 내가 하고 싶은 것이 무엇인지 고민했다. 대학 이런 것은 진정으로 내가 하고 싶은 것이 아니었다. 이제 남의 말을 듣기보다는 내 안의 소리를 듣기로 했다. 보다 본질적인 동기를 찾고 싶었다. 내가 원하는 것은 총 3가지 였다.\n\n살을 빼고 싶다.\n내가 좋아하지만 가장 못하는 “수학”에서 고액 과외를 하여 원하는 만큼 돈을 써보고 싶다.\n누구나 아는 대학에서 으스대보고 싶다.\n\n내가 알게 모르게 뽐내기 좋아하는 성격이라는 것을 알았다. 그리고 이 모습이 되기 위해 내가 무엇이 필요한지 고민했다. 여러 방법이 있겠지만 대부분의 문제의 답은 본질적이다.\n\n하루에 아침 한끼만 1년동안 먹는다. 저녁 30분 HIIT 한다.\n배운 내용과 틀린 내용에 대해서 “절대” 까먹지 않는다.\n2번의 전략을 모든 과목에 적용한다.\n\n그리고 나는 배수진을 쳤다. 뚜렷한 목표에 대해 완벽한 계획을 세웠으나, 성공하지 못하면 그건 너가 실천하지 않았기 때문이고, 그렇다면 지금의 너의 모습에 대해 군말없이 살기로. 그 책임은 오롯이 내가 지겠다는 다짐을 했다.\n그리고 해냈다. 수능 수학 만점, 25kg 감량, 대학 합격\n15.02 목표 달성의 시작을 도와준 노트\n대학 §\n나의 속도, 강점, 약점, 이겨내는 법 등을 배우면서 앞으로의 삶 역시 비슷하지 않을까라는 생각을 했다. 그리고 어느 정도는 맞았다. 그리고 재수를 하여 대학에 들어온 나는, 다시는 그렇게 뒤쳐지는 경험을 하지 않겠다는 마음을 먹었다. 빠른 취업이라는 목표를 두고 하루하루를 살았다. 물론 누구보다 놀기도 잘 놀았다. 하지만 어느 순간 잊고 있었던 컴퓨터에 대한 호기심이 “알파고”를 계기로 터지게 되었고, 그 때부터 약간은 목적없는 삶을 살았다.\n데이터 분석이라는 것을 공부하게 되면서 코딩을 접했다. 주말에 10-18시까지 어려운 수식과 코드를 짜면서 공부를 했던 기억이 난다. 제대로된 목표설정을 하지는 않았지만 어려운 공부를 하니 잘될 것이라는 막연한 생각을 했다. 하지만 1년동안 준비한 것의 결과는 생각보다 좋지 않았다. 곰곰히 성찰한 결과, 어떤 결과를 내기 위해 치열하게 도전했다는 생각이 들지 않았다. 그리고 내가 쏟은 이 1년이라는 시간이 헛되지 않았다는 것을 증명하기 위해 3개 정도의 대회에 나가 수상을 하겠다는 목표를 세웠다. 과감하게 휴학을 했고, 좋은 팀원들과 함께 죽을 둥 살둥 하면서 결과를 만들었다.\n또 이대로라면 찬란한 미래가 보일 줄 알았다. 하지만 여전히 그렇지 않았다. 기계공학과를 시작으로 소프트웨어 융합학과를 복수전공한 나는 어느 길로 나가야 할지 고민이 많았다. 내 정체성에 혼란이 왔다. 나는 무엇을 더 좋아하지? 나는 무슨과에 속해있는 걸까. 실제로 두과 모두에서 진득하게 속해있는 사람이 아니었기 때문에 속으로는 외로움도 컸다. 그래서 같이 나간 대회 팀원들에게 보다 의지하고 그랬던 것 같다. 미안하다.\n어릴적 네이버에서 주관하는 코딩 캠프?에 참가한 적이 있다. 고등학생때였는데, 네이버 사옥에 압도된 기억이 있다. 그리고 소개 영상을 보곤 부모님께 가서 나 대학안가고 이거 하겠다라고 말한 적이 있다. 등짝을 맞았던 기억도 있다. 그런데, 내 정체성에 대한 고민을 하면서 어떻게 보면 결국 내가 원했던 방향으로 내가 가고 있다는 것을 깨달았다.\n이제 그렇다면 기계과는 접어두고, 내가 열중했던 데이터 분석, ML에 관련해서 취업 준비를 해야겠다는 생각을 했다. 그런데 이게 왠걸. 내가 했던 데이터 분석은 약간은 문과스러운 업무에 가까웠다. 실제로 이를 사용하기 위해서는 ML지식, 백엔드 지식이 너무나도 중요했다. 그리고 이 상황에서 경쟁을 하기 위해서 내 현재 상태는 너무 초라했다. CS 지식 부족, 알고리즘 풀이 능력 부족, 업무와 상관없는 수상이력 등. 가장 중요한 건 내가 데이터 분석을 하면서, 내가 하고싶은 일이 이것이 아니었다는 점이다.\n그래서 또 도전한 것이 겨울방학때 진행했던 창업 교육이다. 어릴 때 부터 창업자들에 대한 동경이 있었고, 이번 기회가 아니라면 이런 교육을 들어볼 기회가 없다고 생각했다. 그리고 수상도 했다. 어쩌다 보니 팀도 꾸렸고, 진행했다. 하지만 결국은 내 능력 부족, 의지 부족, 삶에 대한 불안함, 개발 실력 부족등의 문제로 해체되었다. 내 책임을 지키지 못하는 것이 얼마나 가슴아프고 비참한 일인지 깨닫게 되었다. 사람은 결과로 승부해야 한다는 점을 배울 수 있었다.\n물거품된 2년동안 준비했던 대회 수상 경력, 애매한 과, 자격증 전무, 개발 경험 없음, 부족한 CS 지식, 부족한 알고리즘 실력. 이게 3년 동안의 내 대학 생활의 결과물이었다. 누구보다 탄탄히 준비하여 빠르게 목표를 이루고 싶었던 내 마음과 달리, 결과는 좋지 않았다. 동기들은 모두 취업한 상황이었고 난 무엇이 어디부터 잘못된 건지 찾고 싶었다. 다시 지난 재수시절이 떠올랐고, 내 인생 암흑시기로 들어간 기분이 들었다.\n다시 도전 §\n4학년 1학기, 첫번째 논문을 제출하고 지친 나는 내가 무엇을 하고 싶은지에 대해 다시 고민했다. 재수 시작 시절과 데자뷰였다. 가장 힘들었던 것은, 그 많은 노력이 소용 없게 된 상황자체를 받아들이고 인정해야 했다. 내가 초라한 상태라는 것을 받아들여야 했다. 내가 원하는 이상향과 멀어졌다는 것을 수긍해야했다. 너무 싫었다. 그렇게 하고 싶지 않았던 것을 다시하고 있다는 것이 몸서리치게 싫었다.\n내 강점은 무엇일까. 무엇을 못할까. 내가 고민하고 있는 것들은 무엇인가. 내가 나아가지 못하는 이유는 무엇일까. 내가 불안한 이유는 무엇일까. 그리고 그것에 대해 하나하나 논리적으로 반박했다.\n21.06 나에 대한 성찰을 하며\n그리고 다행히 내가 가진 기회가 있었다.\n\n복수 전공 계획을 잘짜두어 막학기 1개의 교양만이 남아있었다.\n코로나 시국이라 수업을 집에서 들을 수 있었다.\n아는 개발자 분이 계셔서 질문할 수가 있었다.\n\n앞에서도 말했지만 비교적 뽐내기 좋아하는 내 성격에 시각적인 것이 보다 맞겠다는 생각을 했다. 항상 발표를 진행했고 주도적인 성격인 탓에, 개발 공부를 하더라도 서비스의 최전선에서 내가 활동해야 좋을 것 같다는 생각을 했다. 그런데 웹을 잠깐 해보면서 느낀 것은, 일단 재미가 없었다. 잘 하지도 못하면서 재미가 없는 것으로 시작해서 성공할 가능성이 적다 생각했다. 내가 가장 좋아하는 제품군인 애플 생태계에서 시작해야겠다는 생각을 하고 공부방법을 찾기 시작했다.\n처음으로 글을 썼던 것이 생각난다. 6개월 iOS 개발자 프로젝트 시리즈를 만들고, 매일 매일 글을 썼다. 그러면서 느낀 것은 iOS 의 경우 무엇을 공부해야 하는지에 대해 제대로 알기가 어려웠다는 점이다. 부스크 코스를 통해 입문했지만, 때때로 모르는 부분도 많았고, 내가 알고 하는 건지에 대해 의문이 들었다. 그래서 가장 빠르게, 가장 빡세게, 가장 좋은 교육 프로그램이 무엇이 있는지 찾아보다, 부스트 캠프를 접하게 되었다.\n부스트 캠프 챌린지 §\n두번의 코딩테스트를 빡세게 준비한 결과, 운이 좋게도 부스트 캠프에 입과할 수 있게 되었다. 그리고 이 기회가 나는 하늘이 줄 기회라 생각하고 하나의 다짐을 세웠다.\n\n내가 다른 사람들보다 지식적으로 부족할지 몰라도, 1등을 목표로 하겠다.\n\n이 목표를 이루기 위해 밥만 먹고 코딩만 했다. 일단 멤버십 과정까지 가야 비로소 실무적 역량을 키울 수 있었기에 절박함을 기반으로 죽도록 했다. 모든 요구사항을 만족시키려 최선을 다했고, 약 80%의 요구사항은 평균적으로 달성했다. 아침마다 하는 피어 세션에서의 내용은 내가 모르는 것은 모두 적어서 모두 적용하기 위해 남은 시간을 사용했다. 이런 작업은 보통 주말에 진행했으며, 모르는 내용도 블로그에 글로 작성했다.\n그리고 원하는 다음 목표였던 부스트 캠프 멤버십에 합격할 수 있었다.\n부스트 캠프 멤버십 §\n멤버십 합격 이후에는 하나의 목표가 추가되었다.\n\n네트워킹 기업 어느곳에서도 나를 데려가고 싶도록 만들겠다.\n\n그러기 위해서는 코드를 작성하는데 있어서 많은 고민이 묻어나야 한다고 생각했다. 배우는 디자인 패턴, 기술등에 대해서 어떻게든 적용하고자 했다. 내용이 너무 어려워서, 팀원들을 모집해서 스터디를 만들어 진행했다. 7년간의 과외를 진행하면서, 누군가에게 공유하고 기쁨을 주었을 때, 내가 가장 동기부여가 되고, 또 가장 학습효과가 높다는 것을 배울 수 있었다. 그래서 스터디를 구성하여 주마다 하나이상의 세션에서 배운 내용에 대해 공유했다.\n또한 팀에서의 내 역할에 대해서도 고민했다. 보통 문제에 대해 어떠한 방법으로든 결과를 만들어내는 것이 중요한 사람으로써 의견 충돌이 최소한으로 발생하는 팀 구성이 나에게 좋을 것이라 생각했다. 그리고 결과를 내는 것을 연습하면서, 구현, 부르트 포스와 같은 알고리즘 유형에도 대응이 가능할 것이라 생각했다. 팀을 구성하면서 중요하게 생각한 점은 다음과 같다.\n\n내가 부족한 소통 능력을 커버해줄 접착제 같은 사람이 필요하다.\n논리적으로만 생각하는 내게 부족한 감성적인 면이 있는 사람이 필요하다. (서비스 기획까지 들어가기 때문)\n문제 해결에 있어서 함께할 문제 해결사가 필요하다.\n\n다행히 스터디원이 이런 요구사항에 꼭 맞았고, 팀을 제안했다. 다행히 한 팀으로 활동할 수 있었다. 우리 팀 모두가 잘되었으면 좋겠다는 진심이 있었다. 내가 조금더 일을 하더라도 완벽하게 만들어 둔다면 나중에도 우리가 기분좋게 만나지 않을까라는 생각에서.\n우리는 5주만에 다음과 같은 목표를 이뤘다.\n\n앱스토어 배포\nMVVM 아키텍쳐 적용\n서드파티 프레임워크 사용하지 않음\n화면 13개\n의존성 주입에 대한 심도있는 고민\n이미지 캐시 구현\n디자인\n\n21.12 나의 첫 앱스토어 배포\n네이버 지원 §\n알고리즘 대비를 위해 지원한 네이버에서 2.5문제를 풀고 운이 좋게 합격했다. 1차 2차 면접을 준비하면서 프로젝트까지 진행해야 한다는 것이 큰 부담이었다. 하지만 공동의 책임이 보다 우선순위가 높다는 생각에 빠르게 일을 처리하기 위해 노력했다. 마음씨 좋은 팀원들을 만난 덕에 하루 이상 휴가를 내주어 3일의 시간을 가질 수 있었다. 면접을 보고 나서 느낀 것은, 문제 해결 능력이 중요하다는 것이다. 이를 높히기 위해서는 어떤 팀프로젝트, 과제를 받든 간에, “결과”를 내기 위한 노력이 중요한 듯하다. 평소부터 어떻게든 나는 결과를 내겠다와 같은 생각을 가지게 된다면, 보다 이런 부분에 대해 쉬운 사고를 할 수 있지 않을까.\n2차 면접에서는 정말 떨어질 줄 알았다. 기술 질문에 대해 명확한 답을 하지 못했고, 내가 많이 부족하다는 것을 많이 느꼈다. 하지만..\n21.12 목표 달성\n정말 운이 좋게 합격할 수 있었다.\n회고 §\n지난 6개월, 부스트 캠프를 진행하면서 정말 내가 할 수 있을까에 대해서 수십번도 고민이 들었다. 그래서 밤마다 되내였다. 난 할 수 있다. 정말로 난 할 수 있다.  아침마다 씻지도 않고 커피한잔 들고 오로지 집중할 수 있었던 것은 무엇보다 “간절”했기 때문이라 생각한다. 쉽게 변하지 않는 사람을 변하게 만드는 것은 이것 밖에 없다. 그리고 내 좌우명인 **“뚜렷한 목표, 치밀한 계획, 우직한 실천”**을 믿고 밀어붙여서이지 않을까. 마음 깊이 믿었던 6개월 iOS 개발자 되기 프로젝트를 성공했다.\n아직 내가 바라는 이상향에는 멀지만, 내 판단이 맞음을 비로소 증명할 수 있다는 것에 가장 큰 성취와 만족을 느낀다.\n이렇게 인생 1막을 마치면서 나를 되돌아보면, 낙심, 좌절, 극복, 성취의 연속이었다. 쿨타임이 주기적으로 돌면서 강한 성장의 모멘텀을 가져다 주었다. 오히려 이제는 좌절이라는 것이 그리 나쁘지만은 않은 것이 아닌가라는 생각도 든다. 그제서야 비로소 나를 객관적으로 바라보고, 다시 걸어갈 수 있으니까. 재부팅 느낌이다.\n앞으로도 학창 시절, 재수, 대학, 취준 시기의 내 경험이 굉장히 중요한 자산이 될 것이라는 생각이 든다. 학창 시절, 낮은 자존감으로 인해 많은 고통을 받았었지만, 결국 해결은 행동을 바탕으로한 목적 달성밖에 없다. 이 점을 1막에서 배운 것이 가장 감사한 점이 아닐까.\n지금까지 부족한 인간을 전적으로 서포트해주신 부모님과 주변 지인분들께 정말 감사드린다.\n마지막으로, 어느날 분명 이 글을 읽고 있을 내게, 잠깐 숨 좀 돌리고 지금까지 걸어온 길에 대해 고민해보라 말해주고 싶다. 너는 이미 답을 알고 있어."},"Essay/1막을-마치며":{"title":"1막을 마치며","links":[],"tags":["essay"],"content":"학창시절 §\n어릴 적 똑똑한 아이로 알려졌던 나는, 오히려 중학교, 고등학교를 가면서 좌절을 맛봤다. 머리가 좋은 줄 알았는데 그게 아니었다. 경기도 권에서 시험을 보고 들어올 정도로 좋은 고등학교를 진학한 이후, 같은 시간을 쏟아도 다른 성적이 나오는 것을 보면서 이전에 받았던 그 기대에 부응하지 못한다는 생각이 누적된 스트레스로 찾아왔다. 무엇이 문제인지에 대해서 제대로 마주하는 것이 두려웠고, 그렇게 공부를 하는 척만 하는 의미없는 반복을 되풀이 했다. 그리고 원하던 대학에 진학하지 못했다. 내 주변에 모두가 의대, 치대, 한의대, SKY, 인서울을 하는 와중, 내가 지원했던 모든 학교는 나를 거절했다.\n재수 §\n여전히 이런 나를 믿어주시는 감사한 부모님을 둔 덕분에, 한번의 기회를 더 가질 수 있었다. 높은 학원비에도 불구하고 재수학원을 등록해주셨다. 입과하기 전에 방에 누워있던 도중 눈물이 났다. 할줄 아는 것이 아무 것도 없었다. 말을 잘하는 것도 아니고, 공부를 잘하는 것도 아니고, 스트레스로 인한 폭식 때문에 100kg에 육박해 있었다. 거울을 보는 것도 싫었다. 아무것도 없으면서 같잖은 자존심만 부리는 내 모습이 보였다. 내가 너무 싫었다. 왜 대학을 가야하는 지도 몰랐다.\n그리고 혼자서 오랜시간 고민했다. 내가 가지고 있던 모든 것에 대해 질문하고 답을 하는 시간을 마련했다. 왜 대학을 가야할까, 왜 나는 말을 못할까, 왜 살이 찔까. 조바심과 압박감이 내 삶을 이렇게 만들었다는 결론이 났다. 항상 누군가와 남을 비교하고, 내 줏대없이 그 사람이 하는 것을 따라하면 되겠지와 같은 타향에 젖어 행동했다. 맞다. 나는 내가 왜 하고 있는지에 대해서도 잘 몰랐다.\n그리고 본질적으로 내가 하고 싶은 것이 무엇인지 고민했다. 대학 이런 것은 진정으로 내가 하고 싶은 것이 아니었다. 이제 남의 말을 듣기보다는 내 안의 소리를 듣기로 했다. 보다 본질적인 동기를 찾고 싶었다. 내가 원하는 것은 총 3가지 였다.\n\n살을 빼고 싶다.\n내가 좋아하지만 가장 못하는 “수학”에서 고액 과외를 하여 원하는 만큼 돈을 써보고 싶다.\n누구나 아는 대학에서 으스대보고 싶다.\n\n내가 알게 모르게 뽐내기 좋아하는 성격이라는 것을 알았다. 그리고 이 모습이 되기 위해 내가 무엇이 필요한지 고민했다. 여러 방법이 있겠지만 대부분의 문제의 답은 본질적이다.\n\n하루에 아침 한끼만 1년동안 먹는다. 저녁 30분 HIIT 한다.\n배운 내용과 틀린 내용에 대해서 “절대” 까먹지 않는다.\n2번의 전략을 모든 과목에 적용한다.\n\n그리고 나는 배수진을 쳤다. 뚜렷한 목표에 대해 완벽한 계획을 세웠으나, 성공하지 못하면 그건 너가 실천하지 않았기 때문이고, 그렇다면 지금의 너의 모습에 대해 군말없이 살기로. 그 책임은 오롯이 내가 지겠다는 다짐을 했다.\n그리고 해냈다. 수능 수학 만점, 25kg 감량, 대학 합격\n15.02 목표 달성의 시작을 도와준 노트\n대학 §\n나의 속도, 강점, 약점, 이겨내는 법 등을 배우면서 앞으로의 삶 역시 비슷하지 않을까라는 생각을 했다. 그리고 어느 정도는 맞았다. 그리고 재수를 하여 대학에 들어온 나는, 다시는 그렇게 뒤쳐지는 경험을 하지 않겠다는 마음을 먹었다. 빠른 취업이라는 목표를 두고 하루하루를 살았다. 물론 누구보다 놀기도 잘 놀았다. 하지만 어느 순간 잊고 있었던 컴퓨터에 대한 호기심이 “알파고”를 계기로 터지게 되었고, 그 때부터 약간은 목적없는 삶을 살았다.\n데이터 분석이라는 것을 공부하게 되면서 코딩을 접했다. 주말에 10-18시까지 어려운 수식과 코드를 짜면서 공부를 했던 기억이 난다. 제대로된 목표설정을 하지는 않았지만 어려운 공부를 하니 잘될 것이라는 막연한 생각을 했다. 하지만 1년동안 준비한 것의 결과는 생각보다 좋지 않았다. 곰곰히 성찰한 결과, 어떤 결과를 내기 위해 치열하게 도전했다는 생각이 들지 않았다. 그리고 내가 쏟은 이 1년이라는 시간이 헛되지 않았다는 것을 증명하기 위해 3개 정도의 대회에 나가 수상을 하겠다는 목표를 세웠다. 과감하게 휴학을 했고, 좋은 팀원들과 함께 죽을 둥 살둥 하면서 결과를 만들었다.\n또 이대로라면 찬란한 미래가 보일 줄 알았다. 하지만 여전히 그렇지 않았다. 기계공학과를 시작으로 소프트웨어 융합학과를 복수전공한 나는 어느 길로 나가야 할지 고민이 많았다. 내 정체성에 혼란이 왔다. 나는 무엇을 더 좋아하지? 나는 무슨과에 속해있는 걸까. 실제로 두과 모두에서 진득하게 속해있는 사람이 아니었기 때문에 속으로는 외로움도 컸다. 그래서 같이 나간 대회 팀원들에게 보다 의지하고 그랬던 것 같다. 미안하다.\n어릴적 네이버에서 주관하는 코딩 캠프?에 참가한 적이 있다. 고등학생때였는데, 네이버 사옥에 압도된 기억이 있다. 그리고 소개 영상을 보곤 부모님께 가서 나 대학안가고 이거 하겠다라고 말한 적이 있다. 등짝을 맞았던 기억도 있다. 그런데, 내 정체성에 대한 고민을 하면서 어떻게 보면 결국 내가 원했던 방향으로 내가 가고 있다는 것을 깨달았다.\n이제 그렇다면 기계과는 접어두고, 내가 열중했던 데이터 분석, ML에 관련해서 취업 준비를 해야겠다는 생각을 했다. 그런데 이게 왠걸. 내가 했던 데이터 분석은 약간은 문과스러운 업무에 가까웠다. 실제로 이를 사용하기 위해서는 ML지식, 백엔드 지식이 너무나도 중요했다. 그리고 이 상황에서 경쟁을 하기 위해서 내 현재 상태는 너무 초라했다. CS 지식 부족, 알고리즘 풀이 능력 부족, 업무와 상관없는 수상이력 등. 가장 중요한 건 내가 데이터 분석을 하면서, 내가 하고싶은 일이 이것이 아니었다는 점이다.\n그래서 또 도전한 것이 겨울방학때 진행했던 창업 교육이다. 어릴 때 부터 창업자들에 대한 동경이 있었고, 이번 기회가 아니라면 이런 교육을 들어볼 기회가 없다고 생각했다. 그리고 수상도 했다. 어쩌다 보니 팀도 꾸렸고, 진행했다. 하지만 결국은 내 능력 부족, 의지 부족, 삶에 대한 불안함, 개발 실력 부족등의 문제로 해체되었다. 내 책임을 지키지 못하는 것이 얼마나 가슴아프고 비참한 일인지 깨닫게 되었다. 사람은 결과로 승부해야 한다는 점을 배울 수 있었다.\n물거품된 2년동안 준비했던 대회 수상 경력, 애매한 과, 자격증 전무, 개발 경험 없음, 부족한 CS 지식, 부족한 알고리즘 실력. 이게 3년 동안의 내 대학 생활의 결과물이었다. 누구보다 탄탄히 준비하여 빠르게 목표를 이루고 싶었던 내 마음과 달리, 결과는 좋지 않았다. 동기들은 모두 취업한 상황이었고 난 무엇이 어디부터 잘못된 건지 찾고 싶었다. 다시 지난 재수시절이 떠올랐고, 내 인생 암흑시기로 들어간 기분이 들었다.\n다시 도전 §\n4학년 1학기, 첫번째 논문을 제출하고 지친 나는 내가 무엇을 하고 싶은지에 대해 다시 고민했다. 재수 시작 시절과 데자뷰였다. 가장 힘들었던 것은, 그 많은 노력이 소용 없게 된 상황자체를 받아들이고 인정해야 했다. 내가 초라한 상태라는 것을 받아들여야 했다. 내가 원하는 이상향과 멀어졌다는 것을 수긍해야했다. 너무 싫었다. 그렇게 하고 싶지 않았던 것을 다시하고 있다는 것이 몸서리치게 싫었다.\n내 강점은 무엇일까. 무엇을 못할까. 내가 고민하고 있는 것들은 무엇인가. 내가 나아가지 못하는 이유는 무엇일까. 내가 불안한 이유는 무엇일까. 그리고 그것에 대해 하나하나 논리적으로 반박했다.\n21.06 나에 대한 성찰을 하며\n그리고 다행히 내가 가진 기회가 있었다.\n\n복수 전공 계획을 잘짜두어 막학기 1개의 교양만이 남아있었다.\n코로나 시국이라 수업을 집에서 들을 수 있었다.\n아는 개발자 분이 계셔서 질문할 수가 있었다.\n\n앞에서도 말했지만 비교적 뽐내기 좋아하는 내 성격에 시각적인 것이 보다 맞겠다는 생각을 했다. 항상 발표를 진행했고 주도적인 성격인 탓에, 개발 공부를 하더라도 서비스의 최전선에서 내가 활동해야 좋을 것 같다는 생각을 했다. 그런데 웹을 잠깐 해보면서 느낀 것은, 일단 재미가 없었다. 잘 하지도 못하면서 재미가 없는 것으로 시작해서 성공할 가능성이 적다 생각했다. 내가 가장 좋아하는 제품군인 애플 생태계에서 시작해야겠다는 생각을 하고 공부방법을 찾기 시작했다.\n처음으로 글을 썼던 것이 생각난다. 6개월 iOS 개발자 프로젝트 시리즈를 만들고, 매일 매일 글을 썼다. 그러면서 느낀 것은 iOS 의 경우 무엇을 공부해야 하는지에 대해 제대로 알기가 어려웠다는 점이다. 부스크 코스를 통해 입문했지만, 때때로 모르는 부분도 많았고, 내가 알고 하는 건지에 대해 의문이 들었다. 그래서 가장 빠르게, 가장 빡세게, 가장 좋은 교육 프로그램이 무엇이 있는지 찾아보다, 부스트 캠프를 접하게 되었다.\n부스트 캠프 챌린지 §\n두번의 코딩테스트를 빡세게 준비한 결과, 운이 좋게도 부스트 캠프에 입과할 수 있게 되었다. 그리고 이 기회가 나는 하늘이 줄 기회라 생각하고 하나의 다짐을 세웠다.\n\n내가 다른 사람들보다 지식적으로 부족할지 몰라도, 1등을 목표로 하겠다.\n\n이 목표를 이루기 위해 밥만 먹고 코딩만 했다. 일단 멤버십 과정까지 가야 비로소 실무적 역량을 키울 수 있었기에 절박함을 기반으로 죽도록 했다. 모든 요구사항을 만족시키려 최선을 다했고, 약 80%의 요구사항은 평균적으로 달성했다. 아침마다 하는 피어 세션에서의 내용은 내가 모르는 것은 모두 적어서 모두 적용하기 위해 남은 시간을 사용했다. 이런 작업은 보통 주말에 진행했으며, 모르는 내용도 블로그에 글로 작성했다.\n그리고 원하는 다음 목표였던 부스트 캠프 멤버십에 합격할 수 있었다.\n부스트 캠프 멤버십 §\n멤버십 합격 이후에는 하나의 목표가 추가되었다.\n\n네트워킹 기업 어느곳에서도 나를 데려가고 싶도록 만들겠다.\n\n그러기 위해서는 코드를 작성하는데 있어서 많은 고민이 묻어나야 한다고 생각했다. 배우는 디자인 패턴, 기술등에 대해서 어떻게든 적용하고자 했다. 내용이 너무 어려워서, 팀원들을 모집해서 스터디를 만들어 진행했다. 7년간의 과외를 진행하면서, 누군가에게 공유하고 기쁨을 주었을 때, 내가 가장 동기부여가 되고, 또 가장 학습효과가 높다는 것을 배울 수 있었다. 그래서 스터디를 구성하여 주마다 하나이상의 세션에서 배운 내용에 대해 공유했다.\n또한 팀에서의 내 역할에 대해서도 고민했다. 보통 문제에 대해 어떠한 방법으로든 결과를 만들어내는 것이 중요한 사람으로써 의견 충돌이 최소한으로 발생하는 팀 구성이 나에게 좋을 것이라 생각했다. 그리고 결과를 내는 것을 연습하면서, 구현, 부르트 포스와 같은 알고리즘 유형에도 대응이 가능할 것이라 생각했다. 팀을 구성하면서 중요하게 생각한 점은 다음과 같다.\n\n내가 부족한 소통 능력을 커버해줄 접착제 같은 사람이 필요하다.\n논리적으로만 생각하는 내게 부족한 감성적인 면이 있는 사람이 필요하다. (서비스 기획까지 들어가기 때문)\n문제 해결에 있어서 함께할 문제 해결사가 필요하다.\n\n다행히 스터디원이 이런 요구사항에 꼭 맞았고, 팀을 제안했다. 다행히 한 팀으로 활동할 수 있었다. 우리 팀 모두가 잘되었으면 좋겠다는 진심이 있었다. 내가 조금더 일을 하더라도 완벽하게 만들어 둔다면 나중에도 우리가 기분좋게 만나지 않을까라는 생각에서.\n우리는 5주만에 다음과 같은 목표를 이뤘다.\n\n앱스토어 배포\nMVVM 아키텍쳐 적용\n서드파티 프레임워크 사용하지 않음\n화면 13개\n의존성 주입에 대한 심도있는 고민\n이미지 캐시 구현\n디자인\n\n21.12 나의 첫 앱스토어 배포\n네이버 지원 §\n알고리즘 대비를 위해 지원한 네이버에서 2.5문제를 풀고 운이 좋게 합격했다. 1차 2차 면접을 준비하면서 프로젝트까지 진행해야 한다는 것이 큰 부담이었다. 하지만 공동의 책임이 보다 우선순위가 높다는 생각에 빠르게 일을 처리하기 위해 노력했다. 마음씨 좋은 팀원들을 만난 덕에 하루 이상 휴가를 내주어 3일의 시간을 가질 수 있었다. 면접을 보고 나서 느낀 것은, 문제 해결 능력이 중요하다는 것이다. 이를 높히기 위해서는 어떤 팀프로젝트, 과제를 받든 간에, “결과”를 내기 위한 노력이 중요한 듯하다. 평소부터 어떻게든 나는 결과를 내겠다와 같은 생각을 가지게 된다면, 보다 이런 부분에 대해 쉬운 사고를 할 수 있지 않을까.\n2차 면접에서는 정말 떨어질 줄 알았다. 기술 질문에 대해 명확한 답을 하지 못했고, 내가 많이 부족하다는 것을 많이 느꼈다. 하지만..\n21.12 목표 달성\n정말 운이 좋게 합격할 수 있었다.\n회고 §\n지난 6개월, 부스트 캠프를 진행하면서 정말 내가 할 수 있을까에 대해서 수십번도 고민이 들었다. 그래서 밤마다 되내였다. 난 할 수 있다. 정말로 난 할 수 있다.  아침마다 씻지도 않고 커피한잔 들고 오로지 집중할 수 있었던 것은 무엇보다 “간절”했기 때문이라 생각한다. 쉽게 변하지 않는 사람을 변하게 만드는 것은 이것 밖에 없다. 그리고 내 좌우명인 **“뚜렷한 목표, 치밀한 계획, 우직한 실천”**을 믿고 밀어붙여서이지 않을까. 마음 깊이 믿었던 6개월 iOS 개발자 되기 프로젝트를 성공했다.\n아직 내가 바라는 이상향에는 멀지만, 내 판단이 맞음을 비로소 증명할 수 있다는 것에 가장 큰 성취와 만족을 느낀다.\n이렇게 인생 1막을 마치면서 나를 되돌아보면, 낙심, 좌절, 극복, 성취의 연속이었다. 쿨타임이 주기적으로 돌면서 강한 성장의 모멘텀을 가져다 주었다. 오히려 이제는 좌절이라는 것이 그리 나쁘지만은 않은 것이 아닌가라는 생각도 든다. 그제서야 비로소 나를 객관적으로 바라보고, 다시 걸어갈 수 있으니까. 재부팅 느낌이다.\n앞으로도 학창 시절, 재수, 대학, 취준 시기의 내 경험이 굉장히 중요한 자산이 될 것이라는 생각이 든다. 학창 시절, 낮은 자존감으로 인해 많은 고통을 받았었지만, 결국 해결은 행동을 바탕으로한 목적 달성밖에 없다. 이 점을 1막에서 배운 것이 가장 감사한 점이 아닐까.\n지금까지 부족한 인간을 전적으로 서포트해주신 부모님과 주변 지인분들께 정말 감사드린다.\n마지막으로, 어느날 분명 이 글을 읽고 있을 내게, 잠깐 숨 좀 돌리고 지금까지 걸어온 길에 대해 고민해보라 말해주고 싶다. 너는 이미 답을 알고 있어."},"Essay/Essay-3":{"title":"Essay","links":["Essay/1막을-마치며","Essay/쟤는-일만-해요.","Essay/지인의-성장을-본다는-것","Essay/자유에-대한-고찰","Essay/언제나-그래-왔듯이","Essay/단단한-부드러움","Essay/누군가는-상처받을-수-있다"],"tags":[],"content":"\n1막을 마치며\n쟤는 일만 해요.\n지인의 성장을 본다는 것\n자유에 대한 고찰\n언제나 그래 왔듯이\n단단한 부드러움\n누군가는 상처받을 수 있다\n"},"Essay/Essay":{"title":"Essay","links":["Essay/1막을-마치며","Essay/쟤는-일만-해요.","Essay/지인의-성장을-본다는-것","Essay/자유에-대한-고찰","Essay/언제나-그래-왔듯이","Essay/단단한-부드러움","Essay/누군가는-상처받을-수-있다"],"tags":[],"content":"\n1막을 마치며\n쟤는 일만 해요.\n지인의 성장을 본다는 것\n자유에 대한 고찰\n언제나 그래 왔듯이\n단단한 부드러움\n누군가는 상처받을 수 있다\n"},"Essay/누군가는-상처받을-수-있다-3":{"title":"누군가는 상처받을 수 있다","links":[],"tags":["essay"],"content":"말은 정말 어렵다. 그 사람에게 느끼는 특정 감정들 자체와 별개로 다르게 표현되어 그 사람에게 닿는다. 특히 나는 그게 더 심한 듯하다.\n자신의 감정 자체를 솔직하게 일상에서 전달하는 것이 부끄럽다. 속으로는 전혀 그렇게 생각하지 않지만 그와 반대된 표현으로 말한다. 오히려 친하지 않다고 생각되는 상대에게 좋은 말을 많이 한다. 참 골치 아픈 성격이다.\n정감이 가는 상대일수록 더 그렇다. 내게 호감인 사람이라면 그 사람이 힘들 때 내가 할 수 있는 모든 걸 해주고 싶다. 그리고 그렇지 못할 때는 너무 슬프다. 그러면서 밖으로는 좋은 말, 예쁜 말로 상대에게 말하지 않는 경향이 있다.\n더 부끄러운 건 그러면서 일말의 진심을 알아주기를 바라는 내가 있다. 자신이 한 말에 대한 책임을 회피하는 것 같아 굉장히 내가 작게 느껴진다. 외강내유라는 말은 나를 두고 하는 말인가?\n타고난 성격은 바꾸기 어렵다. 그러나 노력은 해봐야 한다. 내가 한 말에 대해 사과를 구하러 간 그날 밤, 그 성격을 여태껏 못 고친 것이냐는 진심과 농담 사이를 지나치는 말이 내 가슴에 와닿았다. 다른 누군가에게도 내가 한 농담이 이렇게 바늘처럼 찌르지는 않았을까?\n내가 하는 농담은 누군가를 비하하면서 하지는 않는가? 그런 것이 희극의 일부이긴 하나 전부는 아니다. 즐거움은 순간적이나 아픔은 영원할 수 있다. 그런 상황이 온다면, 모든 자존심을 버리고 진심을 전해야 한다. 비록 상대는 그렇게 생각하지 않았을지라도 말이다."},"Essay/단단한-부드러움-3":{"title":"단단한 부드러움","links":[],"tags":["essay"],"content":"바람이 많이 불었다. 가만히 있기만 해도 몸이 밀릴 정도의 강한 비바람이었다. 더워서 열었던 창문까지 닫아야 할 정도였다. 바깥에 풀들도 그 강한 힘을 이기지 못하고 이리저리 흔들렸다. 그럼에도 곧게 뻗은 나무는 본인의 단단함을 자랑하듯 꼿꼿이 서있었다.\n다음날 출근길에 어제 흔들리던 식물들을 보았다. 굳건히 서있던 나무가 부러져 있었다. 그에 반해 세차게 흔들리던 풀은 여전히 살아있었다. 문득 흐르는 대로 살으라는 유명한 문구가 떠올랐다.\n흐르는 대로 살라는 말은 나에게 반항심을 느끼게 했었다. 세상이 주는 시련과 어려움에 대해 수긍하고, 이에 대해 포기하라는 핑계로 느껴졌기 때문이다. 중세시대처럼 토지, 혹은 권력을 가진 귀족이나 왕의 노예 혹은 하인처럼 그 시스템을 온건히 순응하고 산다는 것은 시대에 맞지 않는다고 생각했다. 누구나 할 수 있다는 믿음을 저버린다면 허무주의에 빠질 것이 분명했다.\n그래서 부러지지 않기 위해 단단한 사람이 되기로 했다. 내가 생각하는 것들이 맞다고, 증명하기 위해 치열하게 살았다. 그 과정에서 나의 잣대를 남에게 씌우기도 해 봤다. 점점 모난 사람으로 되어가는 내가 느껴졌다. 그럴수록 불행해지는 나를 발견할 수 있었다.\n그러던 어느 날, 누군가를 만났다. 누구보다 사회적 성공을 거두신 그분은 이런 나의 모난 질문들에 대해서 “그럴 수 있다”라는 태도로 나를 마주해주셨다. 자신의 철학과 다를 수 있음에도 이를 포용하는 여유를 보여주셨다. 그때 진정한 단단함은 이런 것이 아닐까 어렴풋이 생각했다.\n단단하다는 것은 곧 포용하는 힘이 부족함을 견지한다. 이는 개인적으로도 적용되는 말이지만, 타인이 나를 보았을 때도 그러하다. 인간은 본능적으로 자신과 다른 부류의 사람과 동질감을 느끼지 못한다. 대화 속에서 사용하는 단어, 외적으로 보이는 분위기, 경제적, 사회적 위치, 드러나는 성격 등을 본능적으로 캐치한다. 서로를 이해한다는 자세보다 고집을 내세운다면 그들은 자연스레 자신의 무리라고 생각하기를 접는다.\n그렇다고 무조건적인 부드러움이 세상을 살아가는 옳은 방법이라고는 생각하지 않는다. 오히려 부조리에 반항하는 자신만의 고집이 어느 정도 있어야 된다고 믿는다. 나와 분명 다른 생각, 그리고 본질적으로 보았을 때 분명히 옳지 않은 생각을 함에도 불구하고 그 사람의 삶에 대한 철학을 존중해야 한다. 하지만 그렇다고 나의 철학을 버릴 필요는 없다. 내 생각이 확고하다면, 어떤 말을 해도 그냥 의견일 뿐이다. 오히려 고맙다. 새로운 시각을 받아들일 수 있으니까.\n부드러움에도 여러 종류가 있다. 물이 흘러가는 부드러움, 실크와 같은 원단을 만졌을 때의 부드러움. 나는 바람에 흔들리더라도 다시 제자리로 돌아오는 풀과 같은 부드러움을 가진 사람이 되고자 한다. 분명 자신의 정체성을 꿋꿋이 드러내나, 여러 흔들림에 자신을 어느 정도 놓아주고 수용할 줄 아는, 그런 단단함을 가진 부드러운 사람이 되고 싶다."},"Essay/언제나-그래-왔듯이-3":{"title":"언제나 그래 왔듯이","links":[],"tags":["essay"],"content":"무기력증이 도졌다. 새벽같이 일어나 운동을 하고, 샤워하고, 팟캐스트를 들으며 힘차게 출근하는 게 전과 같이 즐겁지 않았다. 일이라는 것은 내 삶에 있어서 큰 부분을 차지한다. 그럼에도 즐겁지 않게 된 것은 무슨 연유였을까.\n사실 일이라는 것 자체에서 즐거움을 찾는다기보다 그 과정에서 느끼는 소속감, 성취감이 나에게 더 많은 의미를 주는 듯하다. 누군가에게 도움을 주고, 그사람이 행복해하며, 제품을 통해 세상에 흔적을 남기고, 인정까지 받을 수 있는 행위가 세상에 얼마나 있을까? 이렇게 삶의 의미를 찾느라 발버둥 치는 걸 보면 아직까지는 카뮈가 말한 “부조리”를 느끼는 정도는 아닌 것 같아 다행이다.\n신입으로서 어떻게 보면 당연히 느끼는 감정일지도 모르겠다. 전공을 바꿔 취직했고, 제대로 된 인턴 한번 못해봤으며, 그렇기에 업무 프로세스, 개략적인 업계가 돌아가는 방향, 실무 능력 등 모자란 게 너무나도 많다. 그리고 현장에서는 당장의 업무를 해결하는 것이 보다 급선무인 것 너무나도 잘 안다. 나 역시 그런 판단을 했을 것이기 때문이다.\n누구를 탓하려는 건 절대 아니다. 이런 무기력증을 느끼는 건 결국 나에 대한 실망감으로부터 온다. 내가 생각하는 이상과 현실의 괴리감은 그 이상을 마치 절대 다다를 수 없는 오아시스와 같은 것으로 만든다.\n사람은 사회적 동물이라는 것을 다시 한번 느낀다. 소속감, 동질감과 같은 감정은 그 무엇보다 행복을 주는 가장 근본적인 요소다. 그리고 이는 함께 목표하는 무언가를 헤쳐나갈 때, 혹은 그 과정에서 서로의 고충을 자연스레 이해하면서 생긴다. 그 무리에 끼기 위해서는 그 무리에 그런 직간접적인 이익을 제공해야 한다.\n내가 갖고 싶은 것이 그들과의 정서적 교감이라면, 먼저 원하는 것을 주어야 한다. 그 대가를 치를 자신이 없다면 그건 내가 덜 아쉬워서, 덜 간절해서 그렇다. 배가 부른 거다. 세상은 시장논리를 벗어나지 않는다.\n보여주고 증명해야 하는 것이 정글 같은 세상 속에서 살아갈 수 있는 자명한 이치다. 이를 받아들여야 비로소 사회의 구성원으로서 쓸모 있는 사람으로 남을 수 있다.\n하지만 지나친 욕심은 화를 부른다. 오히려 이런 감정을 느끼고 힘든 이 순간이, 비로소 나를 증명할 때가 되었다는 것을 반증하는 시기일지도 모른다. 특정 집단에서 내 존재 이유를 생각하는 시점에, 그 이전의 시간 동안 할 수 있는 최선을 다하며 살았다면 지난 시간에 굳이 후회할 필요는 없다. 자연스레 찾아오는 시기가 도래한 것뿐이다.\n그래서 나는 지금 찾아오는 이 도태될지도 모른다는 불안감, 무기력함, 긴장감을 오히려 내 삶에 새로운 성장을 가져오는 좋은 잣대로 삼으려 한다. 장기적 관점에서 삶을 예측하기 어려운 우리는 지나간 시간은 그 나름대로 의미가 있었다는 것을 간절하게, 그리고 확신을 가지며 믿을 수밖에 없다. 가까이서 보았을 때 아무 의미 없는 것처럼 보이는 점묘화가 결국 멀리서 보았을 때 아름다운 그림이 되는 것처럼 말이다.\n언제나 그랬다. 감정적인 상태에 빠지는 것은 곧 나를 제대로 바라보는 계기가 되었다. 그리고 현 상태에서 내가 할 수 있는 최선의 행동을 행할 뿐이다. 그 결과는 아무도 모른다. 그렇지만 멈춰있을 수도 없다. 가장 중요한 것은 지금의 나를 있게 만들어준 나의 판단과 행동을 믿는 것뿐이다. 언제나 그래 왔듯이, 답은 내 안에 있다."},"Essay/자유에-대한-고찰-3":{"title":"자유에 대한 고찰","links":[],"tags":["essay"],"content":"자유란 무엇인가? 질문이 너무 추상적이다. 인류가 지성이 생긴 이래 자신도 모르게, 혹은 의도적으로 생각해 온 문제임이 분명하다. 짧은 식견이지만 나름대로의 생각을 적어본다.\n자유는 모든 의존이 끊어진 상태이다. 여기서 의존은 사회적, 물질적 관계를 포괄하는 단어이다. 사람마다 정의하는 “의존”은 다를 것이다. 건강, 가족, 친구, 연애, 음식, 수면, 과시, 환경, 지식, 지위, 성취, 사회적 만족감, 봉사 등 여러 가지가 있을 수 있다. 그리고 그 우선순위도 다르다.\n먼저 사회적 측면에서 바라보자. 인간은 관계 속에서 정의되는 개체이다. 그렇기 때문에 독립적인 존재는 없다. 하지만 그 관계의 의존도는 분명 낮출 수 있다. 즉, 인간은 관계에서 정의되나 그 관계의 역학 관계의 우위는 가져갈 수 있다. 받는 쪽에서 주는 쪽으로, 요청을 받는 쪽에서 요청을 하는 쪽으로. 의존이 없는 관계를 통해 자신이 사회적으로 정의될 수 있다면 분명 심리적인 안정과 함께 주도적으로 살아갈 자유를 얻을 것이다. 물론 이 결과를 만드는데 상당한 노력이 들 것이 분명하다.\n하지만 그 과정에서 물질적 측면이 개입할 수 있다. 이는 외적인 의존으로, 나의 자유의지와 상관없이 특정 행동을 하도록 강요한다. 상사의 지나친 업무 요청, 상환 압박 등이 예가 될 수 있다. 그리고 이 부분에 대한 방어 체계를 만들기 위해 소위 “경제적 자유”가 필요해진다.\n돈이라는 발명은 무형적 자산인 가치와 시간을 수치적으로 표현할 수 있는 매개체이다. 수치적으로 표현되었기 때문에 상호 교환할 수 있는 힘을 가진다. 즉, 노동으로 대표되는 물리적 행위에 대한 가치를 돈으로 표현 가능하고, 교환 가능하다. 그렇기 때문에 경제적 자유는 외적인 의존을 방어할 수 있는 만큼의 돈 혹은 자산을 모으는 것과 동치이다. 방어해야 하는 외적인 의존의 수가 많을수록 경제적 자유를 위한 자산의 규모는 달라질 수 있다.\n경제적 자유는 자유를 위한 방어 수단에 가깝다고 생각한다. 인간의 3대 욕구가 충족이 된 상태라면 사회적 자유를 우선시하는 것이 좋다고 생각한다. 단단한 멘탈, 사고 정리를 통해 심리적인 자유, 여유를 가져야 한다. 다음으로 그 사회적 자유를 침해받지 않을 방법을 구상해야 한다. 만에 하나 공격받을 수 있는 외압으로부터 벗어나야 한다. 그리고 폭력이 정당화되지 않는 자본주의 세상에서 그 유일한 방패는 돈이다. 그렇기 때문에 경제적 자유는 필요하다."},"Essay/쟤는-일만-해요.-3":{"title":"쟤는 일만 해요.","links":[],"tags":["essay"],"content":"긴 연휴가 시작되었다. 어린이날, 주말, 그리고 대체휴일로 지정된 근로자의 날까지 총 4일의 달콤한 휴일이 나를 반겼다. 첫 직장인으로서의 기나긴 연휴는 신입사원의 긴장을 잠시나마 늦춰줄 수 있는 쉼터와 같았다. 대학 시절, 함께 공부하고 프로젝트를 진행했던 동료들과 오랜만에 여행을 떠나기로 했다.\n오랜만에 만나 다양한 얘기를 하는 도중, 근무시간에 대한 얘기가 나왔다. 각기 다른 직장에 몸담고 있는지라 다른 생활패턴을 가지고 있었다. 8-17, 10-19 등 다양한 종류들이 있었다. 직장인들에게 민감한 주제인 포괄/비포괄 임금에 대한 이야기들이 나올 즈음, “너는 언제 출근해?”라는 질문이 나왔다. 이른 아침에 시작해서 늦은 저녁에 끝난다고 대답했다. 그리고 다른 친구가 말했다. “쟤는 일만 해요.”\n자주들은 말이다. 잘 알고, 오래된 친한 친구이기에 그 말이 어떠한 감정이 들어가지 않았음은 너무나 잘 안다. 하지만 보편적으로 내가 본 사람들에게서 저 말이 나왔다면 어땠을지를 생각해보았다. 비아냥대는 경우가 많았고, 사회성이 모자라다 판단하는 경우도 많았다. 나도 모르게 그런 말들이 상처로 다가왔는지도 모르겠다.\n그렇게 하루가 지났다. 돌아오는 길에도 그 말이 뇌리에 맴돌았다. 일도 좋지만 취미를 가져야 한다. “취미는 조직 생활에 있어 큰 도움이 될 수 있다”, “사업을 성공하려면 하는 것이 좋다” 등의 이야기를 들었다. 문득 “취미가 뭐예요?”라는 말에 모두가 신기해하고, 멋있어하는 무언가를 답하지 못하는 내가 잘못된 것은 아닌지 불안해졌다. 내가 잘못된 것일까? 나도 모르게 이런 내가 되어있다는 것이 아쉬웠고 안타까웠다. 나는 왜 이런 사람이 되어버린 것일까? 그렇게 옛날 생각을 해보았다.\n왜? 왜 하는 거야? §\n난 호기심이 많은 아이 었다. 행동에는 명백하건 감춰져 있건 의도가 있다고 생각했다. 왜 공부를 해야 하는지? 왜 추석에는 차례를 지내야 하는지? 왜 효도를 해야 하는지? 왜 거짓말을 해서는 안되는지? 왜 이 문제는 이런 식으로 풀어야 하는지? 지금은 이런 질문을 하는 것이 좋게 받아들여질지 모르지만, 내가 어릴 적에 이런 질문을 하면 보통의 어른들은 그 이유를 납득할 정도로 설명하지 못했다. “원래 그렇게 하는 거야”, “모두가 그렇게 하고 있어”, “그냥 외우면 돼”. 왜 하는지에 대해 설명을 하지 못하는 것을 행동해야 한다는 것에 큰 거부감을 느꼈다.\n그나마 학창 시절 내가 좋아했던 것은 수학과 과학이었다. 기본 공리를 기반으로 논리를 쌓아 완벽하게 설명할 수 있다는 것이 나에게는 큰 매력이었다. 사물의 본질을 볼 수 있는 눈을 가진다는 것이 정말 좋았다. 하지만 이런  학문적 흥미만을 가지는 것으로는 내 삶의 방향을 정할 수 없었다. 입시의 문을 통과해야 했고, 여전히 대학에 가야 하는 이유를 찾지 못한 나로서는 공부가 고문이었다. 주변 친구들의 좋은 성적과 비교는 나에게 큰 고통으로 찾아왔다. 무언가 잘못되고 있다는 것은 알았지만 나만의  이유를 찾지 못했고, 그렇게 원하는 대학에 진학하지 못했다.\n운이 좋게도 축복받은 집안에서 태어난 나는 한 번의 기회를 더 갖게 되었다. 이 모든 것이 나 때문에 발생하는 기회비용이라는 생각이 들었다. 내 삶이 나의 책임으로 끝나지 않는다는 것을 처음으로 느꼈다. 단순히 나의 동기를 찾지 못했다는 이유 하나만으로 많은 비용을 지불해야 한다는 것이 굉장히 죄송하고 한심했다. 세상은 결과로 보여줘야 한다는 것을 배윘다. 그리고 나만의 이유를 만들었다.\n그럼에도 불구하고 내가 입시에 성공해야 하는 이유를 외부, 즉 부모님에게 죄송하다는 감정으로부터 시작하고 싶지 않았다. 사람은 이기적이기 때문에, 그 이유가 자신의 이득으로 직결되지 않을 경우 이 모멘텀이 지속되지 않을 것이라 생각했다. 그리고 어린 나이에, 내가 가지고 있던 대학의 로망을 떠올렸다. 그리고 그것들을 하기 위해 무엇이 필요한지 고민했다. “돈”이었다. 그리고 이 대학생 신분으로 가장 빠르게 돈을 벌 수 있는 것은 “고액 과외”라는 결론에 다다랐다. 그렇게 가장 단가가 높은 수학 과외를 여러 개 하여 내가 원하는 캠퍼스 라이프를 즐기는 것을 이유로 철저하게 준비했다. 그리고 운이 좋게 그 목표를 이뤘다.\n호수에 던져진 돌 §\n오만은 성공 후에 찾아온다고 했다. 가장 못하는 수학 과목에서 가장 좋은 성적을 받은 나는 무서울 것이 없었다. 대학도 어느 정도 원하는 곳에 진학했고, 이제 과외만 하면 된다. 하지만 오만했던 탓일까. 시골이었던 우리 동네에서 학생을 구하기는 쉽지 않았다. 강의자료, 수업 방식들 모든 것이 준비되었지만, 기회는 쉽게 찾아오지 않았다.\n이제는 영업의 문제였다. 이를 위해서는 단순히 수학 과외를 해주는 형/오빠가 아닌 선생님으로서의 자질, PR 능력 등이 필요했다. 당장 사람을 구할 수 없으니, 조금 먼 시내까지 나가 파트타임 학원 강사를 뽑는 곳에서 활동해보기로 했다. 여러 군데 면접을 보았고, 고2 대상 수학 강사로 활동할 수 있었다. 여러 명 앞에서 어떻게 하면 많은 정보를 쉽게 설명할지, 어떤 요소는 생략하고 어떤 요소는 부각할지, 어떻게 시각화하여 보여주어 빠르게 이해시킬지, 어떤 비유를 사용할 지에 대해 많이 고민했다. 또 학생들의 표정을 읽고 지루한지, 집중이 되고 있는지 등을 파악하기 위해 대화 연습도 많이 했다.\n얼마의 시간이 지나고 가르친 학생들의 결과가 나왔다. 성적이 많이 올랐고, 운이 좋게 그중 한 친구와 개인 과외를 하게 됐다. 입소문이 퍼져 다른 학생들도 소개받아 그렇게 월 4명 이상의 학생과 수업을 하는 기회를 가졌다. 내가 준비했던 것이 시장에 통한다는 것이 굉장히 짜릿했다. 그렇게 6년이 흘렀다. 원하는 캠퍼스 생활, 부모님께 손 빌리지 않고 원하는 캠퍼스 생활을 하기 위해 시작한 과외는 어느 순간부터 이유가 되지 않았다. 학생으로서 많은 돈을 만져보았지만, 크게 사용하고 싶은 곳도 없었고, 엄청나게 즐겁지도 않았다. 어느샌가 나에게 과외는 돈을 위한 수단이 아니었다.\n그럼에도 불구하고 오랜 시간 과외를 했던 이유는 무엇이었을까? 이쯤이었다. 스승의 날 기념으로 학생을 만났다.  수업 시 친구처럼 얘기하며 서로의 많은 고민들을 얘기했던 학생이었다. 사람 문제, 성적 문제 등 많은 고민을 얘기했던지라 특별히 마음에 가는 친구였다. 오랜만에 만나 밥을 먹는 중, 어떻게 생활하냐는 질문에 “엄청 바쁘게 살아요”라는 말을 하더라. “와, 진짜 열심히 사는구나”라는 말에 그 친구는 이렇게 말했다. “선생님 만나고 많이 달라졌어요.”\n스승의 날이라는 의미가 부여돼서 일까? 가슴에 무언가 뭉클함이 밀려왔다. 내가 학창 시절 겪었던 크고 작은 괴로움들이, 내게 깨달음을 준 대학생활의 일상들이, 치열하게 하루를 살고 있었던 나의 시간표가 알게 모르게 영향을 주고 있었다는 것을 깨달았다. 한편으로는 위로로, 또 다른 의미로는 자극으로 누군가에게 전해지고 있었다.  큰 돌이 아닌 작은 돌로도 호수에 파문을 만들 수 있다는 것을 배웠다.\n팀 그리고 결과 §\n누군가를 가르쳤던 경험 외에 대학 생활에서 가장 인상 깊은 경험을 꼽으라면, 역시 동료들과 함께 나갔던 대회이다. 비전공자 4명이서 주말마다 데이터 분석을 하겠다며 공부했고, 특정 단체의 데이터를 받아 프로젝트를 진행했다. 대학생이 뭘 알겠는가. 당연히 말아먹고 1년 동안의 시간을 아쉬워했다. 가진 건 패기밖에 없던 우리는 제대로 한 번 더 도전해보기로 했고, 7월에 있던 그 당시 가장 컸던 데이터 분석 대회에 참가했다. 처음으로 장려상을 수상했다. 우리가 해냈다는 생각에 정말 행복했다.\n성공했다는 생각에 이 길에 방향이 보인다 생각했다. 내 머릿속에는 “좋은 스펙을 쌓아야 한다”라는 이유로 가득했고, 다시 그 팀원들을 모아 대회에 참가하자고 제안했다. 내 목적을 위해 잠을 줄여가면서 완성도 높은 자료, 발표를 구성하기 위해 노력했다. 오전/오후에는 인턴 생활, 저녁에는 과외 선생님, 밤에는 대회 준비로 하루를 보냈다. 이런 빡빡한 생활 속에서 나는 점점 예민하고 조급해졌다. 그리고 이런 감정상태는 팀원들을 다그치는 형태로 표현되었다.\n치열하게 준비한 결과, 준비한 대회에서 수상까지 할 수 있었다. 하지만 그때마다 우리는 지쳐갔다. 무엇을 위해 하는 것인지 의문이 쌓였다. 단순히 수상 실적을 위해 하는 것인지, 즐기면서 하는 것은 맞는지, 나는 내 소중한 사람들을 다그치면서까지 이것을 왜 하고 있는지. 스펙을 만들기 위한 이유로 시작했으나, 어느새 이것이 나의 이유가 될 수 없다는 것을 알았다. 나만을 위한 행동은 나에게 행복을 주지 않았다. 그리고 곧 궁극적으로 내가 무엇을 목표로 사는지에 대한 질문을 하게 되었다.\n나의 목적은 무엇인가 §\n언제나 그랬다. 좋은 성적을 받으면 부모님께 칭찬을 받으니까, 착한 아이가 되니까. 좋은 대학에 가면 대학의 이름을 얻으니까. 좋은 스펙을 쌓으면 좋은 직장에 가니까. 모두가 맞다고 생각하는 것을 나 역시 맞다고 생각하고 밀어붙였다. 그리고 이를 이뤘을 때 느끼는, 순간적인 짜릿함. 하지만 그뿐이다. 내가 진정으로 원하는 것이 아닐 때, 열정과 자신감으로 가득 찼던 마음은 곧 무기력과 허무함으로 채워진다.\n취업 이후도 같은 마음이었다. 나 역시 당장의 생존을 위해 먼저 취업한 지인들을 보며 부러워한 때가 있었다. 그렇지만 막상 내가 그 위치가 되어보니, 이것 역시 큰 행복은 주지 못했다. 커다란 사옥, 나의 자리, 학생 때는 만져보지 못했던 돈, 뿌듯해하시는 부모님의 모습 등을 마주하면서 내가 해냈다는 뿌듯함은 있었지만 목표를 달성한 상황에 가지고 있던 동기는 사라져 버렸다. 앞으로도 이렇게 단기적인 목표만을 세우면서 몰입하고 무기력해지기를 반복하기는 싫었다. 삶이라는 것에 “생존”말고 다른 가치, 의미가 있을 것이라 생각했다. 내가 죽기 전까지 항상 따를 수 있는 마음의 이정표를 가지고 싶었다. 그리고 나의 우상인 사람들은 어떻게 이런 문제를 해결했는지 찾아보았다.\n어릴 적부터 나의 우상들은 기업가였다. 자신이 옳다고 생각하는 것에 모든 것을 쏟아붓는 모습은 소시민적으로 살고 있는 내게 대리만족의 대상이었다. 그 과정에서 노력이 보이지 않음에도, 세상의 멸시에도 불구하고 꿋꿋이 해야 한다고 생각하는 것을 실행하는 모습은 언제나 내가 힘들고 하기 싫을 때 방향을 잡아주는 나침반의 역할을 했다. 그들은 어떻게 그 동기를 가질 수 있을까. 무엇이 영감을 주었을까. 그 추진력을 가지게 하는 마음가짐을 너무 갖고 싶었다.\n그리고 어느 날 한 가지를 깨닫게 되었다. 그들도 이러한 고민을 한 시기가 있었다는 것을. 내가 태어나서 무엇을 하고 죽어야 하는가? 그리고 그 우상들은 “세상에 무언가를 남기겠다. 인간을 위해 옳은 일을 하겠다.”와 같은 고차원적인 목표를 가지고 있었다. 돈을 버는 것은 그들에게 목표가 아니었다. 왜 그런 선택을 했을까? 나의 경험에 빗대어 곰곰이 생각해보았다.\n나 역시 그 정도의 큰 금액은 아니었지만, 상대적으로 큰돈을 만져보고서 느낀 것은 생각보다 이 돈이라는 것이 주는 행복이 크지 않다는 것이다. 크고 지속적인 만족감은 내가 세운 목표를 내가 해냈을 때, 그리고 그보다 더 큰 것은 내 행동, 능력, 가치가 누군가에게 큰 영향을 끼치고 그들이 변화하는 모습을 보는 순간에 찾아왔다. 그동안 어떻게 살아야 하는지, 목표를 세우고 계획하고 실천했던 그 하루하루가 그 사람의 머릿속에 변화를 가져오기 위함이었다고 생각되었다. 그 모든 힘든 것들이 보상받는 기분이 들었다. 대회에서 우승하기 위해 그렇게 고민하던 날들이 내 팀원의 활짝 웃는 모습을 보며 모두 씻겨나갔다. 나를 위한 무언가보다 도움이 필요한 사람에게 영향을 주는 것이 나에게 궁극적인 행복을 가져다주었다.\n작은 울림일 뿐이라도 §\n여태껏 나의 우상들을 보며 이런 생각을 했다. “그들이 특별해서 가능한 거야. 나 같은 사람은 누군가에게 영향을 줄 정도로 태어나지 않았어.” 그도 그럴 것이 그들은 너무 특별했다. 어린 나이에 제품을 만들고 창업을 했다. 시대에서 요구하는 필요한 제품을 만들었다. 그리고 세상이 자신의 판단대로 변화한다는 것은 나에게 너무나 커 보이는 목표들이었다. 그런 것들만이 세상에 영향을 주는 것이라 생각했고, 나는 사회의 하나의 부품으로 살아가는 것이 당연하다 생각했다.\n하지만 지난 시간을 살면서, 그것만이 영향을 끼치는 것이 아님을 몸소 배웠다. 비록 태어난 배경, 학력, 자라난 환경 등의 차이가 있음에도 불구하고, 우리는 사회라는 호수에 던져지는 하나의 돌이다. 모두가 그 pool에 나를 시험하며 뛰어든다. 돌의 크기가 차이 날 수 있지만 결국 호수에 던져지면 파문이 일어난다. 그 일렁임은 다른 돌에 영향을 준다. 그리고 그 정도는 가까울수록 더 강하다.\n그래서 나는 하루하루 허투루 살 수 없다. 나는 나와 연결된 사람들의 삶에 직접적으로 영향을 주는 사람이다. 그 책임감이 나를 나아가게 하고, 나에게 행복을 준다. 그들을 단순히 나의 커리어의 발판으로 삼거나, 이득을 위해 포용하는 것이 아니다. 그들과 함께 성장할 수 있다는 것이 나의 궁극적인 행복이다. 함께 무언가를 만들어가는 과정이 내 삶에 지속적으로 남는다. 내 능력과 행동이 누군가에게 긍정적인 영향을 준다면, 그보다 가슴 뛰고 기쁜 일은 없을 것 같다. 그렇기에 나에게 일은 신성하다. 세상에 나의 존재를 증명하는 행위이다. 거기에 더불어 생존을 가능케 한다. 가장 중요한 것은 그 과정에서 하나의 목표를 가진 동료들과 함께 성장한다는 것이다. 직접적으로 삶과 연관 있는 사람들에게 좋은 영향을 줄 수 있는 최선의 행위이다. 작은 울림뿐일지라도 그 영향을 준다면, 그 책임을 가지고 나아가야 한다.\n쟤는 일만 해요 §\n이제 “쟤는 일만 해요”라는 말은 나에게 “꿈을 위해 산다”라는 말과 같은 말이다. 내가 그토록 바라 왔던 우상들, 많은 사람들에게 좋은 제품을 제공하고 신념을 믿은 사람들이 행한 것들은 근본적으로 내가 하는 행동들과 크게 다르지 않았다. 올바르게 행동하는 것은 쉽지 않다. 당장의 이익을 위해 옳은 것을 포기할 수도 있고, 내면의 유혹에 빠져해야 할 일을 미룰 수도 있다. 그뿐이 아니다. 올바르게 살았음에도 불구하고 경제적 여유가 없을 수도 있다. 결과가 나쁠 수도 있다.\n그럼에도 불구하고 난 순수한 마음, 정직한 태도, 옳은 판단으로 항상 행동한다면, 그 보상은 반드시 돌아올 것이라 믿는다. 그리고 그 방식을 지금껏 알지 못하는 사람들에게 공유하고 싶다. 그것이 내가 우상으로 바라 왔던 리더들이 멸시와 핍박에도 본인의 철학을 고수할 수 있었던 이유라 생각한다. 그리고 나 역시 작은 울림으로 이를 시작해보려 한다. 내 진정한 삶의 의미를 찾아 오늘도 누군가에게는 “일만 하는” 하루를 살아보려 한다."},"Essay/지인의-성장을-본다는-것-3":{"title":"지인의 성장을 본다는 것","links":[],"tags":["essay"],"content":"감정은 우연히 찾아온다 §\n우연히 Github Repo에 들어가 봤습니다. 학창 시절, 멋모르고 마구잡이로 만들었던 저장소들이 마음에 들지 않았기 때문이에요. 그렇게 옛날 생각을 하며 정리를 하던 와중, 처음으로 개발자라고 내 입으로 말할 수 있게 해 준 부트캠프가 눈에 들어왔습니다. 그렇게 그 저장소들을 보며, 그때 마주했던 사람들을 떠올렸어요.\n기억에 남는 사람들이 있었습니다. 누구보다 좋은 코드를 작성했었고, 아는 지식도 많았어요. 비전공자인 제게 그들은 부러움과 선망의 대상이었습니다. 제 삶의 방향을 찾는데 돌아 돌아왔기 때문에, 기반 지식도 없고 지인도 없었거든요. IT업계에서 생활하기에 꼭 필요한 기반 지식들과 지인들, 다양한 코딩 경험들을 갖고 있다는 것이 뒤쳐졌다 생각했던 제게는 큰 압박이었어요. 그렇게 할 수 있는 모든 것을 걸어 그들과 견주겠다는 다짐을 한 지 6개월. 운이 좋게 취업을 할 수 있게 되었습니다.\n급하게 먹은 음식은 체한다고 했었나요. 아무래도 허겁지겁 배우긴 했나 봅니다. 입문 교육을 받을 시기, 이전에 배웠던 것들이 머릿속에서 많이 사라지고 있었어요. 다시 내면 속의 두려움이 커져가는 것이 느껴졌고, 이 마음을 이용하기로 결심했습니다. 이왕 이렇게 된 것 정확하고, 쉽게 내 말로 다시 정리하자. 그렇게 3개월 동안 다시 블로그를 만들어 정리했습니다.\n그런 와중 제게 선망의 대상이던 사람들의 코드를 다시 읽게 되었어요. 3~4개월 전의 코드인데도, 정갈한 느낌이 있었습니다. 여전히 나는 그 사람들의 뒤에 있다는 생각이 들었고, 마음에는 공허함이 찾아왔습니다. 노력이라는 것이 소용이 없는 것인가 하는 생각입니다.\n허탈함 §\n이런 감정이 들 때가 항상 있었습니다. 대학 입학을 위해 원서를 넣을 때가 그랬고, 취업 준비를 할 때 그랬습니다. 그리고 그 주변에는 나보다 상대적으로 위치가 높은 사람들이 주위에 있었죠. 함께 달리고 있지 않는 상황, 소속감이 결여된 감정은 그 무엇보다 나를 약하게 합니다.\n같은 출발선이라 생각했던 사람들이 어느새 내 앞을 달리고 있을 때, 우리 마음에 “질투”라는 단어는 자연스레 떠오릅니다. “나도 저런 곳에 가고 싶다. 나도 인정받고 싶다.” “사촌이 땅을 사면 배가 아프다.”라는 말이 시대가 변함에도 우리의 공감을 얻고 있는 것을 보면, 우리의 본성은 역시나 이기적인 듯합니다.\n다음으로는 “보상”을 바라는 심리가 마음속에서 자라납니다. “나도 열심히 했는데, 나에게는 왜 보상이 오지 않는 걸까?, 불공평해.” 이 감정은 얼마나 많은 희생을 했는지에 따라 더 강하게 작용합니다. 희생의 강도야 상대적이겠지만, 개인마다 다른 이 희생의 비율은 “보상”을 바라는 심리가 커지는 데 큰 영향을 끼칩니다.\n마지막으로는 “자책”입니다. “보상 심리”와 이 “자책하는 마음”은 Trade-Off 관계에 있습니다. “내가 이렇게 열심히 했는데, 왜 나는 이 정도야?” vs. “네가 열심히 하지 않아서 그런 거잖아.”의 두 마음이 싸우고 있습니다. 극단으로 치닫는 것이 좋지 않다는 것을 우리 몸은 본능적으로 아는 것인지도 모르겠네요.\n중재자 §\n내 마음에 어떠한 이유로든 전쟁이 난 상태라면, 이를 중재해줄 필요가 있습니다. “이성”의 개입을 통해 우리는 “사실 확인” 과정을 거쳐야 합니다. 가장 처음으로 이 감정들을 만들어 낸, “질투”에서 출발합니다. “너는 정말 질투할 상황이 맞는 거야?” 이 질문을 던지는 순간, 이성이 개입합니다.\n먼저, 자신이 정말로 많은 시간을 쏟았는지 확인해보아야 합니다. 저 같은 경우, 비전공자로서 근본적으로 쏟은 시간 자체가 다릅니다. 약 3년의 시간이 차이가 나는 상황에서, 단순히 최근 “열심히”했다는 말은 문제를 피상적으로 볼뿐입니다. 그렇기 때문에 많은 시간을 쏟았다는 것은 옳지 못한 생각입니다. 하지만 현재 기준으로 보았을 때 절대적으로 많은 시간을 쏟았다면, 그 부분 역시 인정해야 합니다. 즉, 쏟은 시간의 총량은 부족할 수 있으나, 단기적 관점에 보았을 때는 많은 노력을 했다고 볼 수 있겠죠.\n두 번째로는, 순간적으로 그 사람들에 대해 감정적으로(난 부족하다, 저 사람은 나보다 무조건 잘한다) 판단했기 때문에 결과가 더 높은 것처럼 판단되는 것은 아닌지에 대한 검증이 필요합니다. 모든 결과물을 세세하게 판단하기는 어렵기 때문에 얕게 보고, 부풀려서 생각하는 것은 아닌지 경계해야 합니다.\n세 번째로는, 개인의 능력이 정말 떨어지는 것인지 확인해보아야 합니다. 즉, “벽”이라고 느껴지는지 따져보아야 합니다. 이 사람의 태생적 능력 자체가 뛰어나고, 거기에 이를 즐기며 임하는 사람이라면 “질투”를 느끼는 것이 사치일 수 있습니다.\n비교라는 행위와 감정 §\n“질투”라는 감정에 대해 많은 고찰을 했다면 이제 판단의 시간입니다.\n가장 먼저 든 생각은, “내가 그 정보를 보지 않았다면 이런 생각을 했을까?”입니다. 혹은 좋지 못한 결과물을 보았다면 어땠을까요? 나태해졌을까요? 지금 이런 감정이 드는 것 자체가 좋지 않다고 생각했습니다. 내 감정, 혹은 행동을 견인하는 것이 외부 정보에 의존하고 있음을 느꼈습니다.\n하지만 인간인 이상, 우리는 “비교”에서 벗어날 수 없습니다. 무리 지어 생활하는 우리는 항상 다른 사람의 감정, 행동, 판단, 언어, 표정 등을 관찰하고, 이에 맞춘 답을 내놓고 있기 때문이죠. 그렇다면, 정말 비교는 나쁜 것만을 담고 있는 걸까요?\n“의미”를 내포하고 있는 어떤 단어든 장점과 단점을 가지고 있다고 생각합니다. “귀엽다”라는 단어도 긍정적인 의미만 내포하는 것처럼 보이지만, “결단력 있다”라는 단어를 내포하기는 어려운 것처럼 말이죠. 마찬가지로 “비교” 역시 장단점을 가지고 있다 생각합니다.\n우리는 “비교”를 통해 자신의 위치를 확인합니다. 별도 없고 행성도 없는 우주 속에 물체가 있습니다. 그 물체는 자기가 속도를 가지고 있다는 것을 자각할 수 있을까요? 불가능합니다. 내가 어느 곳에 있는지 “비교”해줄 다른 물체가 없기 때문이죠. 개인의 성장에 있어서도 마찬가지입니다. 목표하는 리더, 라이벌, 나를 따르는 후배가 없다면, 우리는 본인의 위치를 알기 어려울 것입니다.\n\n자신의 위치를 알게 됨으로써, 우리는 “성취”한다는 감정과 “자극”이라는 감정을 얻습니다. 그 강도가 지나치게 된 경우 “좌절”과 “포기”라는 감정 역시 얻을 수 있죠. 그리고 그 감정의 변경은 우리의 마음가짐에 달렸습니다.\n나에게 떳떳하게 §\n그렇다면 우리는 무엇에 집중해야 할까요? 비교라는 단어 자체가 장단점 모두를 가지고 있다면, 결국 이 상황을 어떻게 받아들이겠냐에 대한 답을 내야 합니다. 외부의 요소는 상수입니다. 누군가는 결과를 얻을 것이고, 어떠한 방식으로든 나에게 들려옵니다. 어떻게 대처해야 할까요?\n이를 위해서는 내가 할 수 있는 최대한을 했는지 여부가 가장 중요합니다. 진정으로 할 수 있는 모든 것을 도전한 후에, 그래도 이루지 못한다면 그건 더 이상 “질투”가 되지 않겠죠. 그때부터는 “아쉬움”으로 변화할 것입니다. 오늘 내가 얼마나 이뤄냈느냐. 그래서 얼마나 다가갔느냐를 가지고 나의 상태를 비교하는 것이 중요합니다. 더 이상 외부 요소에 의한 것이 아닌, 나의 성장 정도를 가지고 비교를 행하는 것이 가장 건설적인 비교의 방법입니다.\n인생은 불공평합니다. 같은 출발선에서 시작하지 못한다는 것이 누군가에게는 정말 큰 불행일 것이라 생각합니다. 그 에너지는 그 무엇보다 클 것입니다. 하지만, 그 거대한 동기를 외부로 돌리기보다 내면으로 돌릴 때, 우리는 다른 사람들에게는 없는 “무기”를 가지게 됩니다. 한 발짝 떨어져서 보면, 그 “부족함”이라는 감정이 한 번 더 나를 움직이게 만드는 하나의 “경쟁력”이 될 수도 있습니다.\n결국 나에 대한 믿음이라 생각합니다. 현 상황에서 그들과의 격차를 받아들이고, 이제부터는 어떻게 하겠느냐. 어떠한 목표를 세우고, 계획을 세워 이뤄내겠느냐. 이러한 질문과 행동만이 내가 느낀 감정의 방향을 돌릴 수 있습니다. 그 방향과 계획이 올바르다면, 언젠가는 바라 왔던 이상을 이룰 것이고, 운이 좋다면 넘을 수도 있습니다. 그 과정에서 느끼는 감정 역시, 나의 원동력으로 잘 사용할 수 있다면 더더욱 좋겠지요.\n그래서 오늘은 이런 감정을 즐겨보려 합니다. 즐거운 마음으로 내 동료의 성장을 축하하고, 언젠가 돌아올 내 성장을 보면서 저 역시 축하받을 것을 기대합니다. 덕분에 내 위치를 재고할 수 있었음에 감사합니다. 그리고 내일도 성장할 나의 모습을 기대해봅니다."},"Essay/누군가는-상처받을-수-있다":{"title":"누군가는 상처받을 수 있다","links":[],"tags":["essay"],"content":"말은 정말 어렵다. 그 사람에게 느끼는 특정 감정들 자체와 별개로 다르게 표현되어 그 사람에게 닿는다. 특히 나는 그게 더 심한 듯하다.\n자신의 감정 자체를 솔직하게 일상에서 전달하는 것이 부끄럽다. 속으로는 전혀 그렇게 생각하지 않지만 그와 반대된 표현으로 말한다. 오히려 친하지 않다고 생각되는 상대에게 좋은 말을 많이 한다. 참 골치 아픈 성격이다.\n정감이 가는 상대일수록 더 그렇다. 내게 호감인 사람이라면 그 사람이 힘들 때 내가 할 수 있는 모든 걸 해주고 싶다. 그리고 그렇지 못할 때는 너무 슬프다. 그러면서 밖으로는 좋은 말, 예쁜 말로 상대에게 말하지 않는 경향이 있다.\n더 부끄러운 건 그러면서 일말의 진심을 알아주기를 바라는 내가 있다. 자신이 한 말에 대한 책임을 회피하는 것 같아 굉장히 내가 작게 느껴진다. 외강내유라는 말은 나를 두고 하는 말인가?\n타고난 성격은 바꾸기 어렵다. 그러나 노력은 해봐야 한다. 내가 한 말에 대해 사과를 구하러 간 그날 밤, 그 성격을 여태껏 못 고친 것이냐는 진심과 농담 사이를 지나치는 말이 내 가슴에 와닿았다. 다른 누군가에게도 내가 한 농담이 이렇게 바늘처럼 찌르지는 않았을까?\n내가 하는 농담은 누군가를 비하하면서 하지는 않는가? 그런 것이 희극의 일부이긴 하나 전부는 아니다. 즐거움은 순간적이나 아픔은 영원할 수 있다. 그런 상황이 온다면, 모든 자존심을 버리고 진심을 전해야 한다. 비록 상대는 그렇게 생각하지 않았을지라도 말이다."},"Essay/단단한-부드러움":{"title":"단단한 부드러움","links":[],"tags":["essay"],"content":"바람이 많이 불었다. 가만히 있기만 해도 몸이 밀릴 정도의 강한 비바람이었다. 더워서 열었던 창문까지 닫아야 할 정도였다. 바깥에 풀들도 그 강한 힘을 이기지 못하고 이리저리 흔들렸다. 그럼에도 곧게 뻗은 나무는 본인의 단단함을 자랑하듯 꼿꼿이 서있었다.\n다음날 출근길에 어제 흔들리던 식물들을 보았다. 굳건히 서있던 나무가 부러져 있었다. 그에 반해 세차게 흔들리던 풀은 여전히 살아있었다. 문득 흐르는 대로 살으라는 유명한 문구가 떠올랐다.\n흐르는 대로 살라는 말은 나에게 반항심을 느끼게 했었다. 세상이 주는 시련과 어려움에 대해 수긍하고, 이에 대해 포기하라는 핑계로 느껴졌기 때문이다. 중세시대처럼 토지, 혹은 권력을 가진 귀족이나 왕의 노예 혹은 하인처럼 그 시스템을 온건히 순응하고 산다는 것은 시대에 맞지 않는다고 생각했다. 누구나 할 수 있다는 믿음을 저버린다면 허무주의에 빠질 것이 분명했다.\n그래서 부러지지 않기 위해 단단한 사람이 되기로 했다. 내가 생각하는 것들이 맞다고, 증명하기 위해 치열하게 살았다. 그 과정에서 나의 잣대를 남에게 씌우기도 해 봤다. 점점 모난 사람으로 되어가는 내가 느껴졌다. 그럴수록 불행해지는 나를 발견할 수 있었다.\n그러던 어느 날, 누군가를 만났다. 누구보다 사회적 성공을 거두신 그분은 이런 나의 모난 질문들에 대해서 “그럴 수 있다”라는 태도로 나를 마주해주셨다. 자신의 철학과 다를 수 있음에도 이를 포용하는 여유를 보여주셨다. 그때 진정한 단단함은 이런 것이 아닐까 어렴풋이 생각했다.\n단단하다는 것은 곧 포용하는 힘이 부족함을 견지한다. 이는 개인적으로도 적용되는 말이지만, 타인이 나를 보았을 때도 그러하다. 인간은 본능적으로 자신과 다른 부류의 사람과 동질감을 느끼지 못한다. 대화 속에서 사용하는 단어, 외적으로 보이는 분위기, 경제적, 사회적 위치, 드러나는 성격 등을 본능적으로 캐치한다. 서로를 이해한다는 자세보다 고집을 내세운다면 그들은 자연스레 자신의 무리라고 생각하기를 접는다.\n그렇다고 무조건적인 부드러움이 세상을 살아가는 옳은 방법이라고는 생각하지 않는다. 오히려 부조리에 반항하는 자신만의 고집이 어느 정도 있어야 된다고 믿는다. 나와 분명 다른 생각, 그리고 본질적으로 보았을 때 분명히 옳지 않은 생각을 함에도 불구하고 그 사람의 삶에 대한 철학을 존중해야 한다. 하지만 그렇다고 나의 철학을 버릴 필요는 없다. 내 생각이 확고하다면, 어떤 말을 해도 그냥 의견일 뿐이다. 오히려 고맙다. 새로운 시각을 받아들일 수 있으니까.\n부드러움에도 여러 종류가 있다. 물이 흘러가는 부드러움, 실크와 같은 원단을 만졌을 때의 부드러움. 나는 바람에 흔들리더라도 다시 제자리로 돌아오는 풀과 같은 부드러움을 가진 사람이 되고자 한다. 분명 자신의 정체성을 꿋꿋이 드러내나, 여러 흔들림에 자신을 어느 정도 놓아주고 수용할 줄 아는, 그런 단단함을 가진 부드러운 사람이 되고 싶다."},"Essay/언제나-그래-왔듯이":{"title":"언제나 그래 왔듯이","links":[],"tags":["essay"],"content":"무기력증이 도졌다. 새벽같이 일어나 운동을 하고, 샤워하고, 팟캐스트를 들으며 힘차게 출근하는 게 전과 같이 즐겁지 않았다. 일이라는 것은 내 삶에 있어서 큰 부분을 차지한다. 그럼에도 즐겁지 않게 된 것은 무슨 연유였을까.\n사실 일이라는 것 자체에서 즐거움을 찾는다기보다 그 과정에서 느끼는 소속감, 성취감이 나에게 더 많은 의미를 주는 듯하다. 누군가에게 도움을 주고, 그사람이 행복해하며, 제품을 통해 세상에 흔적을 남기고, 인정까지 받을 수 있는 행위가 세상에 얼마나 있을까? 이렇게 삶의 의미를 찾느라 발버둥 치는 걸 보면 아직까지는 카뮈가 말한 “부조리”를 느끼는 정도는 아닌 것 같아 다행이다.\n신입으로서 어떻게 보면 당연히 느끼는 감정일지도 모르겠다. 전공을 바꿔 취직했고, 제대로 된 인턴 한번 못해봤으며, 그렇기에 업무 프로세스, 개략적인 업계가 돌아가는 방향, 실무 능력 등 모자란 게 너무나도 많다. 그리고 현장에서는 당장의 업무를 해결하는 것이 보다 급선무인 것 너무나도 잘 안다. 나 역시 그런 판단을 했을 것이기 때문이다.\n누구를 탓하려는 건 절대 아니다. 이런 무기력증을 느끼는 건 결국 나에 대한 실망감으로부터 온다. 내가 생각하는 이상과 현실의 괴리감은 그 이상을 마치 절대 다다를 수 없는 오아시스와 같은 것으로 만든다.\n사람은 사회적 동물이라는 것을 다시 한번 느낀다. 소속감, 동질감과 같은 감정은 그 무엇보다 행복을 주는 가장 근본적인 요소다. 그리고 이는 함께 목표하는 무언가를 헤쳐나갈 때, 혹은 그 과정에서 서로의 고충을 자연스레 이해하면서 생긴다. 그 무리에 끼기 위해서는 그 무리에 그런 직간접적인 이익을 제공해야 한다.\n내가 갖고 싶은 것이 그들과의 정서적 교감이라면, 먼저 원하는 것을 주어야 한다. 그 대가를 치를 자신이 없다면 그건 내가 덜 아쉬워서, 덜 간절해서 그렇다. 배가 부른 거다. 세상은 시장논리를 벗어나지 않는다.\n보여주고 증명해야 하는 것이 정글 같은 세상 속에서 살아갈 수 있는 자명한 이치다. 이를 받아들여야 비로소 사회의 구성원으로서 쓸모 있는 사람으로 남을 수 있다.\n하지만 지나친 욕심은 화를 부른다. 오히려 이런 감정을 느끼고 힘든 이 순간이, 비로소 나를 증명할 때가 되었다는 것을 반증하는 시기일지도 모른다. 특정 집단에서 내 존재 이유를 생각하는 시점에, 그 이전의 시간 동안 할 수 있는 최선을 다하며 살았다면 지난 시간에 굳이 후회할 필요는 없다. 자연스레 찾아오는 시기가 도래한 것뿐이다.\n그래서 나는 지금 찾아오는 이 도태될지도 모른다는 불안감, 무기력함, 긴장감을 오히려 내 삶에 새로운 성장을 가져오는 좋은 잣대로 삼으려 한다. 장기적 관점에서 삶을 예측하기 어려운 우리는 지나간 시간은 그 나름대로 의미가 있었다는 것을 간절하게, 그리고 확신을 가지며 믿을 수밖에 없다. 가까이서 보았을 때 아무 의미 없는 것처럼 보이는 점묘화가 결국 멀리서 보았을 때 아름다운 그림이 되는 것처럼 말이다.\n언제나 그랬다. 감정적인 상태에 빠지는 것은 곧 나를 제대로 바라보는 계기가 되었다. 그리고 현 상태에서 내가 할 수 있는 최선의 행동을 행할 뿐이다. 그 결과는 아무도 모른다. 그렇지만 멈춰있을 수도 없다. 가장 중요한 것은 지금의 나를 있게 만들어준 나의 판단과 행동을 믿는 것뿐이다. 언제나 그래 왔듯이, 답은 내 안에 있다."},"Essay/자유에-대한-고찰":{"title":"자유에 대한 고찰","links":[],"tags":["essay"],"content":"자유란 무엇인가? 질문이 너무 추상적이다. 인류가 지성이 생긴 이래 자신도 모르게, 혹은 의도적으로 생각해 온 문제임이 분명하다. 짧은 식견이지만 나름대로의 생각을 적어본다.\n자유는 모든 의존이 끊어진 상태이다. 여기서 의존은 사회적, 물질적 관계를 포괄하는 단어이다. 사람마다 정의하는 “의존”은 다를 것이다. 건강, 가족, 친구, 연애, 음식, 수면, 과시, 환경, 지식, 지위, 성취, 사회적 만족감, 봉사 등 여러 가지가 있을 수 있다. 그리고 그 우선순위도 다르다.\n먼저 사회적 측면에서 바라보자. 인간은 관계 속에서 정의되는 개체이다. 그렇기 때문에 독립적인 존재는 없다. 하지만 그 관계의 의존도는 분명 낮출 수 있다. 즉, 인간은 관계에서 정의되나 그 관계의 역학 관계의 우위는 가져갈 수 있다. 받는 쪽에서 주는 쪽으로, 요청을 받는 쪽에서 요청을 하는 쪽으로. 의존이 없는 관계를 통해 자신이 사회적으로 정의될 수 있다면 분명 심리적인 안정과 함께 주도적으로 살아갈 자유를 얻을 것이다. 물론 이 결과를 만드는데 상당한 노력이 들 것이 분명하다.\n하지만 그 과정에서 물질적 측면이 개입할 수 있다. 이는 외적인 의존으로, 나의 자유의지와 상관없이 특정 행동을 하도록 강요한다. 상사의 지나친 업무 요청, 상환 압박 등이 예가 될 수 있다. 그리고 이 부분에 대한 방어 체계를 만들기 위해 소위 “경제적 자유”가 필요해진다.\n돈이라는 발명은 무형적 자산인 가치와 시간을 수치적으로 표현할 수 있는 매개체이다. 수치적으로 표현되었기 때문에 상호 교환할 수 있는 힘을 가진다. 즉, 노동으로 대표되는 물리적 행위에 대한 가치를 돈으로 표현 가능하고, 교환 가능하다. 그렇기 때문에 경제적 자유는 외적인 의존을 방어할 수 있는 만큼의 돈 혹은 자산을 모으는 것과 동치이다. 방어해야 하는 외적인 의존의 수가 많을수록 경제적 자유를 위한 자산의 규모는 달라질 수 있다.\n경제적 자유는 자유를 위한 방어 수단에 가깝다고 생각한다. 인간의 3대 욕구가 충족이 된 상태라면 사회적 자유를 우선시하는 것이 좋다고 생각한다. 단단한 멘탈, 사고 정리를 통해 심리적인 자유, 여유를 가져야 한다. 다음으로 그 사회적 자유를 침해받지 않을 방법을 구상해야 한다. 만에 하나 공격받을 수 있는 외압으로부터 벗어나야 한다. 그리고 폭력이 정당화되지 않는 자본주의 세상에서 그 유일한 방패는 돈이다. 그렇기 때문에 경제적 자유는 필요하다."},"Essay/쟤는-일만-해요.":{"title":"쟤는 일만 해요.","links":[],"tags":["essay"],"content":"긴 연휴가 시작되었다. 어린이날, 주말, 그리고 대체휴일로 지정된 근로자의 날까지 총 4일의 달콤한 휴일이 나를 반겼다. 첫 직장인으로서의 기나긴 연휴는 신입사원의 긴장을 잠시나마 늦춰줄 수 있는 쉼터와 같았다. 대학 시절, 함께 공부하고 프로젝트를 진행했던 동료들과 오랜만에 여행을 떠나기로 했다.\n오랜만에 만나 다양한 얘기를 하는 도중, 근무시간에 대한 얘기가 나왔다. 각기 다른 직장에 몸담고 있는지라 다른 생활패턴을 가지고 있었다. 8-17, 10-19 등 다양한 종류들이 있었다. 직장인들에게 민감한 주제인 포괄/비포괄 임금에 대한 이야기들이 나올 즈음, “너는 언제 출근해?”라는 질문이 나왔다. 이른 아침에 시작해서 늦은 저녁에 끝난다고 대답했다. 그리고 다른 친구가 말했다. “쟤는 일만 해요.”\n자주들은 말이다. 잘 알고, 오래된 친한 친구이기에 그 말이 어떠한 감정이 들어가지 않았음은 너무나 잘 안다. 하지만 보편적으로 내가 본 사람들에게서 저 말이 나왔다면 어땠을지를 생각해보았다. 비아냥대는 경우가 많았고, 사회성이 모자라다 판단하는 경우도 많았다. 나도 모르게 그런 말들이 상처로 다가왔는지도 모르겠다.\n그렇게 하루가 지났다. 돌아오는 길에도 그 말이 뇌리에 맴돌았다. 일도 좋지만 취미를 가져야 한다. “취미는 조직 생활에 있어 큰 도움이 될 수 있다”, “사업을 성공하려면 하는 것이 좋다” 등의 이야기를 들었다. 문득 “취미가 뭐예요?”라는 말에 모두가 신기해하고, 멋있어하는 무언가를 답하지 못하는 내가 잘못된 것은 아닌지 불안해졌다. 내가 잘못된 것일까? 나도 모르게 이런 내가 되어있다는 것이 아쉬웠고 안타까웠다. 나는 왜 이런 사람이 되어버린 것일까? 그렇게 옛날 생각을 해보았다.\n왜? 왜 하는 거야? §\n난 호기심이 많은 아이 었다. 행동에는 명백하건 감춰져 있건 의도가 있다고 생각했다. 왜 공부를 해야 하는지? 왜 추석에는 차례를 지내야 하는지? 왜 효도를 해야 하는지? 왜 거짓말을 해서는 안되는지? 왜 이 문제는 이런 식으로 풀어야 하는지? 지금은 이런 질문을 하는 것이 좋게 받아들여질지 모르지만, 내가 어릴 적에 이런 질문을 하면 보통의 어른들은 그 이유를 납득할 정도로 설명하지 못했다. “원래 그렇게 하는 거야”, “모두가 그렇게 하고 있어”, “그냥 외우면 돼”. 왜 하는지에 대해 설명을 하지 못하는 것을 행동해야 한다는 것에 큰 거부감을 느꼈다.\n그나마 학창 시절 내가 좋아했던 것은 수학과 과학이었다. 기본 공리를 기반으로 논리를 쌓아 완벽하게 설명할 수 있다는 것이 나에게는 큰 매력이었다. 사물의 본질을 볼 수 있는 눈을 가진다는 것이 정말 좋았다. 하지만 이런  학문적 흥미만을 가지는 것으로는 내 삶의 방향을 정할 수 없었다. 입시의 문을 통과해야 했고, 여전히 대학에 가야 하는 이유를 찾지 못한 나로서는 공부가 고문이었다. 주변 친구들의 좋은 성적과 비교는 나에게 큰 고통으로 찾아왔다. 무언가 잘못되고 있다는 것은 알았지만 나만의  이유를 찾지 못했고, 그렇게 원하는 대학에 진학하지 못했다.\n운이 좋게도 축복받은 집안에서 태어난 나는 한 번의 기회를 더 갖게 되었다. 이 모든 것이 나 때문에 발생하는 기회비용이라는 생각이 들었다. 내 삶이 나의 책임으로 끝나지 않는다는 것을 처음으로 느꼈다. 단순히 나의 동기를 찾지 못했다는 이유 하나만으로 많은 비용을 지불해야 한다는 것이 굉장히 죄송하고 한심했다. 세상은 결과로 보여줘야 한다는 것을 배윘다. 그리고 나만의 이유를 만들었다.\n그럼에도 불구하고 내가 입시에 성공해야 하는 이유를 외부, 즉 부모님에게 죄송하다는 감정으로부터 시작하고 싶지 않았다. 사람은 이기적이기 때문에, 그 이유가 자신의 이득으로 직결되지 않을 경우 이 모멘텀이 지속되지 않을 것이라 생각했다. 그리고 어린 나이에, 내가 가지고 있던 대학의 로망을 떠올렸다. 그리고 그것들을 하기 위해 무엇이 필요한지 고민했다. “돈”이었다. 그리고 이 대학생 신분으로 가장 빠르게 돈을 벌 수 있는 것은 “고액 과외”라는 결론에 다다랐다. 그렇게 가장 단가가 높은 수학 과외를 여러 개 하여 내가 원하는 캠퍼스 라이프를 즐기는 것을 이유로 철저하게 준비했다. 그리고 운이 좋게 그 목표를 이뤘다.\n호수에 던져진 돌 §\n오만은 성공 후에 찾아온다고 했다. 가장 못하는 수학 과목에서 가장 좋은 성적을 받은 나는 무서울 것이 없었다. 대학도 어느 정도 원하는 곳에 진학했고, 이제 과외만 하면 된다. 하지만 오만했던 탓일까. 시골이었던 우리 동네에서 학생을 구하기는 쉽지 않았다. 강의자료, 수업 방식들 모든 것이 준비되었지만, 기회는 쉽게 찾아오지 않았다.\n이제는 영업의 문제였다. 이를 위해서는 단순히 수학 과외를 해주는 형/오빠가 아닌 선생님으로서의 자질, PR 능력 등이 필요했다. 당장 사람을 구할 수 없으니, 조금 먼 시내까지 나가 파트타임 학원 강사를 뽑는 곳에서 활동해보기로 했다. 여러 군데 면접을 보았고, 고2 대상 수학 강사로 활동할 수 있었다. 여러 명 앞에서 어떻게 하면 많은 정보를 쉽게 설명할지, 어떤 요소는 생략하고 어떤 요소는 부각할지, 어떻게 시각화하여 보여주어 빠르게 이해시킬지, 어떤 비유를 사용할 지에 대해 많이 고민했다. 또 학생들의 표정을 읽고 지루한지, 집중이 되고 있는지 등을 파악하기 위해 대화 연습도 많이 했다.\n얼마의 시간이 지나고 가르친 학생들의 결과가 나왔다. 성적이 많이 올랐고, 운이 좋게 그중 한 친구와 개인 과외를 하게 됐다. 입소문이 퍼져 다른 학생들도 소개받아 그렇게 월 4명 이상의 학생과 수업을 하는 기회를 가졌다. 내가 준비했던 것이 시장에 통한다는 것이 굉장히 짜릿했다. 그렇게 6년이 흘렀다. 원하는 캠퍼스 생활, 부모님께 손 빌리지 않고 원하는 캠퍼스 생활을 하기 위해 시작한 과외는 어느 순간부터 이유가 되지 않았다. 학생으로서 많은 돈을 만져보았지만, 크게 사용하고 싶은 곳도 없었고, 엄청나게 즐겁지도 않았다. 어느샌가 나에게 과외는 돈을 위한 수단이 아니었다.\n그럼에도 불구하고 오랜 시간 과외를 했던 이유는 무엇이었을까? 이쯤이었다. 스승의 날 기념으로 학생을 만났다.  수업 시 친구처럼 얘기하며 서로의 많은 고민들을 얘기했던 학생이었다. 사람 문제, 성적 문제 등 많은 고민을 얘기했던지라 특별히 마음에 가는 친구였다. 오랜만에 만나 밥을 먹는 중, 어떻게 생활하냐는 질문에 “엄청 바쁘게 살아요”라는 말을 하더라. “와, 진짜 열심히 사는구나”라는 말에 그 친구는 이렇게 말했다. “선생님 만나고 많이 달라졌어요.”\n스승의 날이라는 의미가 부여돼서 일까? 가슴에 무언가 뭉클함이 밀려왔다. 내가 학창 시절 겪었던 크고 작은 괴로움들이, 내게 깨달음을 준 대학생활의 일상들이, 치열하게 하루를 살고 있었던 나의 시간표가 알게 모르게 영향을 주고 있었다는 것을 깨달았다. 한편으로는 위로로, 또 다른 의미로는 자극으로 누군가에게 전해지고 있었다.  큰 돌이 아닌 작은 돌로도 호수에 파문을 만들 수 있다는 것을 배웠다.\n팀 그리고 결과 §\n누군가를 가르쳤던 경험 외에 대학 생활에서 가장 인상 깊은 경험을 꼽으라면, 역시 동료들과 함께 나갔던 대회이다. 비전공자 4명이서 주말마다 데이터 분석을 하겠다며 공부했고, 특정 단체의 데이터를 받아 프로젝트를 진행했다. 대학생이 뭘 알겠는가. 당연히 말아먹고 1년 동안의 시간을 아쉬워했다. 가진 건 패기밖에 없던 우리는 제대로 한 번 더 도전해보기로 했고, 7월에 있던 그 당시 가장 컸던 데이터 분석 대회에 참가했다. 처음으로 장려상을 수상했다. 우리가 해냈다는 생각에 정말 행복했다.\n성공했다는 생각에 이 길에 방향이 보인다 생각했다. 내 머릿속에는 “좋은 스펙을 쌓아야 한다”라는 이유로 가득했고, 다시 그 팀원들을 모아 대회에 참가하자고 제안했다. 내 목적을 위해 잠을 줄여가면서 완성도 높은 자료, 발표를 구성하기 위해 노력했다. 오전/오후에는 인턴 생활, 저녁에는 과외 선생님, 밤에는 대회 준비로 하루를 보냈다. 이런 빡빡한 생활 속에서 나는 점점 예민하고 조급해졌다. 그리고 이런 감정상태는 팀원들을 다그치는 형태로 표현되었다.\n치열하게 준비한 결과, 준비한 대회에서 수상까지 할 수 있었다. 하지만 그때마다 우리는 지쳐갔다. 무엇을 위해 하는 것인지 의문이 쌓였다. 단순히 수상 실적을 위해 하는 것인지, 즐기면서 하는 것은 맞는지, 나는 내 소중한 사람들을 다그치면서까지 이것을 왜 하고 있는지. 스펙을 만들기 위한 이유로 시작했으나, 어느새 이것이 나의 이유가 될 수 없다는 것을 알았다. 나만을 위한 행동은 나에게 행복을 주지 않았다. 그리고 곧 궁극적으로 내가 무엇을 목표로 사는지에 대한 질문을 하게 되었다.\n나의 목적은 무엇인가 §\n언제나 그랬다. 좋은 성적을 받으면 부모님께 칭찬을 받으니까, 착한 아이가 되니까. 좋은 대학에 가면 대학의 이름을 얻으니까. 좋은 스펙을 쌓으면 좋은 직장에 가니까. 모두가 맞다고 생각하는 것을 나 역시 맞다고 생각하고 밀어붙였다. 그리고 이를 이뤘을 때 느끼는, 순간적인 짜릿함. 하지만 그뿐이다. 내가 진정으로 원하는 것이 아닐 때, 열정과 자신감으로 가득 찼던 마음은 곧 무기력과 허무함으로 채워진다.\n취업 이후도 같은 마음이었다. 나 역시 당장의 생존을 위해 먼저 취업한 지인들을 보며 부러워한 때가 있었다. 그렇지만 막상 내가 그 위치가 되어보니, 이것 역시 큰 행복은 주지 못했다. 커다란 사옥, 나의 자리, 학생 때는 만져보지 못했던 돈, 뿌듯해하시는 부모님의 모습 등을 마주하면서 내가 해냈다는 뿌듯함은 있었지만 목표를 달성한 상황에 가지고 있던 동기는 사라져 버렸다. 앞으로도 이렇게 단기적인 목표만을 세우면서 몰입하고 무기력해지기를 반복하기는 싫었다. 삶이라는 것에 “생존”말고 다른 가치, 의미가 있을 것이라 생각했다. 내가 죽기 전까지 항상 따를 수 있는 마음의 이정표를 가지고 싶었다. 그리고 나의 우상인 사람들은 어떻게 이런 문제를 해결했는지 찾아보았다.\n어릴 적부터 나의 우상들은 기업가였다. 자신이 옳다고 생각하는 것에 모든 것을 쏟아붓는 모습은 소시민적으로 살고 있는 내게 대리만족의 대상이었다. 그 과정에서 노력이 보이지 않음에도, 세상의 멸시에도 불구하고 꿋꿋이 해야 한다고 생각하는 것을 실행하는 모습은 언제나 내가 힘들고 하기 싫을 때 방향을 잡아주는 나침반의 역할을 했다. 그들은 어떻게 그 동기를 가질 수 있을까. 무엇이 영감을 주었을까. 그 추진력을 가지게 하는 마음가짐을 너무 갖고 싶었다.\n그리고 어느 날 한 가지를 깨닫게 되었다. 그들도 이러한 고민을 한 시기가 있었다는 것을. 내가 태어나서 무엇을 하고 죽어야 하는가? 그리고 그 우상들은 “세상에 무언가를 남기겠다. 인간을 위해 옳은 일을 하겠다.”와 같은 고차원적인 목표를 가지고 있었다. 돈을 버는 것은 그들에게 목표가 아니었다. 왜 그런 선택을 했을까? 나의 경험에 빗대어 곰곰이 생각해보았다.\n나 역시 그 정도의 큰 금액은 아니었지만, 상대적으로 큰돈을 만져보고서 느낀 것은 생각보다 이 돈이라는 것이 주는 행복이 크지 않다는 것이다. 크고 지속적인 만족감은 내가 세운 목표를 내가 해냈을 때, 그리고 그보다 더 큰 것은 내 행동, 능력, 가치가 누군가에게 큰 영향을 끼치고 그들이 변화하는 모습을 보는 순간에 찾아왔다. 그동안 어떻게 살아야 하는지, 목표를 세우고 계획하고 실천했던 그 하루하루가 그 사람의 머릿속에 변화를 가져오기 위함이었다고 생각되었다. 그 모든 힘든 것들이 보상받는 기분이 들었다. 대회에서 우승하기 위해 그렇게 고민하던 날들이 내 팀원의 활짝 웃는 모습을 보며 모두 씻겨나갔다. 나를 위한 무언가보다 도움이 필요한 사람에게 영향을 주는 것이 나에게 궁극적인 행복을 가져다주었다.\n작은 울림일 뿐이라도 §\n여태껏 나의 우상들을 보며 이런 생각을 했다. “그들이 특별해서 가능한 거야. 나 같은 사람은 누군가에게 영향을 줄 정도로 태어나지 않았어.” 그도 그럴 것이 그들은 너무 특별했다. 어린 나이에 제품을 만들고 창업을 했다. 시대에서 요구하는 필요한 제품을 만들었다. 그리고 세상이 자신의 판단대로 변화한다는 것은 나에게 너무나 커 보이는 목표들이었다. 그런 것들만이 세상에 영향을 주는 것이라 생각했고, 나는 사회의 하나의 부품으로 살아가는 것이 당연하다 생각했다.\n하지만 지난 시간을 살면서, 그것만이 영향을 끼치는 것이 아님을 몸소 배웠다. 비록 태어난 배경, 학력, 자라난 환경 등의 차이가 있음에도 불구하고, 우리는 사회라는 호수에 던져지는 하나의 돌이다. 모두가 그 pool에 나를 시험하며 뛰어든다. 돌의 크기가 차이 날 수 있지만 결국 호수에 던져지면 파문이 일어난다. 그 일렁임은 다른 돌에 영향을 준다. 그리고 그 정도는 가까울수록 더 강하다.\n그래서 나는 하루하루 허투루 살 수 없다. 나는 나와 연결된 사람들의 삶에 직접적으로 영향을 주는 사람이다. 그 책임감이 나를 나아가게 하고, 나에게 행복을 준다. 그들을 단순히 나의 커리어의 발판으로 삼거나, 이득을 위해 포용하는 것이 아니다. 그들과 함께 성장할 수 있다는 것이 나의 궁극적인 행복이다. 함께 무언가를 만들어가는 과정이 내 삶에 지속적으로 남는다. 내 능력과 행동이 누군가에게 긍정적인 영향을 준다면, 그보다 가슴 뛰고 기쁜 일은 없을 것 같다. 그렇기에 나에게 일은 신성하다. 세상에 나의 존재를 증명하는 행위이다. 거기에 더불어 생존을 가능케 한다. 가장 중요한 것은 그 과정에서 하나의 목표를 가진 동료들과 함께 성장한다는 것이다. 직접적으로 삶과 연관 있는 사람들에게 좋은 영향을 줄 수 있는 최선의 행위이다. 작은 울림뿐일지라도 그 영향을 준다면, 그 책임을 가지고 나아가야 한다.\n쟤는 일만 해요 §\n이제 “쟤는 일만 해요”라는 말은 나에게 “꿈을 위해 산다”라는 말과 같은 말이다. 내가 그토록 바라 왔던 우상들, 많은 사람들에게 좋은 제품을 제공하고 신념을 믿은 사람들이 행한 것들은 근본적으로 내가 하는 행동들과 크게 다르지 않았다. 올바르게 행동하는 것은 쉽지 않다. 당장의 이익을 위해 옳은 것을 포기할 수도 있고, 내면의 유혹에 빠져해야 할 일을 미룰 수도 있다. 그뿐이 아니다. 올바르게 살았음에도 불구하고 경제적 여유가 없을 수도 있다. 결과가 나쁠 수도 있다.\n그럼에도 불구하고 난 순수한 마음, 정직한 태도, 옳은 판단으로 항상 행동한다면, 그 보상은 반드시 돌아올 것이라 믿는다. 그리고 그 방식을 지금껏 알지 못하는 사람들에게 공유하고 싶다. 그것이 내가 우상으로 바라 왔던 리더들이 멸시와 핍박에도 본인의 철학을 고수할 수 있었던 이유라 생각한다. 그리고 나 역시 작은 울림으로 이를 시작해보려 한다. 내 진정한 삶의 의미를 찾아 오늘도 누군가에게는 “일만 하는” 하루를 살아보려 한다."},"Essay/지인의-성장을-본다는-것":{"title":"지인의 성장을 본다는 것","links":[],"tags":["essay"],"content":"감정은 우연히 찾아온다 §\n우연히 Github Repo에 들어가 봤습니다. 학창 시절, 멋모르고 마구잡이로 만들었던 저장소들이 마음에 들지 않았기 때문이에요. 그렇게 옛날 생각을 하며 정리를 하던 와중, 처음으로 개발자라고 내 입으로 말할 수 있게 해 준 부트캠프가 눈에 들어왔습니다. 그렇게 그 저장소들을 보며, 그때 마주했던 사람들을 떠올렸어요.\n기억에 남는 사람들이 있었습니다. 누구보다 좋은 코드를 작성했었고, 아는 지식도 많았어요. 비전공자인 제게 그들은 부러움과 선망의 대상이었습니다. 제 삶의 방향을 찾는데 돌아 돌아왔기 때문에, 기반 지식도 없고 지인도 없었거든요. IT업계에서 생활하기에 꼭 필요한 기반 지식들과 지인들, 다양한 코딩 경험들을 갖고 있다는 것이 뒤쳐졌다 생각했던 제게는 큰 압박이었어요. 그렇게 할 수 있는 모든 것을 걸어 그들과 견주겠다는 다짐을 한 지 6개월. 운이 좋게 취업을 할 수 있게 되었습니다.\n급하게 먹은 음식은 체한다고 했었나요. 아무래도 허겁지겁 배우긴 했나 봅니다. 입문 교육을 받을 시기, 이전에 배웠던 것들이 머릿속에서 많이 사라지고 있었어요. 다시 내면 속의 두려움이 커져가는 것이 느껴졌고, 이 마음을 이용하기로 결심했습니다. 이왕 이렇게 된 것 정확하고, 쉽게 내 말로 다시 정리하자. 그렇게 3개월 동안 다시 블로그를 만들어 정리했습니다.\n그런 와중 제게 선망의 대상이던 사람들의 코드를 다시 읽게 되었어요. 3~4개월 전의 코드인데도, 정갈한 느낌이 있었습니다. 여전히 나는 그 사람들의 뒤에 있다는 생각이 들었고, 마음에는 공허함이 찾아왔습니다. 노력이라는 것이 소용이 없는 것인가 하는 생각입니다.\n허탈함 §\n이런 감정이 들 때가 항상 있었습니다. 대학 입학을 위해 원서를 넣을 때가 그랬고, 취업 준비를 할 때 그랬습니다. 그리고 그 주변에는 나보다 상대적으로 위치가 높은 사람들이 주위에 있었죠. 함께 달리고 있지 않는 상황, 소속감이 결여된 감정은 그 무엇보다 나를 약하게 합니다.\n같은 출발선이라 생각했던 사람들이 어느새 내 앞을 달리고 있을 때, 우리 마음에 “질투”라는 단어는 자연스레 떠오릅니다. “나도 저런 곳에 가고 싶다. 나도 인정받고 싶다.” “사촌이 땅을 사면 배가 아프다.”라는 말이 시대가 변함에도 우리의 공감을 얻고 있는 것을 보면, 우리의 본성은 역시나 이기적인 듯합니다.\n다음으로는 “보상”을 바라는 심리가 마음속에서 자라납니다. “나도 열심히 했는데, 나에게는 왜 보상이 오지 않는 걸까?, 불공평해.” 이 감정은 얼마나 많은 희생을 했는지에 따라 더 강하게 작용합니다. 희생의 강도야 상대적이겠지만, 개인마다 다른 이 희생의 비율은 “보상”을 바라는 심리가 커지는 데 큰 영향을 끼칩니다.\n마지막으로는 “자책”입니다. “보상 심리”와 이 “자책하는 마음”은 Trade-Off 관계에 있습니다. “내가 이렇게 열심히 했는데, 왜 나는 이 정도야?” vs. “네가 열심히 하지 않아서 그런 거잖아.”의 두 마음이 싸우고 있습니다. 극단으로 치닫는 것이 좋지 않다는 것을 우리 몸은 본능적으로 아는 것인지도 모르겠네요.\n중재자 §\n내 마음에 어떠한 이유로든 전쟁이 난 상태라면, 이를 중재해줄 필요가 있습니다. “이성”의 개입을 통해 우리는 “사실 확인” 과정을 거쳐야 합니다. 가장 처음으로 이 감정들을 만들어 낸, “질투”에서 출발합니다. “너는 정말 질투할 상황이 맞는 거야?” 이 질문을 던지는 순간, 이성이 개입합니다.\n먼저, 자신이 정말로 많은 시간을 쏟았는지 확인해보아야 합니다. 저 같은 경우, 비전공자로서 근본적으로 쏟은 시간 자체가 다릅니다. 약 3년의 시간이 차이가 나는 상황에서, 단순히 최근 “열심히”했다는 말은 문제를 피상적으로 볼뿐입니다. 그렇기 때문에 많은 시간을 쏟았다는 것은 옳지 못한 생각입니다. 하지만 현재 기준으로 보았을 때 절대적으로 많은 시간을 쏟았다면, 그 부분 역시 인정해야 합니다. 즉, 쏟은 시간의 총량은 부족할 수 있으나, 단기적 관점에 보았을 때는 많은 노력을 했다고 볼 수 있겠죠.\n두 번째로는, 순간적으로 그 사람들에 대해 감정적으로(난 부족하다, 저 사람은 나보다 무조건 잘한다) 판단했기 때문에 결과가 더 높은 것처럼 판단되는 것은 아닌지에 대한 검증이 필요합니다. 모든 결과물을 세세하게 판단하기는 어렵기 때문에 얕게 보고, 부풀려서 생각하는 것은 아닌지 경계해야 합니다.\n세 번째로는, 개인의 능력이 정말 떨어지는 것인지 확인해보아야 합니다. 즉, “벽”이라고 느껴지는지 따져보아야 합니다. 이 사람의 태생적 능력 자체가 뛰어나고, 거기에 이를 즐기며 임하는 사람이라면 “질투”를 느끼는 것이 사치일 수 있습니다.\n비교라는 행위와 감정 §\n“질투”라는 감정에 대해 많은 고찰을 했다면 이제 판단의 시간입니다.\n가장 먼저 든 생각은, “내가 그 정보를 보지 않았다면 이런 생각을 했을까?”입니다. 혹은 좋지 못한 결과물을 보았다면 어땠을까요? 나태해졌을까요? 지금 이런 감정이 드는 것 자체가 좋지 않다고 생각했습니다. 내 감정, 혹은 행동을 견인하는 것이 외부 정보에 의존하고 있음을 느꼈습니다.\n하지만 인간인 이상, 우리는 “비교”에서 벗어날 수 없습니다. 무리 지어 생활하는 우리는 항상 다른 사람의 감정, 행동, 판단, 언어, 표정 등을 관찰하고, 이에 맞춘 답을 내놓고 있기 때문이죠. 그렇다면, 정말 비교는 나쁜 것만을 담고 있는 걸까요?\n“의미”를 내포하고 있는 어떤 단어든 장점과 단점을 가지고 있다고 생각합니다. “귀엽다”라는 단어도 긍정적인 의미만 내포하는 것처럼 보이지만, “결단력 있다”라는 단어를 내포하기는 어려운 것처럼 말이죠. 마찬가지로 “비교” 역시 장단점을 가지고 있다 생각합니다.\n우리는 “비교”를 통해 자신의 위치를 확인합니다. 별도 없고 행성도 없는 우주 속에 물체가 있습니다. 그 물체는 자기가 속도를 가지고 있다는 것을 자각할 수 있을까요? 불가능합니다. 내가 어느 곳에 있는지 “비교”해줄 다른 물체가 없기 때문이죠. 개인의 성장에 있어서도 마찬가지입니다. 목표하는 리더, 라이벌, 나를 따르는 후배가 없다면, 우리는 본인의 위치를 알기 어려울 것입니다.\n\n자신의 위치를 알게 됨으로써, 우리는 “성취”한다는 감정과 “자극”이라는 감정을 얻습니다. 그 강도가 지나치게 된 경우 “좌절”과 “포기”라는 감정 역시 얻을 수 있죠. 그리고 그 감정의 변경은 우리의 마음가짐에 달렸습니다.\n나에게 떳떳하게 §\n그렇다면 우리는 무엇에 집중해야 할까요? 비교라는 단어 자체가 장단점 모두를 가지고 있다면, 결국 이 상황을 어떻게 받아들이겠냐에 대한 답을 내야 합니다. 외부의 요소는 상수입니다. 누군가는 결과를 얻을 것이고, 어떠한 방식으로든 나에게 들려옵니다. 어떻게 대처해야 할까요?\n이를 위해서는 내가 할 수 있는 최대한을 했는지 여부가 가장 중요합니다. 진정으로 할 수 있는 모든 것을 도전한 후에, 그래도 이루지 못한다면 그건 더 이상 “질투”가 되지 않겠죠. 그때부터는 “아쉬움”으로 변화할 것입니다. 오늘 내가 얼마나 이뤄냈느냐. 그래서 얼마나 다가갔느냐를 가지고 나의 상태를 비교하는 것이 중요합니다. 더 이상 외부 요소에 의한 것이 아닌, 나의 성장 정도를 가지고 비교를 행하는 것이 가장 건설적인 비교의 방법입니다.\n인생은 불공평합니다. 같은 출발선에서 시작하지 못한다는 것이 누군가에게는 정말 큰 불행일 것이라 생각합니다. 그 에너지는 그 무엇보다 클 것입니다. 하지만, 그 거대한 동기를 외부로 돌리기보다 내면으로 돌릴 때, 우리는 다른 사람들에게는 없는 “무기”를 가지게 됩니다. 한 발짝 떨어져서 보면, 그 “부족함”이라는 감정이 한 번 더 나를 움직이게 만드는 하나의 “경쟁력”이 될 수도 있습니다.\n결국 나에 대한 믿음이라 생각합니다. 현 상황에서 그들과의 격차를 받아들이고, 이제부터는 어떻게 하겠느냐. 어떠한 목표를 세우고, 계획을 세워 이뤄내겠느냐. 이러한 질문과 행동만이 내가 느낀 감정의 방향을 돌릴 수 있습니다. 그 방향과 계획이 올바르다면, 언젠가는 바라 왔던 이상을 이룰 것이고, 운이 좋다면 넘을 수도 있습니다. 그 과정에서 느끼는 감정 역시, 나의 원동력으로 잘 사용할 수 있다면 더더욱 좋겠지요.\n그래서 오늘은 이런 감정을 즐겨보려 합니다. 즐거운 마음으로 내 동료의 성장을 축하하고, 언젠가 돌아올 내 성장을 보면서 저 역시 축하받을 것을 기대합니다. 덕분에 내 위치를 재고할 수 있었음에 감사합니다. 그리고 내일도 성장할 나의 모습을 기대해봅니다."},"Knowledges/Economics/Diminishing-returns":{"title":"수확 체감의 원칙","links":[],"tags":["returns"],"content":"\n일정 크기의 토지에 노동력을 추가로 투입할 때, 수확량의 증가가 노동력의 증가를 따라가지 못하는 현상\n\n수확 체감(한계생산 감소)(Diminishing returns)은 경제학 용어로서, 일정 크기의 토지에 노동력을 추가로 투입할 때, 수확량의 증가가 노동력의 증가를 따라가지 못하는 현상을 말하며, 일반화하여 수확 체감의 법칙이라고도 한다.\n이 개념을 제조 분야에 적용하면, 제품을 더 많이 생산하기 위해 드는 단위당 비용이 점차 증가하는 현상이라 할 수 있다. 이것을 상대 비용 체증의 법칙(law of increasing relative cost) 또는 기회 비용 체증의 법칙(law of increasing opportunity cost)이라고도 한다.\n수확 체감은 겉보기에는 경제적인 개념이지만, 기술적인 관계도 암시하고 있다. 수확 체감의 법칙은 기업의 단기 한계 비용 곡선이 증가하게 되는 것을 설명할 수 있다.\nReferences §\n\n수확 체감\n"},"Knowledges/Economics/Economics":{"title":"Economics","links":["Knowledges/Economics/Diminishing-returns"],"tags":[],"content":"\nDiminishing returns\n"},"Knowledges/Knowledges":{"title":"Knowledges","links":["Knowledges/Economics/Economics","Math","Engineering","Development","Project-Management","Knowledges/Bitcoin/Bitcoin","Knowledges/Markdown/Markdown","Knowledges/Productivity/Productivity"],"tags":[],"content":"\nEconomics\nMath\nEngineering\nDevelopment\nProject Management\nBitcoin\nMarkdown\nProductivity\n"},"Knowledges/Markdown/Markdown-Toggle":{"title":"Markdown Toggle","links":[],"tags":["markdown","toggle"],"content":"Expander control §\ngithub의 issue나 pull request 올릴 때, 정보를 숨기고 싶은 경우가 있다. 그런 경우 toggle을 사용하면 유용하다. expander control이라고도 하는데, 접기/펼치기 를 가능케해서 그런 이름이 붙었다.\n하지만 마크다운에서 토글은 지원하지 않는다. 그렇기 때문에 html의 태그를 사용해서 토글 기능을 사용할 수 있다. 이 기능을 제공하는 html의 태그가 바로 details이다.\n&lt;details&gt;\n&lt;summary&gt;제목&lt;/summary&gt;\n&lt;div&gt;\n \n내용\n \n&lt;/div&gt;\n&lt;/details&gt;\n\nToggle Test\n\n짜잔~!\n\n\nReference §\n\n마크다운 - Expander control(접기/펼치기) 만들기\n"},"Knowledges/Markdown/Markdown":{"title":"Markdown","links":["Knowledges/Markdown/Markdown-Toggle"],"tags":[],"content":"\nMarkdown Toggle\n"},"Knowledges/Productivity/Alfred-Workflow":{"title":"Alfred Workflow","links":[],"tags":[],"content":"답답한 걸 싫어하는 내게 속도가 나지 않는다는 것은 정말 곤욕이다. 내가 자주 사용하는 Alfred Workflow를 공유해본다.\n\nMarkdown Table §\n\n블로그글을 쓰거나, 기록을 해야 할 때, table만큼 좋은 게 없다. 그런데 markdown으로 쓰다보면 이걸 만드는게 여간 귀찮은게 아니다. 이녀석이 해결해준다.\ntable {colume number} {row number}\n\nAppDelete §\n\nmac은 app 지울 때, 상당히 귀찮다. 물론 application가서 휴지통 넣으면 되는데 상당히 귀찮다. 다음과 같이 지울 수 있다.\nuninstall xcode\n\nChrome, Whale, Safari window §\n\n\n\n키보드로 업무를 많이 하다보니, 순간적으로 웹 화면을 켜고 싶은데, 이걸 일일히 눌러서 켜는게 너무 귀찮다. 총 3개의 웹을 사용하는데 각각 매핑해놓고 쓰면 상당히 편하다. 화면 띄우고 command + L을 누르면 주소창에 커서로 바로 가서 사용이 가능하다.\nEgg timer §\n\n급하게 타이머나 알람을 킬 때 사용한다. timer, alarm 등의 명령어로 빠르게 설정이 가능하다.\nEmoji search §\n\n정말 많이 사용하는 기능ㅇ다. mac에서는 정말 찾는게 속도가 떨어지는데, 여기서 sad, happy, thumbs up과 같이 검색하여 사용하면 매우 빠르다.\ngitIgnore §\n\n\n이것도 정말 좋다. 저장소 만들 때 보면 넣지 않아서 우베에서 검색하고 복사해서 다시 넣는데, 이거는 한방에 가능하다. 원하는 것ㅅ들을 공백 기준으로 나열하고 clipboard에 복사하면 끝이다!\nHTTP Status Codes §\n\n\nhttp code는 항상 헷갈린다. 그 때마다 구글에 치기보다 바로바로 쳐서 확인하자. 엔터까지 치면 웹에 검색까지 해준다!\niCloud Passwords §\n\n비밀번호를 까먹을 때가 많다. 보통 iCloud를 켜놓고 여기에서 관리하게 되는데, 바로 접근가능하게 해주는 workflow다. 비밀번호 찾기 보다 여기서 검색해서 가져와서 사용하자.\nKill Process §\n\n급하게 app을 강제종료하고 싶을 때가 있다. 보통 응답하지 않을 경우에 사용한다. command + option + esc 말고, 바로 지워버리자.\nNaver Search §\n\n\n이것도 개발할 때 많이 사용하는 것인데, 변수, 함수 이름 지을 때, 어떤 단어가 맞을지 확인해보는 용도로 많이 사용한다. 이거 확인하려고 웹창 띄우는게 싫었는데 참 좋다. 영어도 번역해준다!\nPower Thesaurus §\n\n\n또 많이 쓰는 녀석이 나왔다. 단어는 생각이 나는데, 느낌이 안살아서 유의어가 필요할 때, 아니면 반의어가 필요할 때 사용한다.\nReminders §\n\n할일 관리를 나는 apple reminder로 활용한다. apple기기가 주변에 천지라서 로컬 앱을 사용하는 것이 좋더라. 깔끔하고. 근데 할일 추가할 때 급해죽겠는데 앱켜서 추가하는게 속도가 너무 떨어지더라.\n이녀석을 사용하면 바로 적용이 가능하다. 기본 폴더를 설정해놓으면 거기로 들어가고, 명시하면 해당 list로 들어간다.\nr today {work to do} in tech list\nr tomorrow {work to do} 04/30\n\nHomebrew &amp; cask for Alfred §\n\n\nhomebrew는 linux와 mac OS를 위한 package manager이다. 무언가를 설치하려면 terminal 켜서 brew ~ 식으로 설치해주어야 한다. App을 설치하는 명령어는 cask 이다. 마찬가지로 terminal로 입력해주어야 한다.\n그런데 이녀석과 함께라면 바로 알프레드를 켜서 처리해버릴 수 있다! 때때로 유용하다.\nScreenshot to Yoink §\n이건 Yoink라는 앱이 있어야 가능한 기능이다. 스크린 샷을 찍으면 Yoink Bucket으로 바로 들어간다. 그래서 여러장을 한번에 직고 모아진 녀석들을 옮기면서 빠르게 작업이 가능하다.\nEpilogue §\n많은 workflow를 쓰면서 가장 많이 쓰는 녀석들만 모아봤다. 끝!\nReference §\n\nAlfred Markdown Table\nAlfred workflow: Open New Chrome Window\nEggTimer 2\nalfred-emoji\nalfred-gitignore\nalfred-http-status-codes\nalfred-icloud-passwords\nalfred-process-killer\nalfnaversearch\nalfred-powerthesaurus\nalfred-reminders\nalfred-homebrew\nscreenshot-to-yoink\n"},"Knowledges/Productivity/Alfred-workflow-not-working":{"title":"Alfred workflow not working","links":[],"tags":[],"content":"잘 사용하고 있던 Alfred workflow가 동작하지 않는다.. Mac OS 12.3으로 업데이트하고나서 바로 이런 이슈가 터지다니. 속도가 안나 답답하다.\nIssue 원인 §\nApple에서 12.3부터 공식적으로 python 2을 지원하지 않는다고 한다. Python 2는 이제 지원도 안해주니 뭐 이해는 간다.\n문제는 Alfred workflow가 **Python 2 버전만을 지원**한다는 것이다. (하..)\n\nAlfred-Workflow only officially supports the system Pythons that come with macOS (i.e. /usr/bin/python), which is 2.6 on 10.6/Snow Leopard and 2.7 on later versions.\n\n그래서 Workflow 제작자들이 Python library인 Alfred-Workflow로 제작한 경우 스크립트가 안먹어서 이 문제가 터진 것.\n해결 방법 §\n해결 방법은 간단하다. python2를 일단 다시 받자.\nexport PATH=&quot;/opt/homebrew/bin:/usr/local/bin:${PATH}&quot;\neval &quot;$(brew shellenv)&quot;\nbrew install pyenv\npyenv install 2.7.18\nln -s &quot;${HOME}/.pyenv/versions/2.7.18/bin/python2.7&quot; &quot;${HOMEBREW_PREFIX}/bin/python&quot;\n위의 커맨드를 하나씩 따라 쳐주자. 그러면 이제 python 2.7이 설치되었다. 그런데 이렇게만 했다고 적용되는 건 아니다. python2를 사용하고 있는 workflow로 가서 python 실행 위치를 지정해주어야 한다.\n\n\n잘 안보이는데 이렇게 변경해주면 된다.\n# From\npython filename.py &quot;{query}&quot;\n \n# To\n${HOME}/.pyenv/versions/2.7.18/bin/python filename.py &quot;{query}&quot;\n이렇게 해도 안되는 녀석이 있었다.. (Pows) §\n다행히 migration을 해준 용자님이 계셨다. 땡큐!\n\nalfred-powerthesaurus\n\n안된다.. 그래서 그냥 python2로 시도해본 결과\nTraceback (most recent call last):\n  File &quot;/Users/user/Library/Application Support/Alfred/Alfred.alfredpreferences/workflows/user.workflow.C9F20046-9639-4B9A-B500-C54916D16E75/workflow/workflow.py&quot;, line 2070, in run\n    self.check_update()\n  File &quot;/Users/user/Library/Application Support/Alfred/Alfred.alfredpreferences/workflows/user.workflow.C9F20046-9639-4B9A-B500-C54916D16E75/workflow/workflow.py&quot;, line 2340, in check_update\n    run_in_background(&#039;__workflow_update_check&#039;, cmd)\n  File &quot;/Users/user/Library/Application Support/Alfred/Alfred.alfredpreferences/workflows/user.workflow.C9F20046-9639-4B9A-B500-C54916D16E75/workflow/background.py&quot;, line 235, in run_in_background\n    retcode = subprocess.call(cmd)\n  File &quot;/Users/user/.pyenv/versions/2.7.18/lib/python2.7/subprocess.py&quot;, line 172, in call\n    return Popen(*popenargs, **kwargs).wait()\n  File &quot;/Users/user/.pyenv/versions/2.7.18/lib/python2.7/subprocess.py&quot;, line 394, in __init__\n    errread, errwrite)\n  File &quot;/Users/user/.pyenv/versions/2.7.18/lib/python2.7/subprocess.py&quot;, line 1047, in _execute_child\n    raise child_exception\nOSError: [Errno 2] No such file or directory\n\n??? 이건 또 뭐야. 잘 보니 subprocess.py가 존재하지 않는다고 한다. OSError: [Errno 2] No such file or directory while using python subprocess in Django 해당 글을 보니 함수 호출이 잘못 된 것 같다.\n실제로 에러 로그보니 retcode = subprocess.call(cmd) 이부분 설명과 같았다.\n\n\n그래서 해당 경로로 가서 바꿔줬다.\n# From\nretcode = subprocess.call(crop)\n \n# To\nretcode = subprocess.call(crop, shell=True)\n그리고 python 2로 명령어를 바꿔주니 된다!\n\n마무리 §\n하, 갑자기 안되서 혈압이 올라버렸다. 이제 Script짜서 자동화 만들어둬야 되네..? 귀찮다. 끝!\nReference §\n\nNot working on the latest MacOS 12.3\nPython 2.7 will retire in…\nAlfred-Workflow Supported versions\nalfred-powerthesaurus\nOSError: [Errno 2] No such file or directory while using python subprocess in Django\n"},"Knowledges/Productivity/Environment-Setting-Automation":{"title":"Environment Setting Automation","links":[],"tags":["environment","setting","automation"],"content":"왜 필요한가? §\n\n주기적인 포맷이 필요하다는 것을 느꼈다. 7년동안 정리를 안하다보니 나도 스트레스를 받더라..\n그럴 때마다 기존에 사용하는 환경을 다시 구축하는게 너무나 시간낭비고 하기 싫었다.\n셀스크립트를 통해 자동화를 해둔다면 생산성 향상이 있을 것이라 판단!\n\n장단점 §\n\n장점\n\n주기적인 기기 변경이나 여러 디바이스에 동일한 환경을 세팅해야 하는 필요가 있을 때 매우 유용하다.\n\n\n단점\n\n시간을 내서 만들어놔야 하므로 귀찮다.\n\n\n\n목표 §\n\n\n내가 사용할 앱들에 대해서 스크립트 한번으로 세팅이 가능하도록 만든다.\n\n\n결과물 해당 링크에서 받아서 사용하면 된다.\n\n\n설치할 프로그램 목록 §\n해당 항목이 마음에 들지 않는다면, github에서 받아 Brewfile을 수정하면 된다. 개인적으로 추가도 가능하다.\n기본 설치 §\n\nbat\nfasd\nfzf\ngit\ngit-lfs\nmas\nneofetch\nneovim\ntig\nzsh\nmas\nwget\npython3\n\nBrew로 설치 §\n\nquicktype\n\n웹으로부터 설치 §\n\nalfred\nappcleaner\ngitkraken\nhammerspoon\niterm2\nnotion\nslack\ntelegram\nvisual-studio-code\nzoom\nkeka\nmonitorcontrol\ncamo-studio\ndash\nfigma\ngoogle-chrome\npostman\nkarabiner-elements\ncharles\nmattermost\nzeplin\ntelegram\n\n앱스토어로부터 설치 §\n\nAccelerate for Safari\nBetterJSON for Safari\nColorSlurp\nDark Reader for Safari\nEnpass - Password Manager\nGifski\nKakaoTalk\nKeynote\nMagnet\nMicrosoft Excel\nMicrosoft PowerPoint\nMicrosoft Word\nMovist\nSnippetsLab\nSpark – Email App by Readdle\nUnicorn Blocker\nYoink\nUnicorn HTTPS\nPaste JSON as Code • quicktype\nSlack\nTwitter\nScreenBrush\nXcode\n\n방법 §\n\nHomeBrew를 다운로드 한다.\n\n# 설치확인 명령어\nbrew doctor\n# Homebrew 설치 명령어\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;\n\ncask, mas 설치한다.\n\n\ncask: 웹사이트에서 받을 수 있는 어플리케이션 설치를 도와주는 라이브러리\nmas: 앱스토어에서 받을 수 있는 어플리케이션 설치를 도와주는 라이브러리\n\nbrew install cask\nbrew install mas\n\nbrewfile을 만든다.\n\ntouch Brewfile\n\n설치하고 싶은 패키지가 brew에 있는지 확인한다.\n\n\nbrew 패키지 리스트\n\n만약 기본 저장소에 있다면 Formulae에 있다고 뜨고, 웹 저장소가 연결되어 있다면 casks에 있다고 뜬다.\n이 차이를 기반으로 Brewfile을 작성해주면 된다.\n혹은 터미널 창에서 brew search를 통해서 찾는 방법도 있다.\n\n만약 없다면 앱스토어에서 찾아본다.\n\nmas 패키지는 앱스토어와 연결해서 여러 명령을 처리할 수 있는 라이브러리이다. 아래의 다양한 명령어 중에서 search를 사용해서 찾으면 된다. 이 때, id까지 명시해서 brewfile에 작성한다.\n∙ mas account : 맥 앱스토어에서 로그인된 애플 ID를 출력합니다.\n∙ mas help : 도움말을 볼 수 있습니다.\n∙ mas install : 맥 앱스토어에서 배포중이거나 배포한 적이 있는 앱을 내려받을 수 있습니다.\n∙ mas list : 맥 앱스토어를 통해 설치한 앱을 목록으로 보여줍니다.\n∙ mas outdated : 다운로드가 중단되거나 실패한 앱을 내려받을 수 있습니다.\n∙ mas search : 맥 앱스토어에서 앱을 검색합니다. App Bundle Id를 찾을 수 있습니다.\n∙ mas signin/signout : 맥 앱스토어에서 로그인/로그아웃합니다.\n∙ mas upgrade : 맥 앱스토어 업데이트 기능을 수행합니다.\n∙ mas version : mas-cli 버전을 확인합니다.\n\n완성된 brewfile은 다음과 같다.\n\ntap &quot;homebrew/core&quot;\ntap &quot;homebrew/cask&quot;\ntap &quot;homebrew/cask-fonts&quot;\ntap &quot;homebrew/bundle&quot;\n \n# brew install\nbrew &quot;bat&quot;\nbrew &quot;fasd&quot;\nbrew &quot;fzf&quot;\nbrew &quot;git&quot;\nbrew &quot;git-lfs&quot;\nbrew &quot;mas&quot;\nbrew &quot;neofetch&quot;\nbrew &quot;neovim&quot;\nbrew &quot;tig&quot;\nbrew &quot;zsh&quot;\nbrew &quot;mas&quot;\nbrew &quot;wget&quot;\nbrew &quot;python3&quot;\n \n# brew install app\nbrew install quicktype\n \n# cask install\ncask &quot;alfred&quot;\ncask &quot;appcleaner&quot;\ncask &quot;gitkraken&quot;\ncask &quot;hammerspoon&quot;\ncask &quot;iterm2&quot;\ncask &quot;notion&quot;\ncask &quot;slack&quot;\ncask &quot;telegram&quot;\ncask &quot;visual-studio-code&quot;\ncask &quot;zoom&quot;\ncask &quot;keka&quot;\ncask &quot;monitorcontrol&quot;\ncask &quot;camo-studio&quot;\ncask &quot;dash&quot;\ncask &quot;figma&quot;\ncask &quot;google-chrome&quot;\ncask &quot;postman&quot;\ncask &quot;karabiner-elements&quot;\ncask &quot;charles&quot;\ncask &quot;mattermost&quot;\ncask &quot;zeplin&quot;\ncask &quot;telegram&quot;\n \n# Mac App\nmas &quot;Accelerate for Safari&quot;, id: 1459809092\nmas &quot;BetterJSON for Safari&quot;, id: 1511935951\nmas &quot;ColorSlurp&quot;, id: 1287239339\nmas &quot;Dark Reader for Safari&quot;, id: 1438243180\nmas &quot;Enpass - Password Manager&quot;, id: 732710998\nmas &quot;Gifski&quot;, id: 1351639930\nmas &quot;KakaoTalk&quot;, id: 869223134\nmas &quot;Keynote&quot;, id: 409183694\nmas &quot;Magnet&quot;, id: 441258766\nmas &quot;Microsoft Excel&quot;, id: 462058435\nmas &quot;Microsoft PowerPoint&quot;, id: 462062816\nmas &quot;Microsoft Word&quot;, id: 462054704\nmas &quot;Movist&quot;, id: 461788075\nmas &quot;SnippetsLab&quot;, id: 1006087419\nmas &quot;Spark – Email App by Readdle&quot;, id: 1176895641\nmas &quot;Unicorn Blocker&quot;, id: 1231935892\nmas &quot;Yoink&quot;, id: 457622435\nmas &quot;Unicorn HTTPS&quot;, id: 1475628500\nmas &quot;Paste JSON as Code • quicktype&quot;, id: 1330801220\nmas &quot;Slack for Desktop&quot;, id: 803453959\nmas &quot;Twitter&quot;, id: 1482454543\nmas &quot;ScreenBrush&quot;, id: 1233965871\nmas &quot;Xcode&quot;, id: 497799835\n \n\n해당 파일을 실행시킨다.\n\nbrew bundle --file=./Brewfile\n혹은, 추가 설정이 필요하다면 셀 스크립트를 만들고 이를 실행시키는 방법도 있다. 브랜디 랩스의 기술 블로그를 참고했다.\n#!/usr/bin/env bash\n \n# Homebrew 설치 여부 확인\nif ! which brew\nthen\n    /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\nfi\n \n# 스크립트 내에서 일부 sudo 권한이 필요한 명령을 수행하기 위해 root 패스워드를 입력\n# sudo 권한이 필요한 이유 : cask로 설치한 애플리케이션을 바로 실행하기 위해 다운로드 된 파일에 대한 격리 속성 제거 작업\nread -r -s -p &quot;[sudo] sudo password for $(whoami):&quot; pass\n \n# BrewFile 실행 명령어\nbrew bundle\n \n# 설치 성공 완료 메세지 노출\nprintf &#039;\\n install success! \\n&#039;\n\n셀 스크립트의 실행 권한을 주자\n\nchmod +x ./install.sh\n\n실행하자.\n\nsh install.sh\ninstall.sh에는 개인적으로 세팅한 것들이 있다. 예를 들어 python 2.18 버전을 가상환경을 통해 설치하는 것이 대표적인 예가 될 수 있겠다. 해당 버전을 설치하게 된 이유는 이 글을 참고해주면 고맙겠다. 좀 맘에 안든다면, 해당 python 2버전을 설치하는 부분만 지워주면 되겠다.\n현재 상태를 저장하고 싶다면 §\nbrew bundle dump\nbundle이라는 기능을 통해서 현재 내 맥에 설치되어 있는 앱들을 Brewfile로 저장하거나 생성하는 것이 가능하다.\n추가 - 동영상 녹화 방법 §\n\nhttps://www.youtube.com/watch?v=0Ce0HEwpC48&amp;t=65s\n내부 소리까지 녹화 가능하다.\n\n참고 §\n\n\nDevelopEnvSettingForMac\n\n\nHomebrew와 Shell Script를 사용하여 맥(Mac) 개발 환경 구축 자동화하기\n\n\nHomebrew로 Mac 개발 환경 세팅 자동화\n\n"},"Knowledges/Productivity/Hugo":{"title":"Hugo","links":["Go","Knowledges/Productivity/Static-site-generator"],"tags":["go"],"content":"\nGo를 기반으로 한 Static site generator\n빠르다.\n유연함을 강조하여 다양한 플랫폼에서 쉽게 사용가능하다.\n\nReference §\n\nHugo\n"},"Knowledges/Productivity/Open-multiple-Application-instances":{"title":"Open multiple Application instances","links":[],"tags":["window","application"],"content":"iOS 개발자로서 제플린이나 피그마 창을 하나만 띄워서 보는건 너무 귀찮다. 여러개 띄울수는 없을까?\n해결 방법 §\nopen -na /Applications/Zeplin.app\n\nopen -na /Applications/Figma.app\n\n모든 프로그램이 되는 것은 아니다.\n안전성을 요하는 클라우드 서비스와 같은 동기화 프로그램은 해당 방법을 피하자.\n"},"Knowledges/Productivity/Productivity":{"title":"Productivity","links":["Knowledges/Productivity/Quartz-Publishing","Knowledges/Productivity/Xcode-Shortcuts","Knowledges/Productivity/Environment-Setting-Automation","Knowledges/Productivity/Alfred-Workflow","Knowledges/Productivity/Open-multiple-Application-instances","Knowledges/Productivity/Alfred-workflow-not-working","Knowledges/Productivity/Hugo","Knowledges/Productivity/Static-site-generator"],"tags":[],"content":"Obsidian §\n\nQuartz Publishing\n\nXcode §\n\nXcode Shortcuts\n\nMac §\n\nEnvironment Setting Automation\nAlfred Workflow\nOpen multiple Application instances\n\nTrouble Shooting §\n\nAlfred workflow not working\n\nETC §\n\nHugo\nStatic site generator\n"},"Knowledges/Productivity/Quartz-Publishing":{"title":"Quartz Publishing","links":["Quartz","Knowledges/Productivity/Static-site-generator"],"tags":["obsidian","publishing"],"content":"동기 §\n\n다른 블로그 호스팅 서비스(Tistory, Velog)를 사용하면, 내가 온전히 관리하지 못한다는 측면에서 아쉬움이 있었다.\nGithub Page를 Jekyll을 사용해 포스팅해보았지만, 1000개가 넘어가는 시점부터 너무 느려 사용하기가 꺼려졌다.\n그 와중에 Obsidian을 알게 되었다.\nObsidian은 내 로컬에 Markdown 형식으로 저장되면서 확장성이 높은 문서 관리 도구이다.\n이에 블로그 전체를 Obsidian으로 옮기면서 나의 모든 것을 관리해보자는 목표를 세웠다.\n\n필요 기능 §\n\n문서의 Export 여부에 따라 올리거나, 그렇지 않거나 할 수 있어야 한다.\nUI가 깔끔해야 한다.\nObsidian의 기능 자체를 어느정도 반영할 수 있어야 한다.\n웹페이지에 올라간 이후 속도가 빨라야 한다.\n모바일 대응이 되어야 한다.\n\n도구 §\n\nQuartz\n\nObsidian Markdown을 지원하는 Static site generator이다.\n\n\nobsidian-export\n\nObsidian안에 폴더 공개 여부를 설정해두고, 이를 바깥으로 내보낼 수 있는 도구이다.\n\n\n\n개요 §\nflowchart LR\nA[Obsidian] --&gt; B;\nB{obsidien-export \\n Publishing할 내용인가?} --&gt; |Yes 복사 O| C;\nB --&gt; |No 복사 X| D;\nC[Quartz] --&gt; |push| E;\nD[현상 유지];\nE[Github repo \\n forked Quartz] --&gt; |Github Action| F;\nF[HTML \\n using Hugo] --&gt; G;\nG[Github Pages];\n\n\n\n\niCloud에 Obsidian Vault를 만든다.\nVault가 생성된 같은 폴더에 fork한 Quartz를 clone한다.\nObsidian으로 글을 작성한다.\n특정 시점에 Quartz에서 sync 메서드를 통해 Publish 저장소와 동기화하여 글을 출간한다.\n\n이 때, 원하는 글만 추출한다. (obsidian-export)\n\n\n\n방법 §\nDomain §\n구매 §\n\n나같은 경우, 사용하고 있는 github.io는 건들고 싶지 않았다.\n새로 도메인을 파보고 싶기도 해서, 구매를 진행했다.\n구매는 쉽다. 다양한 도메인 사이트에 가서 사고싶은걸 일단 구매하자.\n1년 단위로 이벤트를 하여 당장은 1년짜리를 구매했다.\n가비아에서 진행했다.\n\n설정 §\n\n\nManaging a custom domain for your GitHub Pages site\n\n\n위를 보면, Domain의 권장하는 DNS세팅이 있다.\n\n\n\n이렇게 세팅해주고, Page Repo의 설정 &gt; Pages에 가서 등록된 도메인을 지우고 다시 설정해주자.\n\n\nHTTPS 적용 §\n\nhttps://blog.gaerae.com/2018/05/github-pages-custom-domains-https.html\n위처럼 등록하면 다른 방법이 필요없이 기본지원한다.\n\nQuarts 설정 §\n\nQuarts는 Markdown을 가지고 HTML 형식으로 변환해주는 녀석이다.\nQuarts를 통과한 결과물을 github pages로 넘겨줄 것이다.\n이를 담을 폴더를 만들고, github repo를 remote로 설정해주자. 폴더 이름은 Publish로 한다.\n\ngit init\ngit remote add origin &quot;https://github.com/wansook0316/Wansook.World&quot; \nobsidian-export §\n\nrust 설치\ncargo install obsidian-export\n환경 변수 등록\n.zshrc &gt; export PATH:$PATH:$HOME/.cargo/bin 추가.\nrust 관련 라이브러리가 설치되는 경로를 환경변수에 추가하여 CLI로 바로 실행할 수 있도록 한 것.\nsource ~/.zshrc를 통해 영구적용하자.\n\nSugar script §\n\nobsidian을 iCloud에 놓고 쓰다보니, Cloud/.obsidian에 위치 시켜놓아야 여러개의 애플 디바이스에서 사용할 수 있다.\n그렇기에 Quartz 에서 요구하는대로 content폴더에 Obsidian을 놓고 작업할 수가 없다.\n\n그러면 Obsidian iOS 앱에서 접근을 못한다.\n\n\n그래서 위에서 설치한 obsidian-export을 통해, obsidian에서 내가 원하는 항목만 추출하여 content로 복사하려는 것이다.\n이에 local server를 띄우고, sync 동작하는 스크립트 두개를 작성했다.\n\nserve.sh §\n#!/bin/bash\n \ncontent_name=&quot;content&quot;\n \nvault_name=&quot;World&quot;\n \necho &quot;==== 모든 $content_name folder의 내용을 지웁니다. ====&quot;\nrm -r &quot;./$content_name&quot;/*\n \necho &quot;==== $vault_name 의 vault에서 publishing을 원하는 항목만 $content_name folder로 옮깁니다. ====&quot;\nobsidian-export &quot;../$vault_name&quot; &quot;./$content_name&quot;\n \n \necho &quot;==== $content_name 으로 이동한 항목을 로컬 서버에 띄웁니다. ====&quot;\nnpx quartz build --serve\nsync.sh §\n#!/bin/bash\n \ncontent_name=&quot;content&quot;\nvault_name=&quot;World&quot;\n \necho &quot;\\n ==== 모든 $content_name folder의 내용을 지웁니다. ====&quot;\nrm -r &quot;./$content_name&quot;/*\n \necho &quot;==== $vault_name 의 vault에서 publishing을 원하는 항목만 $content_name folder로 옮깁니다. ====&quot;\nobsidian-export &quot;../$vault_name&quot; &quot;./$content_name&quot;\n \necho &quot;==== $content_name 으로 이동한 항목을 배포합니다. ====&quot;\nnpx quartz sync\nReference §\n\nquartz\nobsidian-export\n"},"Knowledges/Productivity/Static-site-generator":{"title":"Static site generator","links":["Knowledges/Productivity/Hugo"],"tags":[],"content":"\nMarkdown과 같은 text input을 받아 정적 페이지, 즉 HTML로 변환해주는 엔진을 말한다.\n백엔드 서버가 필요없다.\nJekyll, Hugo, Next.js 등이 있다.\n\nReference §\n\nStatic site generator\n"},"Knowledges/Productivity/Xcode-Shortcuts":{"title":"Xcode Shortcuts","links":[],"tags":["xcode","shortcuts"],"content":"조금이라도 더 빠르게 Project file을 와리가리 하고 싶은 마음에 사용하는 단축키를 정리해본다. 언젠가는 까먹으니, 그때와서 봐야지. 이건 계속해서 업데이트하도록 하겠다.\nShortcuts §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptionActionShortcutnoteXcodePreference⌘,Filenew &gt; Project⇧⌘Nnew &gt; Playground⌥⇧⌘NAdd Files⌥⌘AViewShow/Hide Navigator⌘0Move Navigator Menu⌘1~9Show/Hide Inspector⌘⌥0Move Inspector Menu⌘⌥1~4Reveal in Project Navigator⇧⌘J파일 위치 파악Reveal in Project Navigator⇧⌘O파일 바로 열기(in code) Show Snippets⇧⌘L코드 창에서 Snippet 보여줌(in storyboard) Show Library⇧⌘LUIKit Library 보여줌FindFind in workspace⇧⌘FFind Selected Symbol in workspace⌃⇧⌘F해당 변수를 사용하고 있는 찾아줌 (text가 아닌 symbol)Find Call Hierachy⌃⇧⌘H해당 함수의 호출 계층을 보여줌Find⌘FFind and Replace⌥⌘FFind Next⌘GFind Previous⇧⌘GFind and Select Next⌥⌘GFind and Select Previous⌥⇧⌘GUse Selection for Find⌘Enavigator find 메뉴에 문자열 넣을 때 많이 씀Use Selection For Replace⇧⌘E선택 부분 한번에 바꾸기FoldingFold⌥⌘⇠Unfold⌥⌘⇢Fold Methods &amp; Functions⌥⇧⌘⇠특정 상위 스코프 안에 있는 method 모두 foldingUnfold Methods &amp; Functions⌥⇧⌘⇢Fold Comment Blocks⌃⇧⌘⇠Unfold Comment Blocks⌃⇧⌘⇢Build, ExecutionBuild⌘BClean build folder⇧⌘KTest⌘UInfomationShow History⇧⌘⌃ASimulatorScreen Shot⌘SRecord⌘R중단 후, 우측 하단에 나오는 영상에서 오른쪽 탭하면 gif 변환하여 저장 가능Keyboard⌘KRotate⌘⬅To Home⌘⇧HShake⌘⌃ZMoveMove line up⌥⌘[Move line down⌥⌘]Back⌃⌘⇠뒤로 가기Forward⌃⌘⇢앞으로 가기CursorMulti cursor⌥ + dragSublime text에서 ⌥⇧ + dragMake cursor⇧⌃ + clickSublime text에서 ⌥  + clickSelect Next Occurrence⌥⌘ESublime text에서 ⌘DSortingRe-indent⌃I코드 정렬해줌, 나는 키 매핑이 되어 있어 ⌥P로 설정함LogClean Debug window⌘K디버그 창 모두 지우기DebugConsole On/Off⌘⇧Y디버그 창 올리기/내리기Debug On/Off⌘Y디버그 기능 On/OffNext breakpoint⌘⌃Y다음 브레이크 포인트 넘어가기NewNew Editor⌘⌃T새로운 editor 생성open current symbol in New editor⌘⌃⌥ + Click새 에디터에서 함수, 변수 보기EditEdit all scope⌘⌃E지정 파일 한정 리네이밍Source ControlCommit⌘⌥C커밋창 띄우기\n가끔가다가 vsc 기본설정으로 익힌 단축키들이 있는데, 여기도 있다. Preference -&gt; Key Bindings -&gt; Customize 하면 된다.\n\nExtra §\nExtract Method §\n\n\n선택, 우클릭, Refactor-Extract to method\n\nReference §\n\nMenu Command Shortcuts (By Menu)\n\nUpdate Log §\n\n22.04.22: initial draft\n22.04.23: Move line, snippet 추가\n22.04.26: Simulator Record 추가\n22.05.11: Re-indent 추가\n22.05.13: 뒤로가기, 앞으로 가기, 디버그 창 지우기 추가\n22.05.16: 콘솔창 내리기/올리기, 디버그 on/off, next breakpoint\n22.06.09: 에디터 창 새로 만들기 추가\n23.06.27: 지정 파일 한정 리네이밍, extract method, test, commit\n"},"Logs/Daily/2023-09-18":{"title":"2023-09-18","links":[],"tags":["logging"],"content":"Goals §\n\n 대중교통 헤더 푸터 데이터 넣기\n 등 운동\n 시리즈 세개 옮기기\n 머리정리\n 태그 달기 (Apple)\n\nPlan §\n\n아침에 하나 옮기기\n점심 먹고 하나 옮기기\n퇴근 전에 하나 옮기기\n"},"Logs/Daily/2023-09-19":{"title":"2023-09-19","links":[],"tags":["logging"],"content":"Goals §\n\n 동기화 확인 (비트코인 문서들어왔는지)\n sync\n 가슴운동\n step 데이터 넣기\n\nPlan §\n\n오전에 블로그 살짝 정리\n점심 출근하여 스텝 처리 (뷰모델 관련 논의)\n저녁시간에 블로그 데이터 넣기\n"},"Logs/Daily/2023-09-20":{"title":"2023-09-20","links":[],"tags":["logging"],"content":"Goals §\n\n 구조 브리핑\n 기본 구조 만들기\n\nPlan §\n\n오전에 빨리가서 해두기\n"},"Logs/Daily/2023-09-21":{"title":"2023-09-21","links":[],"tags":["logging"],"content":"Goals §\n\n 버스 리프레시 이슈\n 실시간 / 길안내 업데이트 방식 고민\n 오버레이 핸들러 방식 질문\n 운동\n 모나드 쪽 latax 에러나는듯\n\nPlan §\n\n오전에는 블로그\n오후에 질문 및 작업 시작\n"},"Logs/Daily/2023-09-22":{"title":"2023-09-22","links":[],"tags":["logging"],"content":"Goals §\n\n 헤더쪽 뷰모델 정리\n 헤더 데이터 업데이트 칠 수 있게 변경\n 임씨 노트 만들 수 있는 커맨드 만들기\n https://youtu.be/m6eJ6BpWQck?si=6H4BDDGieCjCXV8W\n 무조건 비트코인 관해서 무언갈해야함\n https://quickadd.obsidian.guide/docs/AIAssistant\n 완벽하게 내가 원하던 것 찾았다. 이걸로 요약하는 기능 만들어야 한다.\n 헬스장 연장\n 적성검사 등록\n 국제면허\n\nPlan §\n\n아침에 일단 글좀 옮기자.\n오후에는 일하고.\n국제면허, 연장은 내일 사진찍고 한번에 해버리자.\n"},"Logs/Daily/2023-09-26":{"title":"2023-09-26","links":[],"tags":["logging"],"content":"Goals §\n\n https://youtu.be/m6eJ6BpWQck?si=6H4BDDGieCjCXV8W\n 무조건 비트코인 관해서 무언갈해야함\n https://quickadd.obsidian.guide/docs/AIAssistant\n 완벽하게 내가 원하던 것 찾았다. 이걸로 요약하는 기능 만들어야 한다.\n \b디자인 패턴 글 옮기기\n 명석님과 숏컷 관련해서 이야기하기\n 숏컷 붙이기\n 운동\n\nPlan §\n\n오전에 블로그 옮기기\n오후 출근해서 할일 다 처리하기\n"},"Logs/Daily/2023-09-28":{"title":"2023-09-28","links":[],"tags":["logging"],"content":"Goals §\n\n 전부치기\n 옵시디언 글 옮기기\n 트위터준비\n\nPlan §\n\n오후 4시부터 작업시작?\n"},"Logs/Daily/2023-09-29":{"title":"2023-09-29","links":[],"tags":["logging"],"content":"Goals §\n\n 옵시디언 글 전부 옮기기\n 경배 만나기?\n"},"Logs/Daily/2023-10-03":{"title":"2023-10-03","links":[],"tags":["logging"],"content":"Goals §\n\n \bC 옮기기\n Cpp 옮기기\n 수학쪽 옮기기\n\nPlan §\n\n이런 방식으로 처리하자.\n\ntodo §\n\nPWA 적용\nmatrix가 깨지고 있음 이유가 뭘까\nbitcoin 쪽도 깨짐\n"},"Logs/Daily/2023-10-04":{"title":"2023-10-04","links":[],"tags":["logging"],"content":"Goals §\n\n 다 옮기기!!!!!!\n PWA\n latex 오류잡기\n 내일 회사일만 열심히!\n\nPlan §\n\n이런 방식으로 처리하자.\n"},"Logs/Daily/2023-10-06":{"title":"2023-10-06","links":[],"tags":["logging"],"content":"Goals §\n\n 𝕏계획\n 워케이션 이주차에쓰기\n 유튜브계획\n 운동\n 업무 (pr, 손에닿는거계속처리)\n PWA\nhttps://medium.com/@dassudipto200/how-to-convert-your-github-pages-to-pwa-cf3f0ee39ba4\n\nPlan §\n\n이런 방식으로 처리하자.\n"},"Logs/Daily/Daily":{"title":"Daily","links":["Logs/Daily/2023-09-18","Logs/Daily/2023-09-19","Logs/Daily/2023-09-21","Logs/Daily/2023-09-22","Logs/Daily/2023-09-26","Logs/Daily/2023-09-28","Logs/Daily/2023-09-29"],"tags":[],"content":"2023 §\n\n2023-09-18\n2023-09-19\n2023-09-21\n2023-09-22\n2023-09-26\n2023-09-28\n2023-09-29\n"},"Logs/Logs-2":{"title":"Logs","links":["Logs/Daily/Daily","Logs/Monthly/Monthly"],"tags":[],"content":"\nDaily\nMonthly\n"},"Logs/Logs":{"title":"Logs","links":["Logs/Daily/Daily","Logs/Monthly/Monthly"],"tags":[],"content":"\nDaily\nMonthly\n"},"Logs/Monthly/2022-03":{"title":"2022-03","links":[],"tags":["logging"],"content":"Good §\n\n1월 부터 목표로 한 근력운동 루틴을 잘 지키고 있다. 이제 33개월 남았다.\n아침에 일어나는 습관(6-7시 기상)을 잘 들이고 있다.\n일찍 자는 습관(22-23시)을 잘 들이고 있다.\n식단을 잘 챙겨먹고 있다.\n약을 잘 챙겨먹고 있다.\n꾸준한 블로깅을 이어가고 있다.\n회사 생활 패턴을 이해했다.\n투자 원칙을 지키고 있다.\n사내 스터디에 들어갔다.\n\nBad §\n\nWiki의 내용을 아직 다 못읽어보았다.\nCarplay, Xcode Project, 일하는 방식에 대한 이해가 부족하다.\n어떤 팀이 있고, 어떻게 협력하고 누가 담당자인지에 대한 이해가 부족하다.\n꾸준히 공부하고 있으나, 공부할 내용이 너무 많다. 지칠까봐 겁난다.\n투자 관련 공부가 좀 미흡하다. 아무래도 처음하는 것이다보니 용어가 체화가 안되는 듯하다.\n하루 시간이 부족하다..\n\nLearns §\n\nProperty에는 값을 한번만 할당하는 습관을 가진다.\nHigh Order function을 사용할 때는 내부에 “순수 함수”를 넣는 방향으로 설계한다. (self 프로퍼티에 값을 할당하지 않는다.)\n\nCommitment §\n\n4월에는 Wiki 내용을 한번은 읽는다.\n어떤 팀이 있고, 우리 팀이 어떤 위치인지, 어떻게 협력해야 하는지 계속 이해하려 애쓴다.\n아침 시간에 글쓰고, 그 이후에는 신경쓰지 않는다. 하루에 한 개 쓰면 진짜 잘한거다.\n생활 패턴은 아주 맘에 든다. 계속 고수하자.\n투자는 바로 글 쓸 실력이 안된다. 그러니 유튜브를 기반으로 모르는 단어에 대해 많이 접해서 당연한 개념으로 받아들여지도록 연습한다.\n투자 원칙을 잘 지키는 것 칭찬한다. 멘탈이 전부다.\n사내 스터디 내용은 발표할 내용 이외에도 내가 먼저 이해하고 들어가자. 그리고 모두 남기자.\n"},"Logs/Monthly/2022-04":{"title":"2022-04","links":[],"tags":["logging"],"content":"Good §\n\n운동을 꾸준히 했다. 몸이 점점 커진다.. 무섭다.\n블로그 글을 그래도 한 20개 정도는 쓴 것 같다.\n트위터 계정을 만들었다.\n결국 셋업을 구매했다. 저렴하게 구매해서 좋다.\n하락장에 용기내어 주식 매수했다.\n좋은 생활 패턴을 가지고 있다. 6시 기상, 12시 취침, 05:45분 장외 매수\n트위터로 좋은 투자정보들을 계속해서 접하고 있다.\n리팩토링을 계속하다보니, 어떤 것을 우선적으로 해야하는지 조금은 깨달은 것 같다.\n구획 정리\naccess control 적용\nconvention 적용\nexplicit optional 적용\n단일 동작을 하는 작은 함수로 분리: 상태값을 가져다가 사용하면 안된다. 순수함수로 분리\n로직의 성격에 따라 파일에 따라 분리\n최대한 상태값을 제거하여 추후 코드를 읽기 편하게 만든다.\n이름의 경우에는 동사, 목적어 순으로 적는다. 동작이 명확한 영어단어면 더 좋다.\n장이 안좋음에도 불구하고 멘탈관리를 잘했다.\n트위터 첫 트윗을 날려보았다.\n\nBad §\n\n일을 짧은 시간에 더 많이 치는 연습을 해야겠다.\n운동을 꾸준히 했으나, 체지방이 껴서 굉장히 부해보인다. 많이 슬프다.\n블로그 글을 더 못쓰는 것 같다.\n일요일에는 작업을 못했다.\n트위터 계정은 만들었으나 어떤식으로 트윗을 해야할 지 고민중이다.\n팀원들에게 내가 작성한 글을 공유하라고 하셨었는데 부끄러워서 실천하지 못했다..\n아무래도 투자글은 현업이 바빠서 작성하기 어려울 듯하다. 트위터에 내가 작성한 기술글을 트윗하고, 가끔 느끼는 바에 대해서 적거나 리트윗하는 것으로 만족해야 할 듯 하다.\n올해 목표가 남에게 보여주어도 부끄럽지 않을 300개의 글을 블로그에 적는 것인데, 아직 100개가 되지 않아 가능할지 의문이다. 7개월, 200개의 글이면 산술적으로 약 하루에 1개의 글은 써야한다는 소리인데.. 미쳐 못적는 글은 일요일에 꼭 진행해야 겠다. 사이드 프로젝트는 아직 할 때가 아니다.\n\nLearns §\n\n연달은 PR의 경우, 그 앞의 branch에 base를 걸어두면 순차적으로 merge되는 경우 자동으로 develop으로 변경된다!\nself.tableView.estimatedRowHeight = 44, self.tableView.rowHeight = UITableView.automaticDimension 안해주면 self resizing 안된다.. 참고\nlet, var와 같이 간단해보이는 것도, 언어를 만들 때의 생각들이 들어가 있는 것이다. 언어의 역사를 살펴보고, 그 과정에서 어떻게 패러다임이 바뀌어 왔는지를 알아보고 내가 작성하는 코드하나를 바라볼 필요가 있다. 알고 쓰는 것과 모르고 쓰는 것은 차이가 매우 크다. 무지를 경계하자.\n리팩토링을 기계적으로 한다는 것이 무슨말일까? 이해가 되지 않는다.\n\nCommitment §\n\n다이어트를 좀 하긴 해야할 것 같다.\n운동은 이틀 혹은 3일에 한번해도 몸이 너무 쑤신다… 이대로 진행, 하지만 최대 이완, 집중 지키면서 하기\n5월에는 한번은 공유하는 것이 어떨까..?\n클린 코드 스터디를 하게 될 듯한데, 먼저 정리해서 가는 것이 좋을 듯하다. 나중에 책을 찾아보지 않고 블로그에서 찾아서 읽고 싶다.\n5월에는 글 30개 쓰기\n5월에는 팀원들에게 글 하나는 꼭 공유하기\n평일에는 고구마와 닭가슴살만 먹기\n7 to 7 지키기\n이번달 지출이 크니, 지출 줄이기\n실제 프로젝트 투입 이후, 영어 관련 서칭하기\n"},"Logs/Monthly/2022-05":{"title":"2022-05","links":[],"tags":["logging"],"content":"Good §\n\n아침 7시에 출근하고 7시 이후에 퇴근했다.\n투자글 역시 꾸준히 올렸다.\n클린 코드 먼저 읽고 정리를 꾸준히 했다.\n저녁 샐러드 먹기 시도했다.\n회사 모니터 설정, 키보드, 마우스, 트랙패드 구매했다.\n맥 스튜디오 구입했다.\n\nBad §\n\n자의적으로 frame 기반으로 요청주신 것을 autolayout으로 처리했다. 모르면 좀더 정확하게 물어보는 습관을 가지자. 왜 굳이 autolayout으로 하는지..? 한번만 더 물어보면 한번에 일할 수 있다.\n블로그 글을 더 많이 못썼다. 아무래도 글 하나 쓰는데 자료조사가 많아서 그런 듯하다.\n트위터에 글을 많이 공유하지 못했다. 아침에 조금 귀찮더라도 올리는 습관을 가지자.\n저녁에 더 자주 샐러드를 먹지 못했다.\n옷을 사는데 자꾸 잘못된 사이즈를 산다. 왜지?\n키보드 싸게 사겠다고 중고로 샀다가 키보드가 3개가 되었다. 그냥 처음부터 회사에서 새걸로 살걸. 때로는 새거사는게 좋을 수도 있다.\n\nLearns §\n\n강제 크래시내고 싶은 경우: indexOutOfRange, divisionByZero\nAutolayout이 무조건 적으로 좋은 것은 아니다. computed cost가 들어가기 때문에 frame기반으로 처리하는 것이 더 좋을 수 있다.\nClean code를 보면서 인수 관련해서 인수가 적을 수록 좋다했는데, 함수형 프로그래밍과 약간은 상충되는 내용이 있는 것 같아 질문했다. 내 생각대로 상태값을 최대한 없애는 방식으로 가는 것이 테스트나 유지보수에 있어 보다 좋다는 결론이 났다. 인수가 여러개라면 따로 struct를 만든다던지, 함수를 쪼개서 처리하는 방식을 만드는 것이 보다 좋겠다.\nException의 경우 case로 나누지말고 subclassing을 통해 처리하자.\nfactory로 다형성을 관리할 수 있다.\naddSubview시 [view1, view2].forEach { self.view.addSubview($0)와 같은 방식으로 처리할 수도 있다.\n\nprivate extension UIButton {\n \n    func update(isSelected: Bool) {\n        self.titleLabel?.text.map {\n            let textColor = isSelected ? UIColor(rgb: 0x0abe16) : UIColor(rgb: 0x6b707a)\n            self.setAttributedTitle($0 + TextStyle.body13(weight: .bold).foregroundColor(textColor).center, for: .normal)\n        }\n \n        self.titleLabel?.attributedText.map {\n            let margin: CGFloat = 12.0\n            self.frame.size.width = $0.size().width + margin * 2\n        }\n    }\n}\n \n\n이렇게 map을 사용해서 optional을 벗겨내고 내가 원하는 작업을 하는 방법도 있다.\nextension 사용 방식\n\n크기에 따라서? (UIViewController+Delegate.swift)\n아예 의미론적으로 다른 위치에 두는 경우 (Model -&gt; View Structure), fileprivate\n진짜 extension의 의미를 가지는 경우 (본 의미보다는 아류느낌)\n\n\n\ninternal var openedPublisher: AnyPublisher&lt;InfoPublisher, Never&gt; {\n    self.publisher\n        .compactMap { $0?.toDisplay(self.stationData) }\n        .eraseToAnyPublisher()\n}\n \nprivate let publisher = PassthroughSubject&lt;RealtimeAPI.Subways.Station?, Never&gt;()\n \nfunc someFunction() {\n    self?.publisher.send(result)\n}\n\n이런식으로 밖으로 내주는 publisher와 안에서 처리하는 publisher를 분리하여 관리할 수 있다.\n\nCommitment §\n\n다음달에는 허먼밀러 의자를 살 것 같아 금전적으로 준비할 필요가 있다.\n이번달 지출이 많았다. 바지, 티 등을 구매했다. 다음달은 줄여야 한다.\n7-19는 지키는 습관으로 가져간다.\n아침에는 기술 글을 쓰는 습관을 가지자. 클린 코드는 주말에 하자.\n유튜브 말고 책을 읽는 습관을 가지자. 확실히 읽어보니 책이 정보습득 속도 측면에서 보다 빠르고, 상상하게 되어 더 재미있는 듯 하다.\n평일에 모든걸 쏟아붓고 주말에 운동하자. 주말에는 꼭해야 한다. 생존 운동이다.\n내가 나를 있는 그대로 봐주길 바라듯, 남도 그렇게 보자. 항상 그럴 수 있다는 생각을 가지고 살자.\n내 속마음을 그대로 내비치면 안된다. 인생을 크고 넓게 보자.\n"},"Logs/Monthly/2022-06":{"title":"2022-06","links":[],"tags":["logging"],"content":"Good §\n\n음, 생각보다 없다.\n돈아끼는 방법을 하나 추가적으로 알았다.\n브런치 글을 꾸준히 쓰고있다.\n\nBad §\n\n운동을 못했다.\n허리가 아프다.\n약간 무기력증이 도지는 느낌이다. 코드를 많이 안짜서 그런 듯 하다.\n최근에 잠을 잘 못잤던게 월말에 밀려왔다. 새벽에 일어나는 걸 못했다.\n\nLearns §\n\nReActive 방식은 다음과 같이 사용한다.\n\n실제 바깥에서 사용할 Publisher를 internal으로 만든다\n\n이과정에서 protocol을 채택하여 만들 수도 있다.\n\n\n실제 내부에서는 private으로 publisher를 하나 만들어서 그녀석으로 지지고 볶는다.\n\n이 과정에서 외부 publisher를 받아 compactmap, flatmap으로 변형하여 바깥에서 사용할 publisher로 만들어버릴 수도 있다.\n이 때 보통 computed property를 통해 적용한다.\n\n\n바깥에서 사용할 친구의 type은 AnyPublisher로 감춘다.\n\n\nmethod 추출역시 refactoring이다.\nView에서 작업을 처리하고 다시 비즈니스 로직을 처리해야 한다면 completion handler를 활용하자.\n\n \n// In ViewController\nfunc announce(winner: PlayerType?, withCompletionHandler handler: @escaping () -&gt; ()) {\n    let alert = UIAlertController(title: winnerString, message: nil, preferredStyle: .alert)\n    let closeAction = UIAlertAction(title: &quot;Close Game&quot;, style: UIAlertActionStyle.default) { _ in\n        handler()\n    }\n    alert.addAction(closeAction)\n    present(alert, animated: true, completion: nil)\n}\n \n// In ViewModel\nviewController.announce(winner: endGame.winner) {\n    self.listener?.ticTacToeDidEnd(with: endGame.winner)\n}\n \n\n뭔가 너무 커서 나중에 수정해야 하는데 기능을 추가해야 하는 경우 protocol을 만들어놓고 extension에 적용하여 구현해놓으면 완전 구분되어서 나중에 분리하기 편함, 가독성도 좋아진다.\n기술적인 이야기를 공유할 때는 그사람 입장에서 생각하고 말한다.\n\n전반적인 문제에 대해 쉽게 말하고, 핵심적인 문제에 대해서 이해할 수 있도록 말한다.\n세부 사항의 경우 질문을 받거나, 후반부에 말하기\n그리고 가장 중요한 용어에 대해 정확하게 정의하고 이야기해야 논의가 가능해진다.\n\n\n이슈 수정을 할 때, 당장 문제를 해결하는 방향을 넘어서 조금더 깊이 뜯어보는 습관이 필요할 듯하다.\n\n해당 부분을 볼 때, 다른 사람이 이 부분을 다시 볼 수 없을 수도 있기 때문이다.\n그리고 다시 본다고 해도 나만큼의 리소스를 들여 보기 때문에, 장기적 관점에서 보았을 때 해당 이슈를 이해한 시점에 조금이라도 코드를 낫게 만들고 떠나는 것이 좋은 동료가 되는 길이다.\n내 판단에 조금더 확신을 갖고, 모르는 경우 질문하는 것을 두려워하지 말자.\n\n\n\nCommitment §\n\n운동은 진짜 해야한다..\n다시 새벽에 일어나서 운동하고 출근하는 일상을 되찾는다.\n규칙적인 식습관을 가진다.\n"},"Logs/Monthly/2022-07":{"title":"2022-07","links":[],"tags":["logging"],"content":"Good §\n\n크게 없다.\n\nBad §\n\n에너지 레벨이 떨어졌다.\n체력이 문제인가?\n더 간절한 것이 없어졌을 지도 모른다.\n\nLearns §\n\ncode smell!: fileprivate로 선언했던걸 internal로 변경하게 되는 순간\n\n그럼 점점 문제가 생김\nfileprivate으로 할 것 같으면 extension으로 하는 것보다 분리하는게 나을 수 있다.\nfileprivate 이라는 것은 해당 파일 내에서만 사용한다는 것을 내포하고 있다.\n그런데 이걸 internal로 바꾼다는 것은 다른 곳에서도 참조하겠다는 소리인데, 이는 뭔가 이상하다.\n다른 방법을 찾아야 한다.\n\n\nOptional(false) == false는 true다. optional wrapping이 되어 있어도 내부 값과 바깥값을 비교할 수 있다.\n\n굳이 벗겨서 비교하지 않아도 된다.\n\n\n바깥쪽에서 closure를 넣어서 동작을 분리하는 방법도 있다.\n\n외부에서 동작을 넣어서 처리해야 하는 경우 활용할 수 있다.\n예를 들어 contextMenu가 있겠다.\n\n\nSwift swizzing crash log남길 때 사용.\n\n앱이 죽을 떄 먼저 로깅을 남기는 함수로 바꿔버리고 추후 동작을 하게 변경해서 사용한다.\n\n\nline 길이 (세로 300줄) lint같은 경우\n\n파일 분리\n생성을 담당하는 객체 생성 후 분리\nextension을 파일로 뺀 후 +기능이름.swift로 제작\n\nprivate이 internal로 변경될 수 있음(외부 파일에서 사용하니)\n\n\n\n\n\nCommitment §\n\n사내 위키를 찾아보는 습관을 들여야겠다. 질문전에 무조건 찾기. 이게 팀 생산성에 영향을 미친다.\n하지만 너무 많은 시간을 찾는 것은 오히려 생산성에 저해되는 방식이다. 일단 찾아보고 꼭 물어보자.\n현 상황에서 2개의 팀에서 우리팀이 주도하는 역할을 하기 위해서는 부끄럽더라도 내가 현재하고 있는 것들을 공유해야 한다.\n나보다 팀 전체의 생산성을 높혀 리딩할 수 있는 입장이 되려면, 개인적인 감정은 어느정도 덜어내야 한다.\n용기를 갖고 진행하자. 안 죽는다. 욕 한번 먹으면 된다.\n노력, 책임, 성장보다 재미라는 말을 기억하며 살자.\n재미있다면 시키지 않아도 할 것.\n누가 나를 키워준다는 생각을 하지 마라. 이건 항상 했던 생각이다. 인생은 혼자다.\n어설프게 아는 것이 제일 무섭다. 모르면 모른다하는 용기를 가지자.\n일단 legacy에 구현을 맞추는 것을 먼저한다. 일단 서비스가 나가는 것이 우선\n구현하기 전에, 기존에 어떻게 동작하는지 명확하게 안 상태에서 작업하자. 데이터 구조를 계속 바꾸게 된다.\n“승자 독식”이다. 허투루 쓸 시간이 없다.\n내 가치를 높여야 한다.\n외모, 실력, 판단, 통찰, 정치, 체력\n\n무엇때문에 못했다는 핑계 대지 말자.\n패배자로 살지말자.\n\n\n그러면서 다른 사람은 포용하자. 그 사람들의 부족한 면, 필요한 점이 있을 때 언제든 진심으로 도와주는 사람이 되자.\n단, 나에 대한 존경심이 없이 대하는 사람에게는 그에 상응하는 대가를 치르게 하자.\n내 판단에 어느정도 확신을 가지자.\n\n다만, 나보다 오랜 시간을 쏟고 그에 대한 신념이 있는 사람에게는 예외다.\n그렇지 않은 경우에는 내 판단이 보통 맞는 경우가 많은 것 같다.\n\n\n아쉬울 것 없는 사람이 되자. 내 시간은 금이다.\nWork Super Hard!\n"},"Logs/Monthly/2022-08":{"title":"2022-08","links":[],"tags":["logging"],"content":"Goals §\n\n 무엇을 목표했나요?\n\nGood §\n\n뭔가 어떻게든 끝내려 했다..?\n무언가 나만의 새로운 것을 하려는 시도를 하는 중이다.\n\nBad §\n\n문서를 조금더 꼼꼼히 보지 않았던 것: 질문으로 해결하자\n중간에 루틴이 깨진 것\n블로그 글을 많이 쓰지 못한 것\n\nLearns §\n\nRawType을 받아 ViewModel의 형태로 변경해야 한다고 하자.\nRawType extension에서 공통적으로 사용할 만한 것들을 처리해둔다 (var~)\nViewModel에서는 RawType을 받는 형태의 Protocol을 만들고, 기본 값들을 extension에서 처리해둔다.\n실제로 ViewModel에서는 해당 RawType을 받아 View에 연관된 세부로직만을 처리한다.\n내 문서에 실제 코드를 주석 처리 해두었다.\n먼저 추측하기\n\n이런 상황 마주치기 쉽지 않음\nApp 기동 -&gt; 즐겨찾기 sync -&gt; 데이터 5000개로 상향됨\n일단 데이터가 늘어나니 시간 더 걸릴 거다.\n\n네트워크 호출\n\n일단 데이터 크기 2배 넘어감\n2배 이상 증가할 것임\n2.5초 걸렸다가 5초 정도로 가지 않을까?\n근데 11초..? 메인은 아닐 수 있음\n\n\n파싱\n\njson 파싱\n얼마안 걸릴 것이라 예상하나 개수가 많으면?\n요즘은 디바이스가 좋아 크게 안걸릴 수도 있으나 10메가 10번보다 100메가 한번이 더 오래걸렸었음\n왜? 한번에 더 많은 CPU와 메모리를 쓰기 때문, 즉 리소스를 한번에 많이 씀\n이것에 따라 최적화가 달라질 수 있음\n\n\nApp 내부 로직\nDB 넣기\n\n2000 -&gt; 5000개 2배 이상 시간이 걸릴 것임\n\n\n마커 클러스터링\n\n얘도 2배정도 걸릴 것임\n근데 2배 이상으로 커질 수도 있음, 시간 복잡도에 따라.\n\n\n\n\n\n\n프로파일링\n\n단순히 CPU 타임을 기반으로 판단할 수는 없을 수 있음\n\n락?\n\n\n그래도 그나마 시간 측정이 가장 빠르다.\nProduct &gt; Profile\n\n빌드 새로함\n빌드 과정에 profiling 필요한 코드 심음\n\n\nTime Profiler\n\n어디서 시간 오래걸리는지?\nsimulator로하면 시간 좀더 오래걸림\n드래그 해서 선택하면 보임\n시간 오래걸린 것부터 보면 됨\n코어데이터는 조낸 느리다.\n5000개를 넣으려면 5000번 호출되는 함수가 있었음\n여기서 중복있는지 확인하고 아니면 넣는 함수\n여기서 중복 체크 안하면 빨라지지 않을까?\n제안 방법\n\n처음에 할때는 중복체크 필요없잖아\n일일히 중복 체크하는게 오래걸림\n\n코어데이터는 key가 없음\n즉, 처음부터 다 뒤짐. Hash가 아니라는 것.\n5000번 들어오면 다 뒤져서 찾음\n\n\n\n\ncore data는 search가 느림.\ninsert는 생각보다 빠름\n\n\n코드 수정\n\n지우니까 1초인가만에 됨\n\n\n이제 문제를 어떻게 해결할 것인가?\n\n클러스터링이 6초나 걸림\n그리고 이게 main thread.. ui blocking\n어떻게?\n\nbackground로 가능?\n\n\n\n\n방안\n\naddBookmark에서 있는지 확인 어떻게 빠르게 할 것인가?\n마커매니저 background thread?\n\n\n\n\n프로파일링시 배운 것\n\n처음부터 어렵게 코드 짜지 마라\n굳이 background할 필요없으면 main에서 해라\n나중에 생각해라\n추측하는 과정, 계획하는 과정도 필요\n프로파일링은 치명적인 부터 본다, 작게하고 큰 효과\nCPU 수치도 마찬가지다.\n프로파일링은 꼭! 해봐야 한다.\nmain thread을 묶고 있는 녀석이 있다면 background로 보낼 방법을 해봐야 한다.\n\n\nUI 적용 코드 보다가 배운 것\n\nshaver보고 깜짝 놀람\n그냥 extension에 정의하고 함수 사용하는 것으로만 생각했는데,\n그렇게 하지 않고 연산자를 정의하여 적용하는 개념으로 확장함\n즉, 구조체에는 관련 값만 정의하고 연산자를 통해 적용하는 방식을 사용\n놀라움.. 값을 주입하는 형태(연산자)를 통해 생각하는 방식을 개선 가능\n\n\n\nCommitment §\n배운 내용 §\n\n성과를 내려는 것보다 성장에 초점을 맞춰라.\n글쓰고 공유 조금더 자주해라.\n글을 쓸 때, 완벽하게 작성하려는 생각을 조금 내려놔라.\n글의 길이를 조금 줄여라. 결국 말하고자 하는 것은 간단하다.\n말하고자 하는 것을 고민하는 시간을 더 쏟아서 글을 짧게 쓰려는 연습을 해라.\n크고 간간히보다, 작고 자주가 더 좋다.\n더 많은 피드백을 받을 수 있게 작고, 읽기 쉽게 적어라.\n구현 패턴을 읽어 코드의 표현에 드는 시간을 줄여라.\n구조에 대한 고민은 아직 이르다.\n디자인 패턴을 읽었다고 바로 적용하려는 시도는 오히려 위험할 수 있다. 작은 판단이 모이면 그러한 패턴으로 갈 수 있다.\n작은 판단에 있어 더 옳은 방향으로 하려는 연습을 더 많이 해라.\n간간히 새로운 시도를 자발적으로 해라.\n\n방향 §\n\n이번달에는 어찌보면 첫 스펙이라 할 수 있는 것을 처리했다.\n코드의 흐름을 따라가는 것이 어려웠던 것 같다.\n기본적으로 어떠한 형태들로 구현되어 있는지 파악하는 것이 오래걸렸다.\n팀원분의 도움을 받으면 받을 수록 직관적으로 이해하는 데 도움이 되었다.\n그랬다면 조금더 나은 코드를 넣을 수 있었을 텐데 하는 아쉬움이 있다.\n직관적으로 이해가 가지 않는다면 바로 도움을 요청하는 것이 효율적이다.\n내가 할 수 있는 당시의 최선의 코드를 넣는다는 마음으로 포기하지 말고 임하자.\n루틴이 깨지면서 까지 무리해서 하지는 말자. 더 중요한 것이 있다.\n"},"Logs/Monthly/2022-09":{"title":"2022-09","links":[],"tags":["logging"],"content":"Goals §\n\n 무엇을 목표했나요?\n\nGood §\n\n운동을 시작했다.\n작은 생활 계획을 세우고 이행중이다.\n\nBad §\n\n코드를 생각을 덜 하고 짜는 것인지 지적을 좀 받았다.\n퍼포먼스가 약간 떨어졌던 것 같다. 수면을 좀 더 해야겠다.\n\nLearns §\n\n라인 너무 길지 않으면 한라인에 적기\n줄바꿈 컨벤션 지키기\n나누기 할 떄 0으로 나누지 않는지 확인!\n개행은 길이로만 끊는 것이 아니다. 컨텍스트가 바뀔 때 하는 것이 가장 좋다.\n\n.build()를 한다고 했을 때, .이 찍혔다고 해서 무지성으로 개행하는 것이 아닌, 문맥상 이어지는게 좋으면 길어도 그냥 둔다.\n반대로 Chaining이 되더라도 각각의 내용이 분리되어 표현이 필요하면 줄바꿈을 한다. (attribute를 적용하는 경우)\n\n\n방어코드의 위치와 실제 사용되는 코드의 위치는 멀지 않아야 한다.\n\n클린 코드: 코드의 거리도 코딩할 때 고려해야하는 요소\n읽는 사람이 해당 방어코드를 읽고 문제 생길 가능성이 없겠구나~ 하고 바로 인지할 수 있도록 해야 한다.\n\n\n상속을 통한 컴포넌트 정의가 재사용을 위한 유일한 방법은 아니다.\n\n버튼의 외형이 달라질 것 같아 UIButton 상속하여 만듦\n이렇게 하지말고, Style만 변화되는 것이라면, 이 책임을 수행할 다른 역할 수행자를 만들어 처리하는 것이 좋음\nBridge 패턴과 비슷\n주석으로 해당 개체 링크 달아둠 확인할 것\n\n\n\nCommitment §\n\n힘들더라도 새벽 기상, 러닝은 하자.\n꾸준함은 누구도 이길 수 없다. 아침마다 하려고 한 것들 꼭 해내자.\n불안함을 원천으로 다시 한번 이겨내자.\n"},"Logs/Monthly/2022-10":{"title":"2022-10","links":[],"tags":["logging"],"content":"Good §\n\n하루 목표한 양은 다했다.\n서둘러서 처리하려 했고, 이뤘다.\n\nBad §\n\n일이 바빠, 세워두었던 라이프 스타일을 지키지 못했다.\n\nLearns §\ndictionary §\n \n    public var result: [String: Int] {\n        var dictionary = [String: Int64]()\n        dictionary[&quot;id&quot;] = self.id\n        dictionary[&quot;order&quot;] = order\n        return dictionary\n    }\n \n    public var result: [String: Int] {\n        [&quot;id&quot;: self.id, &quot;order&quot;: order]\n    }\n\n줄일 수 있다면 줄여야 한다.\n\ntimer §\n\ntimer invalidate는 deinit에서 하면 안됨\n타이머가 메시지를 받는 녀석을 capture하고 있을 것임\n근데 view도 타이머를 가지고 잇음\nretain cycle 형성\ndeinit 안될 가능성 있음\n그래서 클로저 안에서 invalidate, nil 처리를 해줘야 cycle 안생김 -&gt; 메모리에 쌓여있을 수 있음\n\nExtra §\n\nn자 제한있는 텍스트 필드는 마지막 문자가 한글인 경우 제대로 입력이 안된다.\n텍스트 필드를 두개두고 보여지는 텍스트 필드로 처리하는 등의 꼼수가 있으나, 글쎄..\n문서를 잘 읽자. SDK에 의존적이라면 설명서는 잘 읽어야 한다. 근거도 문서가 되어야 한다.\n\nCommitment §\n\n다시 새벽에 운동하는 습관을 가져야 한다.\n영어 회화를 꾸준히 해봤지만, 다른 접근이 필요할 듯하다. 절대적인 시간을 못쏟다보니 성장이 더디다. 다른 동기와 목적을 찾고 진행해야 할 듯\n계속해서 효율적으로 처리하려는 습관을 가져야 한다. 좋은 코드 + 속도 = 실력\n한번 겪었던 것은 잊지 않으려 노력하자. 3번 까먹으면 실력이다.\n다시 아침 루틴 세워서 이행하자!\n블로그 글 올해안에 300개 적어야 한다.\n"},"Logs/Monthly/2022-11":{"title":"2022-11","links":[],"tags":["logging"],"content":"Good §\n\n스펙 관련 이슈 트래킹, 스펙 문서 읽기 등을 꼼꼼히 잘하여 QA 개수를 많이 줄였다.\n디자인 더블 체크하는 방식을 통해, 예상되는 문제점을 사전에 파악하여 생산성을 증대시켰다.\n마감 기간 이전 7일 전에 전체 스펙 구현을 완료하여, 이후 변경되는 스펙에 대해 빠른 대응이 가능토록 했다.\n\nBad §\n\n다른 분의 업무에 대해 제대로 파악하지 못했다.\n코드 리뷰를 많이 하지 못했다.\n내가 처리하는 국소적인 코드에 대해서만 이해했다.\n블로그 글을 많이 작성하지는 못했다.\n스펙 후반부에는 약간 지쳐서 기존보다 높은 퍼포먼스를 내지 못했다.\n\nLearns §\n\n어떻게 평가가 이루어지는지 알게 되었다.\n\nCommitment §\n\n처음부터 코드를 표현력 높게 짜야 한다. 당장 문제를 수습하기 위한 조치는 결국 나중에 큰 공수로 돌아온다.\n프로젝트의 전체적인 구현 방향에 대해 알고 작업을 해야 한다. 이미 다른 분이 해당 부분의 코드를 작성해놓았을 가능성이 있다.\n궁금한 점이 나왔을 때, 즉각 문제를 수정하고 로깅하자. 그 때 아니면 안하게 된다.\n이제 내 밥그릇을 어느정도 치울 수 있으니, 전체의 생산성을 향상시키는 높일 방안을 찾아야 한다.\n지치는 상태를 빠르게 파악하고 휴식을 주자.\n12월에는 남은 강의를 마무리하는 것을 목표로 하자.\n"},"Logs/Monthly/2022-12":{"title":"2022-12","links":[],"tags":["logging"],"content":"소감 §\n1년이라는 시간이 참 짧다. 올해를 시작하며 세웠던 계획이 없었다면 아마 올해를 판단할 기준조차 없었을 것이다.\n올해의 목표는 “성장” 단 하나였다.\n그렇기 위해서는 내가 맞닥들이는 모든 것을 두번은 반복하지 않겠다는 다짐이 필요했다. 그리고 이를 하기 위해서 기록하고 질문하고 다시 찾아보기를 반복했다.\n그런 태도 자체를 유지했다는 것이 올 한해는 만족스러웠다. 그리고 적응도 그럭저럭 한 것 같다.\n인간적으로도 성숙해졌다는 것을 느꼈다. 이전보다 지금의 내가 훨씬 좋다.\n내년은 좀 더 달릴 수 있는 한해가 되지 않을까 싶다.\n팀 내에서 나의 위치, 내가 할 수 있는 것과 그렇지 않은 것, 무엇을 더 배워야 할지, 무엇을 아는지에 대해서 조금 더 구체적인 상황이 되었다.\n내년에는 조금 더 통제력을 갖는 사람이 되고 싶다. 올해도 이를 지키려했지만, 가끔 무너지는 경우가 있었다.\n무너짐의 관성때문에 원래대로 돌려놓는 것은 더 힘들었다.\n하기 싫어도 할 수 있는 의지를 가진 사람, 그걸 넘어서 다른 사람을 도울 수 있는 사람, 남에게는 관대한 사람이 되고 싶다.\n누군가 알아주지 않아도 옳은 일을 하는 사람이 되고 싶다. 그러기 위해서는 내가 해야하는 이유에 대해 명확해질 필요가 있다.\n내년은 “영향”이라는 키워드를 가지고 살아야 겠다.\n올해 §\n\n강의 수강\n\nObject Oriented Programming\n\n\n개발 서적을 통한 공부\n\n클린 코드\n디자인 패턴\n애자일 프로세스\n\n\n개인 블로그 200개 작성\n\nSwift Concurrency\nUIKit, Swift 등 필요한 개념 공부\n\n\n3번의 배포에 참여\n\n내년 목표 §\n\n팀 내 기술 공유, 라이브 코딩, 코드 리뷰 적극 제안 및 참여\n\n리뷰를 확실히 많이 했다고 느낄 수 있게 정성적으로 보일 정도로 참여\n\n\n직접 담당/코딩하지 않은 업무더라도 설계 및 구현 방향을 적극적으로 제안하여 기술적으로 효율적 결정이 일어날 수 있도록 참여\n\n다른 스펙에 대해 어떻게 구현되어 있는지를 질문하고, 방향에 대해 고민, 공유\n\n\n신속하고 투명한 커뮤니케이션을 지향하여 협업 요청이 있을 경우 공개된 채널에서 토론하고 최우선적으로 대응\n\n다양한 공유 채널을 적극 활용하고 빠르게 의견을 공유\n\n\n특정 방법이 귀찮더라도 자명히 맞는 방식이라면 엉뚱한 방식으로 진행하지 않도록 적극적으로 의견 개진\n\n내가 말하지 않으면 아무도 말하지 않을 수도 있다.\n미움을 사더라도 맞는 것을 추구해야 한다.\n\n\n팀원 전체의 향상이 가장 좋다.\n\n다른 분의 공백을 메꿔줄 수 있도록 좋은 내용이 있다면 공유\n\n\n블로그 글 200개 작성\n\n작년의 개수 유지\n\n\n적어도 내가 작성하고, 맡은 곳에서는 QA이슈가 나오지 않게 처리\n\n나의 생산성을 높이고, 남는 시간에 다른 사람을 도와야 한다.\n\n\n의미적으로 코드의 구성을 분리\n\nUI 컴포넌트를 디자이너가 의도한 논리적 단위에 따라 코드 역시 물리적으로 분리한다.\n즉, “당연하게” 느껴지도록 코드를 분리하고 작성한다.\n이렇게 하면 나 말고 다른 사람이 코드를 보더라도 직관적으로 알 수 있기 때문에 팀 전체의 생산성이 높아진다.\n또한 코드의 범위를 국소적으로 만들기 때문에(캡슐화) 신경써야 하는 범위를 줄일 수 있어 가독성을 향상시킨다.\n\n\n더블체크 습관\n\n수정한 후, UI의 경우 무조건 빌드 화면을 확인한다.\n\n\n살면서 느끼는 점에 대해 로깅\n\n\n개발 말고도 귀납적, 혹은 연역적으로 추론한 것들에 대해 적어둘 필요가 있다.\n보통은 짧은 문장으로 끝나는 경우가 많다.\n트위터에 생각날 때마다 짧게 글을 쓰는 연습을 하자.\n그리고 좋은 글이 될만하다 싶으면 브런치에 옮기자.\n\n\n취미 만들기\n\n\n내가 좋아하는 건 맛있는 것 먹기, 여행, 옷입기, 지적 호기심 채우기 정도이다.\n그중 맛집은 주말마다 매일간다.\n투자 공부도 매일하는 편에 속한다.\n맛집의 경우에는 트위터 같은 곳에 계속 올리면 좋을 것 같다.\n투자의 경우에는 모임같은걸 만들면 어떨까싶은데.. 관리할 자신이 없다.\n나 혼자 할 수 있는 걸로 꾸준히 무언가를 하고 싶다.\n맛집 계정, 글쓰기 정도가 있겠다.\n\n\n혼자 해외여행 가기\n\n\n이제 나혼자 갈 수 있는 날이 얼마 안남았다.\n\n\n영어 회화\n\n\n언어적으로 후달리는 것 같다.\n더 많은 다른 사람들과 내가 하고 싶은 얘기를 하고 싶은데 겨우 살아남을 수준으로만 하는 것 같다.\n한 4-5개월정도 회사지원 프로그램을 해본 것 같은데 무언가를 여러개하여 집중한다는게 어려운 것 같다.\n방법을 찾고 싶다.\n\n\n꾸준한 건강 관리\n\n\n코어운동이 필요하다.\n유연성은 이미 끝났다..\n맨몸운동이 코어 단련에 더 좋은 듯 하다. 내 몸부터 다루고 나서 무게를 달아야지\n\n내년 개선점 구체화 §\n개발 §\n\n 코드 리뷰: 매일 한번 보기\n 팀 내 기술 공유 1회 이상\n 신속한 문의 및 대응\n\nMattermost\n메신저\n이슈\nWiki\n\n\n 적극적인 기술 의견 개진\n\n모르는 것에 대해 거침없이 묻고 말하기\n\n\n 지속적인 블로그 로깅\n\n200개 작성\n월당 적어도 20개\n\n\n 그라운드 룰 구축: OSS 위키 기록\n\n내가 신입일 때 모르겠다 싶은 것 로깅\n\n\n 꼼꼼한 개발: QA 이슈 개수 줄이기\n\n스펙 하나당 20개 이하\n\n\n 300줄 / 100글자 / 하드코딩 X 규칙 지키기\n\n한 파일 내에 라인수를 300줄로 줄인다.\n한 라인은 100글자 내로 줄인다.\nenum Constants로 하드코딩 값을 하나에서 관리한다. 표현력도 높힌다.\n\n\n 강의 2개 이상 수강\n\n OOP\n Unmanaged Language\n Algorithm\n 컴퓨터 구조\n 이산 수학\n\n\n\n개인 §\n\n 트위터 생각 계정 글 200개 이상 쓰기\n 트위터 맛집 계정 글 50개 이상 쓰기\n 책 10권 이상 읽기\n\n굳이 다 읽는 것에 목적을 두지 않아도 됨\n책에서 하고 싶은 말은 사실 몇개 안됨\n그 사이에서 인사이트만 얻었다면, 그걸 씹어서 음미하는것이 더 중요.\n즉, 독해를 할 것\n\n\n 여행 2번 이상 갈 것\n\n방콕\n청도\n인도네시아\n캄보디아\n라오스\n\n\n 하루 두끼만 먹기\n\n아침, 점심\n\n\n 아침 맨몸운동\n 영어.. 방법 찾기\n\n정리 §\n공통 철학 §\n\n내 행동은 나 하나에만 영향이 가는 것이 아니다. 그러므로 책임을 느끼고 하기 싫더라도 실천하자.\n남이 하기 싫어하는 일을 내가 먼저하자. 그러면 남들도 도와주게 되어 있다.\n시대가 바뀌어도 성실함은 최고의 미덕이다. 나에 대한 통제력을 잃지 말자.\n\n업무 §\n\n 기획서, 디자인을 살펴보지 않아도 이해할 수 있을 정도로 코드짜기\n 팀 전체가 공유해야 하는 그라운드 룰에 대해 정리하기\n 비대면 상황에 맞게 알맞은 도구를 통해 공유하여 생산성을 높이기\n 적극적 코드 리뷰를 통해 소스코드에 기여하기\n 완성도 높은 신규 코드 작성을 통해 대응이 용이하도록 하기\n 적절한 질문을 통해 성장 속도를 가속화하기\n\n성장 §\n\n 개발 글 250개 작성하기 (월당 30개)\n 필요하다고 생각하는 세션에 2회 이상 참여하기\n 컴퓨터 기초에 대해 누구에게 설명할 수 있을 정도의 핵심을 이해하기 (강의 2개 이상 수강)\n 좋은 서적 10권 독해하기\n\n개인 §\n\n 생각에 대한 글을 자주 쓰기 (Twitter)\n 취미로 좋은 식당 로깅하기 (Twitter)\n 동남아 해외 여행 2회 이상 가기\n 꾸준한 맨몸 운동하기\n 식사는 하루에 두끼만 하기\n 새벽에 일어나기\n"},"Logs/Monthly/2023-01":{"title":"2023-01","links":[],"tags":["logging"],"content":"소감 §\n내년은 좀 더 달릴 수 있는 한해가 되지 않을까 싶다.\n팀 내에서 나의 위치, 내가 할 수 있는 것과 그렇지 않은 것, 무엇을 더 배워야 할지, 무엇을 아는지에 대해서 조금 더 구체적인 상황이 되었다.\n내년에는 조금 더 통제력을 갖는 사람이 되고 싶다. 올해도 이를 지키려했지만, 가끔 무너지는 경우가 있었다.\n무너짐의 관성때문에 원래대로 돌려놓는 것은 더 힘들었다.\n하기 싫어도 할 수 있는 의지를 가진 사람, 그걸 넘어서 다른 사람을 도울 수 있는 사람, 남에게는 관대한 사람이 되고 싶다.\n누군가 알아주지 않아도 옳은 일을 하는 사람이 되고 싶다. 그러기 위해서는 내가 해야하는 이유에 대해 명확해질 필요가 있다.\n내년은 “영향”이라는 키워드를 가지고 살아야 겠다.\n내년 목표 §\n\n팀 내 기술 공유, 라이브 코딩, 코드 리뷰 적극 제안 및 참여\n\n리뷰를 확실히 많이 했다고 느낄 수 있게 정성적으로 보일 정도로 참여\n\n\n직접 담당/코딩하지 않은 업무더라도 설계 및 구현 방향을 적극적으로 제안하여 기술적으로 효율적 결정이 일어날 수 있도록 참여\n\n다른 스펙에 대해 어떻게 구현되어 있는지를 질문하고, 방향에 대해 고민, 공유\n\n\n신속하고 투명한 커뮤니케이션을 지향하여 협업 요청이 있을 경우 공개된 채널에서 토론하고 최우선적으로 대응\n\n다양한 공유 채널을 적극 활용하고 빠르게 의견을 공유\n\n\n특정 방법이 귀찮더라도 자명히 맞는 방식이라면 엉뚱한 방식으로 진행하지 않도록 적극적으로 의견 개진\n\n내가 말하지 않으면 아무도 말하지 않을 수도 있다.\n미움을 사더라도 맞는 것을 추구해야 한다.\n\n\n팀원 전체의 향상이 가장 좋다.\n\n다른 분의 공백을 메꿔줄 수 있도록 좋은 내용이 있다면 공유\n\n\n블로그 글 200개 작성\n\n작년의 개수 유지\n\n\n적어도 내가 작성하고, 맡은 곳에서는 QA이슈가 나오지 않게 처리\n\n나의 생산성을 높이고, 남는 시간에 다른 사람을 도와야 한다.\n\n\n의미적으로 코드의 구성을 분리\n\nUI 컴포넌트를 디자이너가 의도한 논리적 단위에 따라 코드 역시 물리적으로 분리한다.\n즉, “당연하게” 느껴지도록 코드를 분리하고 작성한다.\n이렇게 하면 나 말고 다른 사람이 코드를 보더라도 직관적으로 알 수 있기 때문에 팀 전체의 생산성이 높아진다.\n또한 코드의 범위를 국소적으로 만들기 때문에(캡슐화) 신경써야 하는 범위를 줄일 수 있어 가독성을 향상시킨다.\n\n\n더블체크 습관\n\n수정한 후, UI의 경우 무조건 빌드 화면을 확인한다.\n\n\n살면서 느끼는 점에 대해 로깅\n\n\n개발 말고도 귀납적, 혹은 연역적으로 추론한 것들에 대해 적어둘 필요가 있다.\n보통은 짧은 문장으로 끝나는 경우가 많다.\n트위터에 생각날 때마다 짧게 글을 쓰는 연습을 하자.\n그리고 좋은 글이 될만하다 싶으면 브런치에 옮기자.\n\n\n취미 만들기\n\n\n내가 좋아하는 건 맛있는 것 먹기, 여행, 옷입기, 지적 호기심 채우기 정도이다.\n그중 맛집은 주말마다 매일간다.\n투자 공부도 매일하는 편에 속한다.\n맛집의 경우에는 트위터 같은 곳에 계속 올리면 좋을 것 같다.\n투자의 경우에는 모임같은걸 만들면 어떨까싶은데.. 관리할 자신이 없다.\n나 혼자 할 수 있는 걸로 꾸준히 무언가를 하고 싶다.\n맛집 계정, 글쓰기 정도가 있겠다.\n\n\n혼자 해외여행 가기\n\n\n이제 나혼자 갈 수 있는 날이 얼마 안남았다.\n\n\n영어 회화\n\n\n언어적으로 후달리는 것 같다.\n더 많은 다른 사람들과 내가 하고 싶은 얘기를 하고 싶은데 겨우 살아남을 수준으로만 하는 것 같다.\n한 4-5개월정도 회사지원 프로그램을 해본 것 같은데 무언가를 여러개하여 집중한다는게 어려운 것 같다.\n방법을 찾고 싶다.\n\n\n꾸준한 건강 관리\n\n\n코어운동이 필요하다.\n유연성은 이미 끝났다..\n맨몸운동이 코어 단련에 더 좋은 듯 하다. 내 몸부터 다루고 나서 무게를 달아야지\n\n내년 개선점 구체화 §\n개발 §\n\n 코드 리뷰: 매일 한번 보기\n 팀 내 기술 공유 1회 이상\n 신속한 문의 및 대응\n\nMattermost\n메신저\n이슈\nWiki\n\n\n 적극적인 기술 의견 개진\n\n모르는 것에 대해 거침없이 묻고 말하기\n\n\n 지속적인 블로그 로깅\n\n200개 작성\n월당 적어도 20개\n\n\n 그라운드 룰 구축: OSS 위키 기록\n\n내가 신입일 때 모르겠다 싶은 것 로깅\n\n\n 꼼꼼한 개발: QA 이슈 개수 줄이기\n\n스펙 하나당 20개 이하\n\n\n 300줄 / 100글자 / 하드코딩 X 규칙 지키기\n\n한 파일 내에 라인수를 300줄로 줄인다.\n한 라인은 100글자 내로 줄인다.\nenum Constants로 하드코딩 값을 하나에서 관리한다. 표현력도 높힌다.\n\n\n 강의 2개 이상 수강\n\n OOP\n Unmanaged Language\n Algorithm\n 컴퓨터 구조\n 이산 수학\n\n\n\n개인 §\n\n 트위터 생각 계정 글 200개 이상 쓰기\n 트위터 맛집 계정 글 50개 이상 쓰기\n 책 10권 이상 읽기\n\n굳이 다 읽는 것에 목적을 두지 않아도 됨\n책에서 하고 싶은 말은 사실 몇개 안됨\n그 사이에서 인사이트만 얻었다면, 그걸 씹어서 음미하는것이 더 중요.\n즉, 독해를 할 것\n\n\n 여행 2번 이상 갈 것\n\n방콕\n청도\n인도네시아\n캄보디아\n라오스\n\n\n 하루 두끼만 먹기\n\n아침, 점심\n\n\n 아침 맨몸운동\n 영어.. 방법 찾기\n Swift Concurrency 강의 찍기\n\n정리 §\n공통 철학 §\n\n내 행동은 나 하나에만 영향이 가는 것이 아니다. 그러므로 책임을 느끼고 하기 싫더라도 실천하자.\n남이 하기 싫어하는 일을 내가 먼저하자. 그러면 남들도 도와주게 되어 있다.\n시대가 바뀌어도 성실함은 최고의 미덕이다. 나에 대한 통제력을 잃지 말자.\n\n업무 §\n\n 기획서, 디자인을 살펴보지 않아도 이해할 수 있을 정도로 코드짜기\n 팀 전체가 공유해야 하는 그라운드 룰에 대해 정리하기\n\n Toothless 공유\n\n\n 비대면 상황에 맞게 알맞은 도구를 통해 공유하여 생산성을 높이기\n 적극적 코드 리뷰를 통해 소스코드에 기여하기\n 완성도 높은 신규 코드 작성을 통해 대응이 용이하도록 하기\n 적절한 질문을 통해 성장 속도를 가속화하기\n\n성장 §\n\n 개발 글 250개 작성하기 (월당 30개)\n 필요하다고 생각하는 세션에 2회 이상 참여하기\n 컴퓨터 기초에 대해 누구에게 설명할 수 있을 정도의 핵심을 이해하기 (강의 2개 이상 수강)\n 좋은 서적 10권 독해하기\n\n개인 §\n\n 생각에 대한 글을 자주 쓰기 (Twitter)\n 취미로 좋은 식당 로깅하기 (Twitter)\n 동남아 해외 여행 2회 이상 가기\n 꾸준한 맨몸 운동하기\n 식사는 하루에 두끼만 하기\n 새벽에 일어나기\n Swift Concurrency 강의 찍기\n\n잘한점 §\n\n비트코인 공부를 시작함\n꾸준히 책을 읽음\n꾸준히 강의 및 공부 진행함\nOOP 강의 모두 수강함\n\n못한점 §\n\n디버깅 능력이 부족한 듯 하다. 이게 상당히 중요한 능력인데.\n\n배운 내용 §\n\n프레임워크 도입\n공개키, 전자서명 동작 방식\nSingleton에서 특정 객체 주입받아서 넘여줄때 공유인스턴스인지 확인\nAPI 객체가 공유인스턴스로 A, B 화면에서 사용되면 http cancel 되는 것이 독립적으로 동작하지 않아 side effect 발생될 수 있다.\n프로젝트 및 모듈에 Layer가 존재해야 하는 이유\n실무자와 관리자가 각각이 갖는 생각에 대한 간극\n\n다짐 §\n\n2년에서 3년 뒤쳐져 있다. 이걸 잊으면 안된다.\n밑바닥에서 동작하는 방식에 대해 이해하지 못하면 딱 그정도에서 멈출 것이다.\n\nC, 어셈블리\n네트워크\nDB\n\n\n다음 강의는 무엇을 들어야 할까?\n좀 더 엄밀하게 컴퓨터가 어떻게 도는지 알고 싶다.\n\nC, C++를 빠르게 다시 보고 싶다.\n\n\n실무적으로 도움이 되는건 다음으로 구현 패턴을 읽어봐야 겠다.\n꾸준히 할 것\n\n비트코인\nC, C++\n디자인 패턴 &gt; 구현 패턴\n\n\n운동을 안하니까 체력이 떨어지는 것 같다.\n목적을 위해 해야하는 행동이라 생각하자. 하기는 싫지만..\n"},"Logs/Monthly/2023-02":{"title":"2023-02","links":[],"tags":["logging"],"content":"Good §\n\n머리가 좀 아프지만 구조적으로 해보려고 노력했다는 점..\n주도적으로 문제점에 대해 요약하고 전달하여 해결하려고 했다.\nAI 사용법을 많이 익혔다. 접근도 빠르게 하도록 환경세팅도 했다.\n\nBad §\n\n머리가 딸려서 정확한 요청을 이해하지 못할 때가 종종 있었다.\n개인적인 공부를 할 시간이 부족했다.\n여러가지 관심사들이 겹치면서 오히려 하나에 집중하지 못한 면이 있다.\n운동도 못했다. 체력이 떨어지면 더 오랜시간 집중할 수 없는데..\n블로그 글도 생각보다 많이 못적었다.\n\nLearns §\n\n구체 타입에 의존할 경우, 결국 범용성은 떨어짐.\n어느 계층에 있는지에 대해 고민, 그리고 앞으로를 보고 어느정도의 추상화가 좋은지 생각해보자.\n프레임워크의 계층을 알았다.\n\n코드의 위치에 따라 문제 풀이가 간단해 질 수 있다.\n모듈 간에 서로 알아야 할 것과 알아야 하지 말 것을 분리해보자.\nService 객체같은 것의 조합도 사용하는 쪽에서는 알필요가 없다.\n\n\n\nCommitment §\n\n배우고 싶은게 너무 많다..\n\nC\nC++\n알고리즘\n어셈블리\n다시 AI? 의문\n비트코인 책\n\n\n어떻게 하면 생산성을 높일 수 있을까?\n날 따듯해졌으니 다시 뛰어야 겠다.\n일단 공부는 하나씩 해보자.\n내가 보기에 취미할 시간은 없다. 배우는 것 자체를 즐기면 해결되는 문제다.\n기업과 정부의 힘이 강해지는 시대에 사는 것 같다. 개인에게 그 힘이 돌아가게 할 수 없을까?\n작은 일이라도 내가 할 수 있는 일을 해보자.\n"},"Logs/Monthly/2023-03":{"title":"2023-03","links":[],"tags":["logging"],"content":"Good §\n\n주도적으로 해결하려는 모습?\n뭔가 잘한 점이 없는 것 같다.\n\nBad §\n\n블로그글을 많이 못 적었다.\n운동을 할 수가 없다. 체력이 떨어지면 더 오랜 시간 집중할 수 없는데..\n책도 많이 못읽었다..\n뭔가 시간이 부족하다. 재택을 해야하나?\n\nLearns §\n\nCommand Pattern의 사용법.\n무조건 정적인 것이 좋은 것인가에 대한 의문.\n역시 공학은 상황에 맞는 문제 해결책이 다른 것일 뿐, 정해진 정답은 없다.\n모두가 합의하는 방식이라면 가능한 방안 중 하나다.\nAPI Design Guideline을 모두 읽었다. 좀 더 이름 짓기를 잘할 수 있지 않을까?\n\nCommitment §\n\n아침에 꼭 운동을 해보자!!!!\n정해진 루틴을 한번 다시 해보는거야..\n지식을 넣어야 한다.\n\n기술쪽 봐야할 것들 (개인) §\n\n비트코인 책\nC\n\n기술쪽 봐야할 것들 (공통) §\n\n클린코더\n리팩터링\n구현패턴\n\n기타 봐야할 것들 §\n\n스타벅스 비가 내리면~\n사토시의 서\n재무재표\n"},"Logs/Monthly/2023-04":{"title":"2023-04","links":[],"tags":["logging"],"content":"Good §\n\n적당히 내가 원하는 수준까지 개발했다.\n너무 정신없이 흘러갔다. 내가 통제한다는 느낌이 없다 ㅠ\n시류를 파악하기 위한 것들은 계속하고 있다.\n\nBad §\n\n시간을 내가 통제한다는 느낌이 줄어들었다.\n저번 달 목표인 운동을 못했다 ㅎㅎ\n\nLearns §\n\n비트코인 하드 월렛으로 이동 방법\n\nCommitment §\n\n동료분과 계속 운동하기.\n여행 가기전 완료하기.\n쉬는 날에는 상가 / 목조 주택 관련 공부\n"},"Logs/Monthly/2023-05":{"title":"2023-05","links":[],"tags":["logging"],"content":"Good §\n\n내가 원하는 일정까지 업무를 완료했다.\n6개월동안 내가 하고 싶은 대로 타협없이 일을 진행했다.\n\nBad §\n\n설계적인 측면에서 미쳐 못봤던 것들이 있다.\n아직 앱의 모든 부분을 본것이 아니기 때문에 당연하지만, 조금더 면밀히 보았다면 팀의 전체 생산성에 기여할 수 있었을 듯 하다.\n\nLearns §\n\nif문 여러개는 protocol 선언 후 채택하여 해결할 수 있다.\n객체지향적으로 동작하게 하면 분기를 없앨 수 있다. (ItemComposable)\n공유 변수를 가지고 다양한 결과값을 만들게 하는 것이 플라이급 패턴이다. (NSAttributedString.makeSpace())\n더블 디스패치는 Visitor 패턴이다. (Layouts().apply())\n\n객체의 책임을 나누고 이를 적용하기 위한 방법\n\n\n값의 변경 정도가 잦다면 switch말고 객체지향 방법으로 처리한다.\n패턴 매칭은 무엇인가? 조건문 보다 조금 상위 개념?\nLayout 코드 분석\nlint error는 분명 바꿀 수 있음을 알려주는 포인트이다.\n모든 주석을 지우자.\n\nCommitment §\n\n장소상세 끝나고는 다시 책읽고 정리하자.\n클린코더 다시 읽기\n사토시의 서 읽기\n디자인 패턴 다시 정리하고 내면화하기.\nWWDC를 이제 봐야할 듯하다. 새로운 밥줄을 위해.\n"},"Logs/Monthly/2023-06":{"title":"2023-06","links":[],"tags":["logging"],"content":"Good §\n\n6개월간의 리팩토링 업무를 성공적으로 끝냈다.\n\nBad §\n\n더 좋은 구조를 만들지 못했다는 것이 아쉽다.\n끝나고 보니 뭔가 중복된 구조도 많았다는 생각이 들고,\nenum을 사용하는 구석도 있었다보니 좀 아쉽니다.\n\nLearns §\n\n확장 가능성이 있으면 enum 쓰면 안된다.\nView에서 분기가 있다는 것은 로직을 태우고 있다는 것이다. 모델과 1대1 매칭을 통해 뷰를 모델화하여 테스트 가능하도록 하자.\n특정 상세 로직만을 위해 대응이 필요한 경우, 국소적으로 그 문제만 생각할 가능성이 높다. 이럴 경우 문제 조건을 오히려 추상화시켜서 단순화한 후, 모든 요소에 Composition으로 처리할 수는 없는지 생각해보자.\n웹뷰를 addsubview하지 않고 인스턴스 형태로 들고 있다가 붙이는 것은 문제가 발생할 소지가 있다. 내부적으로 결국 브라우저이기 때문이다. (실제로 다른 프로세스가 동작한다고 문서에 적혀있음) 그렇기에 addSubvbiew를 하고 hidden 여부로 로직을짜는게 더 안전할 수 있다.\n브라우저 역시 화면에 보이느냐 여부로 추가적인 네트워크 요청을 처리한다. 이게 당연하다. 그러니 Native에서 다시 웹뷰를 띄우면 문제 소지가 큰 것.\n제품 제작에 있어 Layering은 중요하다.\nTDD를 적용한다는 것은 단순히 테스트가 생산되어서 좋은 것이 아니다. 그 과정에서 필연적으로 발생하는 작은 모듈, 응집도 높은 객체들이 생산되기 때문에 좋은 것이다.\n\nCommitment §\n\n7월부터도 역시 기존 코드를 개선하는 업무를 맡게 된다.\n부담되는 것이 사실이나, 한편으로는 다른 어떤 것을 배우게 될지 기대된다.\n어떻게 되는 일정에 맞게 결과를 내는 것이 직장인의 숙명이다.\n이번에도 어떻게든 결과를 낼 것임을 다짐한다.\n"},"Logs/Monthly/2023-07":{"title":"2023-07","links":[],"tags":["logging"],"content":"Good §\n\n프로젝트 파일 구조 변경\n문서 백업 스크립트 만듬!! 후후 이제 언제든 다른 플랫폼으로 이동할 수 있음.\n집중해서 핫픽스 문제 해결\n디버그 메뉴 골격 및 화면 구성.\n꾸준한 운동 3달째 달성중.\n\nBad §\n\n마음에 화가 많아졌다.\n개발 서적 공부 및 비트코인 공부를 할 수가 없었다.\n블로그 글을 쓰지 못했다.\n\nLearns §\n// AS-IS\nif let crossoverData = data.crossover,\n   let id = crossoverData.id,\n   let name = crossoverData.name {\n    self.crossover = AuxTypeData(id: id, name: name)\n} else {\n    self.crossover = nil\n}\n \n// TO-BE    \nlet crossover = aux.crossover.flatMap {\n    curry(AuxTypeData.init(id:name:)) &lt;*&gt; $0.id &lt;*&gt; $0.name\n}\n \npublic func curry&lt;A, B, C&gt;(_ f: @escaping (A, B) -&gt; C) -&gt; (A) -&gt; (B) -&gt; C {\n    { a in { b in f(a, b) } }\n}\n \npublic func &lt;*&gt;&lt;A, B&gt;(lhs: ((A) -&gt; B)?, rhs: A?) -&gt; B? {\n    guard let lhs = lhs,\n          let rhs = rhs else {\n        return nil\n    }\n \n    return lhs(rhs)\n}\n\n연속적으로 nil이 뜨는 구조의 경우에는 flatMap을 사용하자.\n내부 변수가 nil인 경우 instance가 생성될 수 없는 경우다.\n원래 같으면, nil 체크를 한다음에 없으면 nil로 세팅해줬는데,\n생성자가 함수인점을 이용해서 currying을 사용하여 일단 인자와 함수와의 커플링을 없앤다.\n그 다음, 함수와 인자가 nil인 경우에 대한 연산자(&lt;*&gt;)를 정의하고, 그럴 경우 nil을 던지는 것으로 처리한다.\n\nCommitment §\n\nC언어 강의\nSwiftUI 강의\n구현패턴\n\n이거 언제함?\n\n비트코인에 관련되어서 내가 아는 내용을 바탕으로 모식도를 그려봐야 할듯.\n지갑앱을 만들어보는 것도 좋음\n이 과정에서 Swift UI 사용\n시중에 나와 있는 지갑앱이 약간 별로임.\n아침에 좀더 일찍 일어나야 할듯 ㅠ\n체지방 22%를 위해 달려보자.\n"},"Logs/Monthly/2023-08":{"title":"2023-08","links":[],"tags":["logging"],"content":"Goals §\n\n 함수형 프로그래밍 공부\n 풀노드 제작\n X 글 작성\n 리팩토링 글 작성\n 꾸준한 운동\n X, damus 프로필 변경\n 유튜브 첫 영상 제작\n 대중 교통쪽 구조 설계 및 작업 시작\n\nGood §\n\nX 프리미엄 확인해봄\n함수형 프로그래밍 공부함\n운동 꾸준히 함\n\nBad §\n\n월초부터 코로나로 골골댔다.\n일이나 일정이 있어 하고 싶은 것들을 많이 못했다.\n\nLearns §\n\nFunctor, Monad\nflatMap 의 사용\n범주론\n\nCommitment §\n\n한달에 하나씩 잡고 공부한다.\n\n함수형 프로그래밍\n함수형 사고\nC언어 강의\nSwiftUI 강의\n구현패턴\n영상 편집\n비트코인\n집짓기\n\n\n아침에 와서는 공부부터 하자. 바쁘다고 그만둘 수는 없다.\n블로그 글을 쓰면 X에 올리자. 누군가는 보는 것 같다.\n함수형 공부를 빨리 끝내자. 12월에 공유하는 것을 목표로 하자.\n그 다음에 집관련해서 공부하고 기획서 만들고 영상을 찍어보자.\n"},"Logs/Monthly/Monthly":{"title":"Monthly","links":["Logs/Monthly/2022-03","Logs/Monthly/2022-04","Logs/Monthly/2022-05","Logs/Monthly/2022-06","Logs/Monthly/2022-07","Logs/Monthly/2022-08","Logs/Monthly/2022-09","Logs/Monthly/2022-10","Logs/Monthly/2022-11","Logs/Monthly/2022-12","Logs/Monthly/2023-01","Logs/Monthly/2023-02","Logs/Monthly/2023-03","Logs/Monthly/2023-04","Logs/Monthly/2023-05","Logs/Monthly/2023-06","Logs/Monthly/2023-07","Logs/Monthly/2023-08","Logs/Monthly/2023-09"],"tags":[],"content":"2022 §\n\n2022-03\n2022-04\n2022-05\n2022-06\n2022-07\n2022-08\n2022-09\n2022-10\n2022-11\n2022-12\n\n2023 §\n\n2023-01\n2023-02\n2023-03\n2023-04\n2023-05\n2023-06\n2023-07\n2023-08\n2023-09\n"},"Traces/AI-Data-Idea-Contest-2":{"title":"AI Data Idea Contest","links":[],"tags":[],"content":"Helen §\n청각 장애인들분이 겪는 어려움들은 모두 조사하여, AI를 기반으로 이를 해결할 수 있는 서비스를 제작하였습니다.\n\n다중 대화 기능\n\n\n여러명의 화자와 얘기할 때, 입모양을 전부 볼 수 없다는 문제를 해결했습니다. 다중 화자의 음성을 분리하고 이를 인식한 후 STT(Speech to Text)로 문자로 변환했습니다.\n\n\n발음 학습 기능\n\n\n청각 장애인들 분도 음성 발화를 할 수 있도록 학습할 수 있게 설계했습니다. 진동, 시각표현, 입모양 등 다양한 감각을 통해 음성을 인지할 수 있도록 노력했습니다.\n\n\n커뮤니티 기능\n\n\n현재 발화를 잘하고 있는 분이나, 치료사들 분과 함께 대화할 수 있는 공간을 마련하였습니다.\n\n\n트리거 기능\n\n\n트리거 기능을 켜두면, 누가 나를 부를때 헬렌이 알림으로 알려주어 대화를 놓치지 않도록 합니다.\n\n\n\nResult §\n"},"Traces/AI-Data-Idea-Contest":{"title":"AI Data Idea Contest","links":[],"tags":[],"content":"Helen §\n청각 장애인들분이 겪는 어려움들은 모두 조사하여, AI를 기반으로 이를 해결할 수 있는 서비스를 제작하였습니다.\n\n다중 대화 기능\n\n\n여러명의 화자와 얘기할 때, 입모양을 전부 볼 수 없다는 문제를 해결했습니다. 다중 화자의 음성을 분리하고 이를 인식한 후 STT(Speech to Text)로 문자로 변환했습니다.\n\n\n발음 학습 기능\n\n\n청각 장애인들 분도 음성 발화를 할 수 있도록 학습할 수 있게 설계했습니다. 진동, 시각표현, 입모양 등 다양한 감각을 통해 음성을 인지할 수 있도록 노력했습니다.\n\n\n커뮤니티 기능\n\n\n현재 발화를 잘하고 있는 분이나, 치료사들 분과 함께 대화할 수 있는 공간을 마련하였습니다.\n\n\n트리거 기능\n\n\n트리거 기능을 켜두면, 누가 나를 부를때 헬렌이 알림으로 알려주어 대화를 놓치지 않도록 합니다.\n\n\n\nResult §\n"},"Traces/About-Architecture":{"title":"About Architecture","links":[],"tags":["boost-camp","architecture","ios","mvvm"],"content":"\n사용자 입력에 대한 Test, 단방향 흐름, 역할과 책임을 고려한 MVVM 구조를 채택하였습니다.\n\n\n\n기획 분석 §\n\n화면 이동이 복잡하지 않다.\n사용자 입력에 대해 처리할 부분이 있어, 입력 테스트가 필요하다.\n\n목표 §\n\n단방향 흐름의 구조를 갖는 아키텍쳐를 사용한다.\n뷰에 대한 요소를 ViewModel을 가지고 테스트 가능하도록 한다.\n뷰 요소를 바인딩을 통해 렌더링 한다.\n인터페이스 분리 원칙을 도입하여, 추후 변경되는 로직 개발 후, 쉽게 갈아끼울 수 있는 구조를 만든다.\n\nMVVM의 장점 §\n\n테스트 가능\n단방향 흐름을 가지고 있다.\n입력에 대해 Binding이 가능하다.\n"},"Traces/About-Dependency-Injection-2":{"title":"About Dependency Injection","links":[],"tags":["ios","boost-camp","dependency-injection","di"],"content":"\n다양한 의존성 주입 방법을 고려하고, 최종적으로 ViewController에 생성자 주입 방식을 통해 컴파일 타임에 주입 여부를 판단할 수 있도록 변경하였습니다.\n\n\n\n초기에 작성한 의존성 주입이라고 착각한 코드입니다.\n내부에서 생성을 하고 있기 때문에, 인터페이스를 분리한 이유가 전혀 없는 코드입니다.\n\n\n\n메소드로 해당 내부 프로퍼티에 주입하는 방식으로 변경했습니다.\n하지만 여전히 해당 메서드가 호출되는지 컴파일 타임에 확인할 수 없다는 문제가 발생했습니다.\n\n\n\n이에 생성자를 통해 주입하는 방식을 시도했습니다.\n하지만, 사용하는 다른 개발자가, 단순 생성을 했을 시, 뷰모델 주입이 필수적인지 알 수 없습니다.\n이를 fatal error로 막았으나, 여전히 컴파일 타임에 알 수 없다는 점은 동일합니다.\n\n\n\n최종적으로, Coder를 통해 생성하는 경우 자체를 컴파일 타임에 막기 위해 available 태그를 추가했습니다.\n\n\n\n결과적으로, DIViewController라는 요소를 만들고, ViewModel이 필요한 경우 해당 VC를 상속하여 구현했습니다.\n제네릭을 사용하여 어떤 타입이든 가능하도록 하였습니다.\n스토리 보드를 사용한 경우, iOS13 이후 부터는 아래와 같은 방식으로 사용이 가능합니다.\n\nimport UIKit\n \nclass DefaultDIViewController&lt;T&gt;: DefaultViewController {\n    var viewModel: T\n \n    init(viewModel: T) {\n        self.viewModel = viewModel\n        super.init(nibName: nil, bundle: nil) // code로 VC를 생성하는 경우 nib, bundle 모두 불필요\n    }\n \n    init?(coder: NSCoder, viewModel: T) {\n        self.viewModel = viewModel\n        super.init(coder: coder)\n    }\n \n    @available(*, unavailable, renamed: &quot;init(coder:viewModel:)&quot;)\n    required init?(coder: NSCoder) {\n        fatalError(&quot;Invalid way of decoding this ViewController&quot;)\n    }\n}\nlet storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil)\nlet viewModel = storyboard.instantiateInitialViewController { coder -&gt; RoomListViewController in\n    let viewModel = DefaultRoomListViewModel(usecase: RoomListUseCase(repository: RoomListRepository(service: FirebaseService.shared)))\n    return .init(coder: coder, viewModel: viewModel) ?? RoomListViewController(viewModel: viewModel)\n}\n\n결과적으로, ViewController를 생성 시점에 의존성 주입을 하는 방식을 도입하여, 컴파일 타임에 주입 여부를 확인할 수 있도록 변경하였습니다.\n\n의존성 주입의 방법과 의사결정 과정 §\n\n의존성 주입의 방식에는 크게 4가지가 있다.\n프로퍼티 주입 &amp; 메서드 주입\n\n메서드를 사용해서, 혹은 프로퍼티를 적용해서 의존성을 주입하는 방법이다.\n\n\n생성자 주입\n\n생성자만 보고 의존성을 파악할 수 있게 된다.\nA와 B가 서로 알아야 하는 경우 문제가 발생한다.\n이럴 경우 생성자 주입 방식으로 서로의 의존성을 주입하는 것이 불가능하여, 메서드 혹은 프로퍼티 주입 방식을 쓰는 것이 보다 깔끔한 방법일 수 있다.\n가장 깔끔한 방식이나 까다로울 수 있다.\n\n\n서비스 로케이터 패턴 (안티 패턴)\n\n모든 의존성을 알고 있는 locator 객체가 있고, 이 해당 객체에 요청하여 의존성을 해결하는 방법이다.\n\n생성자만 보고, 의존성을 파악할 수 없다는 단점이 있다.\n또한 locator 자체에 의존하게 된다.\n해당 클래스에서 요청을 하는 형태이기 때문에 외부에서 mock 객체를 갈아끼워 넣어서 테스트하는 것이 불가능해 졌다.\n따라서 안티 패턴이다.\n\n\n\n\n\n이중, 우리 프로젝트의 경우 서로 의존성을 주입해야 하는 상황이 발견되지 않기 때문에, 생성자 주입 방식을 도입하는 것이 가장 합리적인 판단이라고 생각한다."},"Traces/About-Dependency-Injection":{"title":"About Dependency Injection","links":[],"tags":["ios","boost-camp","dependency-injection","di"],"content":"\n다양한 의존성 주입 방법을 고려하고, 최종적으로 ViewController에 생성자 주입 방식을 통해 컴파일 타임에 주입 여부를 판단할 수 있도록 변경하였습니다.\n\n\n\n초기에 작성한 의존성 주입이라고 착각한 코드입니다.\n내부에서 생성을 하고 있기 때문에, 인터페이스를 분리한 이유가 전혀 없는 코드입니다.\n\n\n\n메소드로 해당 내부 프로퍼티에 주입하는 방식으로 변경했습니다.\n하지만 여전히 해당 메서드가 호출되는지 컴파일 타임에 확인할 수 없다는 문제가 발생했습니다.\n\n\n\n이에 생성자를 통해 주입하는 방식을 시도했습니다.\n하지만, 사용하는 다른 개발자가, 단순 생성을 했을 시, 뷰모델 주입이 필수적인지 알 수 없습니다.\n이를 fatal error로 막았으나, 여전히 컴파일 타임에 알 수 없다는 점은 동일합니다.\n\n\n\n최종적으로, Coder를 통해 생성하는 경우 자체를 컴파일 타임에 막기 위해 available 태그를 추가했습니다.\n\n\n\n결과적으로, DIViewController라는 요소를 만들고, ViewModel이 필요한 경우 해당 VC를 상속하여 구현했습니다.\n제네릭을 사용하여 어떤 타입이든 가능하도록 하였습니다.\n스토리 보드를 사용한 경우, iOS13 이후 부터는 아래와 같은 방식으로 사용이 가능합니다.\n\nimport UIKit\n \nclass DefaultDIViewController&lt;T&gt;: DefaultViewController {\n    var viewModel: T\n \n    init(viewModel: T) {\n        self.viewModel = viewModel\n        super.init(nibName: nil, bundle: nil) // code로 VC를 생성하는 경우 nib, bundle 모두 불필요\n    }\n \n    init?(coder: NSCoder, viewModel: T) {\n        self.viewModel = viewModel\n        super.init(coder: coder)\n    }\n \n    @available(*, unavailable, renamed: &quot;init(coder:viewModel:)&quot;)\n    required init?(coder: NSCoder) {\n        fatalError(&quot;Invalid way of decoding this ViewController&quot;)\n    }\n}\nlet storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil)\nlet viewModel = storyboard.instantiateInitialViewController { coder -&gt; RoomListViewController in\n    let viewModel = DefaultRoomListViewModel(usecase: RoomListUseCase(repository: RoomListRepository(service: FirebaseService.shared)))\n    return .init(coder: coder, viewModel: viewModel) ?? RoomListViewController(viewModel: viewModel)\n}\n\n결과적으로, ViewController를 생성 시점에 의존성 주입을 하는 방식을 도입하여, 컴파일 타임에 주입 여부를 확인할 수 있도록 변경하였습니다.\n\n의존성 주입의 방법과 의사결정 과정 §\n\n의존성 주입의 방식에는 크게 4가지가 있다.\n프로퍼티 주입 &amp; 메서드 주입\n\n메서드를 사용해서, 혹은 프로퍼티를 적용해서 의존성을 주입하는 방법이다.\n\n\n생성자 주입\n\n생성자만 보고 의존성을 파악할 수 있게 된다.\nA와 B가 서로 알아야 하는 경우 문제가 발생한다.\n이럴 경우 생성자 주입 방식으로 서로의 의존성을 주입하는 것이 불가능하여, 메서드 혹은 프로퍼티 주입 방식을 쓰는 것이 보다 깔끔한 방법일 수 있다.\n가장 깔끔한 방식이나 까다로울 수 있다.\n\n\n서비스 로케이터 패턴 (안티 패턴)\n\n모든 의존성을 알고 있는 locator 객체가 있고, 이 해당 객체에 요청하여 의존성을 해결하는 방법이다.\n\n생성자만 보고, 의존성을 파악할 수 없다는 단점이 있다.\n또한 locator 자체에 의존하게 된다.\n해당 클래스에서 요청을 하는 형태이기 때문에 외부에서 mock 객체를 갈아끼워 넣어서 테스트하는 것이 불가능해 졌다.\n따라서 안티 패턴이다.\n\n\n\n\n\n이중, 우리 프로젝트의 경우 서로 의존성을 주입해야 하는 상황이 발견되지 않기 때문에, 생성자 주입 방식을 도입하는 것이 가장 합리적인 판단이라고 생각한다."},"Traces/About-Directory":{"title":"About Directory","links":[],"tags":[],"content":"\n협업에 좋은 구조, 코드에게 좋은 구조\n\n\n아키텍쳐에 대한 정의가 이루어진 후, 어떤 방식으로 협업을 하는 것이 좋을지 고민했습니다. 제가 기존에 도입해본 방법은 아래와 같습니다.\n\n파일의 성격을 기준으로 폴더를 나누는 방법\n화면 기준으로 폴더를 나누는 방법\n\n두 방법을 사용하면서, 분명한 장단점이 존재했습니다.\n\n파일 기준\n\n파일 접근 자체는 편하나, 어떤 화면에 귀속되어 있는 파일인지 파악이 어려움\n\n\n화면 기준\n\n화면 단위로 파일이 모여있지만, 여러 화면이 하나의 비즈니스 로직을 처리하는 경우, 해당 파일의 위치가 애매해짐\n\n\n\n이러한 문제들에 대해서, 좋은 구조를 찾기 위해서는 우리가 어떤 방식으로 일하고 싶은가를 정의하는 것이 우선이었습니다. 저희는 화면 단위로 일감을 나누어서 진행하기 보다는, 모두가 프로젝트의 이해도를 높히면서, 남의 코드 역시 수정하는 경험 자체를 하는 것이 서로의 성장에 더 도움이 된다고 생각했습니다.\n따라서 특정 화면이 있을 때, 해당 화면의 비즈니스 로직을 담당하는 사람, 화면을 그리는 부분을 담당하는 사람 이렇게 둘로 나누었습니다. 이런 방식으로 일을 한다고 했을 때, Clean Architecture 구조를 보게 되었고, Layer를 기준으로 구조를 나누고 있음을 확인했습니다. 추후 가장 오른쪽의 사진과 같이 표현 계층, 도메인 계층, 인프라 계층과 같이 핵심 계층를 나누고, 도메인 계층과 표현 계층 사이는 인터페이스를 정의하여 서로 병렬 작업이 가능하도록 하였습니다.\n결과적으로, 폴더를 왔다갔다 해야하는 수고스러움이 줄어들었고, 또한 완전한 병렬작업이 가능했기에, 팀 전체의 생산성을 향상 시킬 수 있었습니다."},"Traces/About-External-Library-2":{"title":"About External Library","links":[],"tags":["boost-camp","library"],"content":"\n프로젝트의 외부 라이브러리 의존은 줄일 수록 빠른 대응이 가능한 서비스를 만들 수 있다 판단했습니다.\n\n\n프로젝트를 진행하기에 앞서, 라이브러리를 어느수준까지 사용하는 것을 허용할 것인지에 대해 고민했습니다.\n당장 구현하고자 하는 기능에 대해서 라이브러리를 적극 사용한다면, 빠른 생산성을 바탕으로 구현이 가능합니다.\n하지만, 저희는 결과적으로 해당 프로젝트에서 외부 라이브러리 사용 자체를 최대한 지양하는 방향으로 결정을 내렸습니다. 그 이유는 다음과 같습니다.\n\n\n추후 회사에 가서 프로젝트를 한다고 가정했을 때, 외부 라이브러리에 의존적인 코딩 습관을 갖는 것은, 신입 개발자로서 성장에 방해가 되는 요소이다.\n외부 라이브러리에 의존적인 프로젝트의 경우, 버전 업그레이드와 같은 이슈에 대해 대응하기 어렵다.\n빌드 속도가 지나치게 오래 걸린다.\n\n결과적으로, 유지보수 비용이 증대할 것이라는 판단을 내려, 구글에서 권장하는 Firebase SDK를 제외하고 애플에서 제공하는 프레임워크로 모든 기능을 개발하였습니다. 추후, Firebase SDK 역시 Rest API로 변경하여 빌드 타임을 줄일 예정에 있습니다."},"Traces/About-External-Library":{"title":"About External Library","links":[],"tags":["boost-camp","library"],"content":"\n프로젝트의 외부 라이브러리 의존은 줄일 수록 빠른 대응이 가능한 서비스를 만들 수 있다 판단했습니다.\n\n\n프로젝트를 진행하기에 앞서, 라이브러리를 어느수준까지 사용하는 것을 허용할 것인지에 대해 고민했습니다.\n당장 구현하고자 하는 기능에 대해서 라이브러리를 적극 사용한다면, 빠른 생산성을 바탕으로 구현이 가능합니다.\n하지만, 저희는 결과적으로 해당 프로젝트에서 외부 라이브러리 사용 자체를 최대한 지양하는 방향으로 결정을 내렸습니다. 그 이유는 다음과 같습니다.\n\n\n추후 회사에 가서 프로젝트를 한다고 가정했을 때, 외부 라이브러리에 의존적인 코딩 습관을 갖는 것은, 신입 개발자로서 성장에 방해가 되는 요소이다.\n외부 라이브러리에 의존적인 프로젝트의 경우, 버전 업그레이드와 같은 이슈에 대해 대응하기 어렵다.\n빌드 속도가 지나치게 오래 걸린다.\n\n결과적으로, 유지보수 비용이 증대할 것이라는 판단을 내려, 구글에서 권장하는 Firebase SDK를 제외하고 애플에서 제공하는 프레임워크로 모든 기능을 개발하였습니다. 추후, Firebase SDK 역시 Rest API로 변경하여 빌드 타임을 줄일 예정에 있습니다."},"Traces/About-Storyboard":{"title":"About Storyboard","links":[],"tags":["boost-camp","ios","storyboard"],"content":"\n서로 다른 화면을 유기적으로 작업하고자, 충돌 문제가 다수 발생하는 스토리보드 사용을 하지 않았습니다.\n\n프로젝트를 진행하기 전, 스토리보드 사용 여부에 대해 의사결정을 했습니다. 결과적으로 스토리보드 사용을 하지 않았는데, 그 이유는 다음과 같습니다.\n\n제대로 된 팀 프로젝트를 처음 경험하는 만큼, 화면 별로 분업 보다는, 의미있는 협업을 시도해보자.\n\n의미있는 협업 이란, 비즈니스 로직을 담당하는 팀과 화면을 담당하는 팀을 번갈아가면서 시도하고, 서로 침범하여 코드를 수정하는 것을 허용하는 것이라 정의했습니다.\n\n\n만약 스토리보드로 의미있는 협업을 수행할 시, 같은 스토리보드 파일을 수정할 때, 의미 없는 충돌이 발생할 여지가 많으므로, 이를 최대한 지양하는 방향으로 가자.\n또한, 팀원들 내부에 코드를 기반으로 Auto Layout을 적용해본 팀이 없기 때문에, 이를 도전과제로 선정하자.\n\n결과적으로, 위와 같은 아젠다를 바탕으로 스토리보드를 제외하고, 코드를 작성하는 틀을 서로 공유하여 한사람이 작성한 듯한 코드를 만들 수 있었습니다."},"Traces/Boost-Camp-2":{"title":"Boost Camp","links":["Traces/Fruit-Card-Game","Traces/OnBan","Traces/StarBoost","Traces/DogFeed","Traces/Escaper"],"tags":["ios","boost-camp"],"content":"\nFruit Card Game\nOnBan\nStarBoost\nDogFeed\nEscaper\n"},"Traces/Boost-Camp":{"title":"Boost Camp","links":["Traces/Fruit-Card-Game","Traces/OnBan","Traces/StarBoost","Traces/DogFeed","Traces/Escaper"],"tags":["ios","boost-camp"],"content":"\nFruit Card Game\nOnBan\nStarBoost\nDogFeed\nEscaper\n"},"Traces/Canvas-2":{"title":"Canvas","links":[],"tags":[],"content":"Canvas Application §\nStack: Archiving, CoreGraphics, MVC, NotificationCenter, SceneDelegate, UIKit, UserDefault, iOS\nTeam: 1인\n진행 기간: 2021/09/06 → 2021/09/17\nAbout: 사각형, 사진, 텍스트, 드로잉에 대해 오브젝트를 만들어 생성하는 캔버스 애플리케이션을 제작했습니다.\n개요 §\n\n사각형, 사진, 텍스트, 드로잉에 대해 오브젝트를 만들어 생성하는 캔버스 애플리케이션을 제작했습니다.\n다형성을 기반으로 동작하며, Container ViewController를 각 섹션별로 사용하고 Delegate로 통신하도록 설계하였습니다.\nModel의 변화가 발생할 때마다 각 ViewController로 post 메시지를 보내고, 이를 반영하는 구조를 제작하여 결합도를 낮추려 노력하였습니다.\n\n\n\n\n사용 개념 §\n\nDelegate\nNotificationCenter\nContainer View Controller\nScene Delegate\n"},"Traces/Canvas":{"title":"Canvas","links":[],"tags":[],"content":"Canvas Application §\nStack: Archiving, CoreGraphics, MVC, NotificationCenter, SceneDelegate, UIKit, UserDefault, iOS\nTeam: 1인\n진행 기간: 2021/09/06 → 2021/09/17\nAbout: 사각형, 사진, 텍스트, 드로잉에 대해 오브젝트를 만들어 생성하는 캔버스 애플리케이션을 제작했습니다.\n개요 §\n\n사각형, 사진, 텍스트, 드로잉에 대해 오브젝트를 만들어 생성하는 캔버스 애플리케이션을 제작했습니다.\n다형성을 기반으로 동작하며, Container ViewController를 각 섹션별로 사용하고 Delegate로 통신하도록 설계하였습니다.\nModel의 변화가 발생할 때마다 각 ViewController로 post 메시지를 보내고, 이를 반영하는 구조를 제작하여 결합도를 낮추려 노력하였습니다.\n\n\n\n\n사용 개념 §\n\nDelegate\nNotificationCenter\nContainer View Controller\nScene Delegate\n"},"Traces/Dance-Copyright-Dataset-2":{"title":"Dance Copyright Dataset","links":[],"tags":["trace","tensorflow"],"content":"\nOpenpose를 사용하여 동작을 추출, 그것을 기반으로 동작을 예측하고 분류하는 모델을 제작했다.\n\n\n2019.09~2019.12(3개월)\nOpencv, Numpy, Tensorflow, Openpose, Docker\nKeypoint 추출을 통해 동작 구조화, 춤 동작 분류 프로젝트\nDocker를 통해 Openpose 컨테이너를 구축 후 데이터 추출\n추출된 데이터를 기반으로 여러 사람의 동작을 반영할 수 있는 데이터 증대 알고리즘 구축\n군집화를 통해 동작에 대한 label 제작\nInception 모듈 사용 모델, LSTM을 사용하여 80%의 정확도를 갖는 모델 구현\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference §\n\nDance Archiving Through Openpose\n"},"Traces/Dance-Copyright-Dataset":{"title":"Dance Copyright Dataset","links":[],"tags":["trace","tensorflow"],"content":"\nOpenpose를 사용하여 동작을 추출, 그것을 기반으로 동작을 예측하고 분류하는 모델을 제작했다.\n\n\n2019.09~2019.12(3개월)\nOpencv, Numpy, Tensorflow, Openpose, Docker\nKeypoint 추출을 통해 동작 구조화, 춤 동작 분류 프로젝트\nDocker를 통해 Openpose 컨테이너를 구축 후 데이터 추출\n추출된 데이터를 기반으로 여러 사람의 동작을 반영할 수 있는 데이터 증대 알고리즘 구축\n군집화를 통해 동작에 대한 label 제작\nInception 모듈 사용 모델, LSTM을 사용하여 80%의 정확도를 갖는 모델 구현\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference §\n\nDance Archiving Through Openpose\n"},"Traces/Data-Science-for-COVID-19-2":{"title":"Data Science for COVID-19","links":[],"tags":[],"content":"\nCOVID-19의 환자들에 대한 정보와 이동경로를 제공하는 데이터셋 제작 프로젝트이다.\n\n\nKAGGLE : Data Science for COVID-19 (DS4C)\nCORONAWHY : DS4C: Data Science for COVID-19 in South Korea\n2020.02~2020.12(10개월)\nbeautifulsoup\nDS4C - 국내 코로나19 감염자 및 동선 정보 정제 데이터셋을 제작하는 프로젝트\n경상 지역의 환자 데이터 업데이트와 경기 지역 동선 정보 크롤링 담당\n국내 언론 사이트에서 제공하는 데이터 제공 페이지로부터 동선 데이터를 크롤링\n환자 데이터의 경우 비식별화 조치 후 일련번호로 증상 업데이트\nKaggle Dataset 금메달\nNeuralPS 논문 Broader Impact\n\nProject §\n\n\n\n\n\n\n"},"Traces/Data-Science-for-COVID-19":{"title":"Data Science for COVID-19","links":[],"tags":[],"content":"\nCOVID-19의 환자들에 대한 정보와 이동경로를 제공하는 데이터셋 제작 프로젝트이다.\n\n\nKAGGLE : Data Science for COVID-19 (DS4C)\nCORONAWHY : DS4C: Data Science for COVID-19 in South Korea\n2020.02~2020.12(10개월)\nbeautifulsoup\nDS4C - 국내 코로나19 감염자 및 동선 정보 정제 데이터셋을 제작하는 프로젝트\n경상 지역의 환자 데이터 업데이트와 경기 지역 동선 정보 크롤링 담당\n국내 언론 사이트에서 제공하는 데이터 제공 페이지로부터 동선 데이터를 크롤링\n환자 데이터의 경우 비식별화 조치 후 일련번호로 증상 업데이트\nKaggle Dataset 금메달\nNeuralPS 논문 Broader Impact\n\nProject §\n\n\n\n\n\n\n"},"Traces/Deploy-to-AppStore":{"title":"Deploy to AppStore","links":[],"tags":["deployment","appstore","ios","boost-camp"],"content":"\n사용자에게 나의 상품을 내놓을 때, 얼마나 메타 데이터가 중요한지 생각해보는 계기였습니다.\n\n\n\n초기 배포 당시, 메타데이터를 제대로 작성하지 않아 유저가 해당 앱에 대한 정보를 알지 못한다는 의견을 받았습니다.\n또한 위치를 기반으로 사용자에게 근처 테마를 제안하는데, 이 부분을 위해 위치정보 동의를 얻는 과정에 요청 문구가 세세하지 않다는 지적을 받았습니다.\n\n\n\n저희는 또한번의 리젝을 받았습니다.\n사용자의 방탈출 기록을 추가할 때, 인증샷을 추가하는 기능이 있는데, 해당 사진 기록 자체가 다른 유저에게 보일 수 있는지에 대한 문의였습니다.\n\n이 경우, 사용자가 탈출한 정보는 사용자만이 볼 수 있기 때문에 넘어갈 수 있었습니다.\n\n\n또한 사용자가 생성한 콘텐츠 자체를 다른 유저들이 볼 수 있는 경우에 지적 재산권 이슈도 조심해야 한다는 점을 알 수 있었습니다.\n\n\n\n최종적으로 앱스토어에 v1.0을 런칭할 수 있었습니다.\n사용자의 입장에서 개발자의 입장으로 넘어가면서, 유저가 고려하지 못하는 데이터 이슈, 유해성 등 고려할 사항이 많다는 점을 배울 수 있었습니다.\n‎Escaper 방탈출\n"},"Traces/DogFeed-2":{"title":"DogFeed","links":[],"tags":["ios","boost-camp","firebase"],"content":"개밥줬어? §\nStack: Firebase, MVC, UIKit, iOS\nTeam: 팀 프로젝트\nRole: 개발\n진행 기간: 2021/09/23 → 2021/09/24\nAbout: 우리집 강아지 생존권을 확립하는 식사 여부 확인 애플리케이션\n개요 §\nGitHub - wansook0316/bookathon_G: 개밥줬어?\n기획의도 §\n\n개밥줬어? 모두가 바쁜 요즘 우리집 강아지 밥은 누가 챙겨?!\n이제 편하게 앱으로 확인하세요\n\n✏ 한줄소개 §\n\n우리집 강아지 생존권을 확립하는 식사 여부 확인 애플리케이션\n\n💻 서비스 §\n\n가족 구성원이 강아지 밥을 주었는지 직관적으로 파악할 수 있다.\n\n누가?\n무엇을?\n\n\n가족 구성원간의 채팅기능 추가로 간단한 정보도 공유할 수 있다.\n\n동작 화면 §\n\n가족 만들기\n\n\n사용자 등록하기\n\n사용자 이름과 사용자 역할을 요청하였습니다. 사용자 역할은 CollectionView를 띄워서 6가지 이모지 중 하나를 선택할 수 있게 하였습니다.\n\n\n강아지 등록하기\n\n강아지 사진과 강아지 이름을 요청하였습니다. 강아지 사진 같은 경우엔 picker에서 선택하게 되면 FirebaseStorage에 저장하고 URL을 요청해서 FireStore에 저장합니다.\n\n\n\n\n방 참가하기\n\n\n가족 이름을 입력하면 이미 등록된 가족으로 이동하게 됩니다.\n\n\n자동로그인\n\n\n이미 로그인한 적이 있다면? 자동로그인을 하는게 사용자 경험에 더 좋겟죠?\nUserDefault라는 이미 iOS에서 제공해주는 전역 객체를 사용하였습니다.\n\n\n밥 주기\n\n\n밥은 CollectionView 에 있는 버튼을 클릭하면 사용자 역할처럼 6가지 이모지 중 하나를 선택할 수 있게 하였습니다.\n기본적으로 4개의 밥만 시간과 이모지만 보이게 해두었고, 자세한 정보 혹은 추가 정보는 더보기 창을 눌러서 확인할 수 있습니다.\n\n\n더보기\n\n\n더보기에서는 TableView를 이용하였습니다. 사용자 이모지 / 준 먹이 텍스트 정보 / 시간을 확인할 수 있습니다.\n\n\n채팅하기\n\n\n채팅은 ChatViewController에 Firestore 스냅샷을 달아 채팅데이터를 실시간 업데이트 하고 받아올 수 있도록 구현했습니다.\n채팅 데이터 조회, 추가 하면 스냅샷이 업데이트된 변경사항을 받아와 뷰컨트롤러에 보여줄 수 있습니다.\n\n\n\n맡은 역할 §\n\n메인화면에 진입하기 전, 가족, 강아지, 사용자 등록을 하는 진입 부분 담당\nTextField를 기반으로 수정을 감지하여 다음 버튼의 enable 여부 점검\n이미 존재하는 가족이름 인 경우 가족 엔티티를 생성할 수 없고 Alert를 보여줌\nImage Picker로 부터 가져온 사진을 Firebase Storage에 업로드 하고, 데이터 베이스에 url로 저장하여 디바이스 메모리 관리\nCustom View Controller를 사용하여 사용자 화면을 클릭했을 때, 이미 제작된 사용자 얼굴을 클릭할 수 있도록 수정\n\n문제 상황과 해결 §\n\n협업 과정에서 문제를 많이 겪어, 팀원 별로 다른 화면을 기준으로 작업을 했습니다.\n각각이 폴더를 기준으로 스토리보드, swift 파일등을 만들어서 작업한 뒤 연결할 때만 해당 스토리보드에서 생성하여 연결해주었습니다.\nFirebase 연동이 처음이라 많이 헤맸지만 사용법을 익힐 수 있었습니다.\n"},"Traces/DogFeed":{"title":"DogFeed","links":[],"tags":["ios","boost-camp","firebase"],"content":"개밥줬어? §\nStack: Firebase, MVC, UIKit, iOS\nTeam: 팀 프로젝트\nRole: 개발\n진행 기간: 2021/09/23 → 2021/09/24\nAbout: 우리집 강아지 생존권을 확립하는 식사 여부 확인 애플리케이션\n개요 §\nGitHub - wansook0316/bookathon_G: 개밥줬어?\n기획의도 §\n\n개밥줬어? 모두가 바쁜 요즘 우리집 강아지 밥은 누가 챙겨?!\n이제 편하게 앱으로 확인하세요\n\n✏ 한줄소개 §\n\n우리집 강아지 생존권을 확립하는 식사 여부 확인 애플리케이션\n\n💻 서비스 §\n\n가족 구성원이 강아지 밥을 주었는지 직관적으로 파악할 수 있다.\n\n누가?\n무엇을?\n\n\n가족 구성원간의 채팅기능 추가로 간단한 정보도 공유할 수 있다.\n\n동작 화면 §\n\n가족 만들기\n\n\n사용자 등록하기\n\n사용자 이름과 사용자 역할을 요청하였습니다. 사용자 역할은 CollectionView를 띄워서 6가지 이모지 중 하나를 선택할 수 있게 하였습니다.\n\n\n강아지 등록하기\n\n강아지 사진과 강아지 이름을 요청하였습니다. 강아지 사진 같은 경우엔 picker에서 선택하게 되면 FirebaseStorage에 저장하고 URL을 요청해서 FireStore에 저장합니다.\n\n\n\n\n방 참가하기\n\n\n가족 이름을 입력하면 이미 등록된 가족으로 이동하게 됩니다.\n\n\n자동로그인\n\n\n이미 로그인한 적이 있다면? 자동로그인을 하는게 사용자 경험에 더 좋겟죠?\nUserDefault라는 이미 iOS에서 제공해주는 전역 객체를 사용하였습니다.\n\n\n밥 주기\n\n\n밥은 CollectionView 에 있는 버튼을 클릭하면 사용자 역할처럼 6가지 이모지 중 하나를 선택할 수 있게 하였습니다.\n기본적으로 4개의 밥만 시간과 이모지만 보이게 해두었고, 자세한 정보 혹은 추가 정보는 더보기 창을 눌러서 확인할 수 있습니다.\n\n\n더보기\n\n\n더보기에서는 TableView를 이용하였습니다. 사용자 이모지 / 준 먹이 텍스트 정보 / 시간을 확인할 수 있습니다.\n\n\n채팅하기\n\n\n채팅은 ChatViewController에 Firestore 스냅샷을 달아 채팅데이터를 실시간 업데이트 하고 받아올 수 있도록 구현했습니다.\n채팅 데이터 조회, 추가 하면 스냅샷이 업데이트된 변경사항을 받아와 뷰컨트롤러에 보여줄 수 있습니다.\n\n\n\n맡은 역할 §\n\n메인화면에 진입하기 전, 가족, 강아지, 사용자 등록을 하는 진입 부분 담당\nTextField를 기반으로 수정을 감지하여 다음 버튼의 enable 여부 점검\n이미 존재하는 가족이름 인 경우 가족 엔티티를 생성할 수 없고 Alert를 보여줌\nImage Picker로 부터 가져온 사진을 Firebase Storage에 업로드 하고, 데이터 베이스에 url로 저장하여 디바이스 메모리 관리\nCustom View Controller를 사용하여 사용자 화면을 클릭했을 때, 이미 제작된 사용자 얼굴을 클릭할 수 있도록 수정\n\n문제 상황과 해결 §\n\n협업 과정에서 문제를 많이 겪어, 팀원 별로 다른 화면을 기준으로 작업을 했습니다.\n각각이 폴더를 기준으로 스토리보드, swift 파일등을 만들어서 작업한 뒤 연결할 때만 해당 스토리보드에서 생성하여 연결해주었습니다.\nFirebase 연동이 처음이라 많이 헤맸지만 사용법을 익힐 수 있었습니다.\n"},"Traces/Escaper-Keynote":{"title":"Escaper Keynote","links":[],"tags":[],"content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"Traces/Escaper":{"title":"Escaper","links":["Traces/Escaper-Keynote","Traces/About-External-Library","Traces/About-Storyboard","Traces/About-Architecture","Traces/About-Directory","Traces/About-Dependency-Injection","Traces/Guarantee-Order-of-Image-by-cache","Traces/Implement-ImageCache","Traces/Deploy-to-AppStore"],"tags":["boost-camp","cache","firebase","mvvm"],"content":"앱 설명 §\n\n방탈출, 이제는 기록하고 경쟁하세요!\n\n\n\n방탈출 카페 위치 조회, 방탈출 정보 기록 및 랭크 확인 기능 제공\nAppStore: ‎Escaper 방탈출\nEscaper Keynote\n소개자료\nWIKI\n\n사용 스킬 §\n\nMVVM\nFirebase\nCoreLocation\nMapKit\n\n경험 한 것 §\n\n사용자의 데이터 과금을 우려하여 ImageCache를 직접 구현하여 사용하였습니다.\nFirebase SDK를 제외한 외부 라이브러리를 사용하지 않고 구현하였습니다.\nMVVM 아키텍쳐를 제안하고, 라이브러리 없이 뷰 바인딩을 처리하였습니다.\n사용자의 RecordCard 기록을 추가하는 화면의 비즈니스 로직을 담당하였습니다.\n테마별 방정보를 가져오는 Home 화면의 비즈니스 로직과 화면을 담당하였습니다.\n지도 화면에서 검색 후, 업체의 상세 화면을 담당하였습니다.\n\n고민과 문제해결 §\n\nAbout External Library\nAbout Storyboard\nAbout Architecture\nAbout Directory\nAbout Dependency Injection\nGuarantee Order of Image by cache\nImplement ImageCache\nDeploy to AppStore\n\nGithub §\n\nhttps://github.com/wansook0316/iOS05-Escaper\nHome · boostcampwm-2021/iOS05-Escaper Wiki\n"},"Traces/Face-Tracker-2":{"title":"Face Tracker","links":[],"tags":[],"content":"Description §\n\n개선된 DeepSORT를 이용한 실시간 다중 얼굴 추적 (한국정보과학회)\n\nDeepSort 알고리즘을 개선하여 여러 사람이 등장하는 동영상에서 얼굴을 추적하는 기능을 제작하였습니다.\nIntroduction §\nYolov3와 Arcface 를 통한 얼굴 탐지 및 feature extration을 통해 원하는 사진을 기반으로 영상에서 인물을 찾아 추적하는 모델을 제작하였습니다.\n\n동작 영상 §\n\n\n\n\n\n\n\n\n프로젝트 시작 배경 §\n\n사람의 얼굴을 지속적으로 추적하는 것은 미래 사회에서 상당히 중요한 기술로 자리매김할 것입니다. 상점에 있는 전광판, 키오스크 등에 장치할 경우, 디스플레이를 쳐다보고 있는 사람 수, 보는 시간 등을 수치적으로 산출할 수 있습니다. 이러한 방법은 광고주가 광고 캠페인을 최적화하는데 사용할 수 있습니다.\n또한 실내 환경의 상태를 추적하는데도 사용이 가능합니다. 공장/사무실과 같은 공간에서 현재 근무하고 있는 사람의 수를 측정하고, 각각의 사람을 인지할 수 있다면, 출근 명부와 같은 단순한 작업을 자동화할 수 있습니다. 또한 자동차와 같은 실내 공간에서 탑승객의 상태를 인지하는데 사용할 수 있습니다. 특히 운전자가 어떤 상태로 주행을 하고 있는지 알 수 있다면, 이는 주행의 안전을 보조하는 하나의 장치로 사용이 가능할 것으로 보입니다.\n\n주요 내용 §\n\nYolov3 구조를 기반으로WIDERFACE dataset을 사용하여 학습한다.\n제작된 네트워크를 기반으로 실시간 Detection알고리즘을 제작한다.\nDeepsort 구조를 개선하여, 얼굴 추적에 맞도록 Feature Descriptor를 Arcface로 대체하여 얼굴에 맞는 feature로 추적 알고리즘을 제작한다. 이 때 임의의 사람에 대해서 고유한 id를 주어 추적하도록 한다.\n정적인 사람 이미지에 대해서 Feature 정보를 추출하고, 이를 기반으로 영상에 존재하는 사람을 추적하는 알고리즘을 개발한다. 알고있는 사람의 얼굴 정보가 주어진다면, 해당 사람을 계속해서 추적하도록 한다.\n\n변경 사항 §\n\n실시간 구조 설계\nDeep sort 알고리즘은 탐지된 물체에 대해 추적만을 진행했기 때문에, 이를 실시간 화면을 기반으로 적용하기 위해서는 추가적인 조치가 필요했다. Opencv와 tensorflow를 기반으로 기존의 Deep sort Repository를 fork하여 실시간으로 영상에 대해 처리가 가능하도록 구조를 변경하였다.\nYolov3 사용 및 Feature Descriptor 변경\n\nYolov3 사용 : 문제를 종합해본 결과, Detector의 성능이 떨어지는 것이 가장 중요한 문제라고 판단하였다. 이에 Yolov3를 사용하여 얼굴에 국한된 훈련 모델을 제작하였다. 학습 데이터로는 WIDER FACE(A Face Detection Benchmark)를 사용하였다. WIDER FACE 데이터 셋은 얼굴 검출 벤치마크 데이터 셋으로서, 총 32,203개의 이미지를 가지고 있으며, 약 40만개의 얼굴 label로 이루어져 있다. 또한 이 label은 다양한 스케일을 반영하고 있기 때문에, 영상에서 발생하는 다양한 Scale을 반영하기 충분하다고 판단했다.\nArcface를 사용한 Feature Descriptor 변경 : 기존 Deep sort는 보행자를 기반으로 해서, Track matching을 진행했기 때문에, FeatureDescriptor의 Input shape이 2:1 비율로 제작되어 있었다. 하지만 실제로 Face Detection의 결과는 사람의 얼굴이기 때문에 정사각형에 가깝다. 또한 기존의 Feature Descriptor의 경우 보행자 이미지를 기반으로 훈련하여 현재 과업에 맞지 않아 실제 테스트를 진행했을 때, id 매칭에 있어서 실패하는 모습을 보였다. 그렇기 때문에 이 부분을 변경하여 실험을 진행하였다.\n\n\nFace Matching 알고리즘 제작\n\n\nFACE DB 제작 : 영상속에 등장하는 사람을 인식할 수 있도록 사전에 라벨링된 사람의 이미지를 바탕으로 Feature를 추출하였다. 이 때, Feature 추출기로 얼굴에 최적화된 Arcface 추출기를 사용하였으며, 해당 데이터는 hash 자료형을 기반으로 메모리에 저장되어 있다.\n\n\nFACE Matching Algorithm 제작 : 위에서 제작된 Face DB를 바탕으로 런타임에 지속적으로 탐지된 얼굴에 대해 인식을 시도한다. 기존의 Track 객체에는 이전 프레임동안 추적해온 얼굴에 대한 Feature 정보들이 저장되어 있다. 이를 기반으로 Face DB에 있는 사람 얼굴 정보와 Cosine similarity를 통해 가장 작은 값을 해당 Track 객체의 얼굴이라고 판단한다. 이 때, 특정 Threshold(0.68)보다 큰 값일 경우 잘못 탐지했다고 판단하고, id를 배정하지 않는다. 해당 Threshold는 Arcface의 Cosine similarity threshold 실험값을 반영하였다.\n\n\n\n\nMatching Algorithm §\n\n매칭을 하는데 있어서 중요하게 생각한 것은 세가지입니다.\n\n얼굴의 Feature 정보를 반영할 수 있어야 한다.\n가장 최근에 탐지된 Track 객체부터 배정하도록 한다.\nFace DB에 정보가 있다면, 가장 유사한 사람에게 이를 배정한다.\n\n이를 위해서는 Track 객체가 가지는 attibute부터 이해할 필요가 있습니다.\nTrack §\nclass Track:\n\ttrack_id : 트랙의 고유한 id\n\tmax_age : 트랙이 탐지되지 않았을 때, 사라지기까지 대기하는 시간\n\tfeature : 해당 트랙이 탐지한 얼굴에 대한 Feature를 누적하여 저장하는 배열\n\thits : 트랙이 초기화된 이후로, 실제로 추적가능한 객체임을 판단하기 위해 성공해야하는 횟수의 하한값\n\ttime_since_update : 측정이 반영된 이후로 부터 현재까지의 프레임 수\n\tface_name : Face_db가 있을 경우 배정되는 사람의 이름\n\nMatching cascade와 Face Assignment를 반영하기 위해, Track 객체는 위와 같이 구성되어 있습니다. 이제 아래에 서술한 알고리즘에서 time_since_update를 순차적으로 반영하여 Matching cascade를 사용할 수 있도록 하였습니다. 또한 face_name의 경우 배정되는 얼굴 str를 주기 위해서 추가하였습니다. feature의 경우, 얼굴 특징을 지속적으로 저장할 수 있도록 하기 위해 기존 논문에서 변화를 주었습니다.\n아래에서는 위 과업을 달성하기 위해 변경한 두가지 알고리즘, Matching Cascade와 Face Alignment를 설명하겠습니다.\nMatching Cascade §\nMatching Cascade는 Matching의 정확도를 높히기 위해, 가장 최근에 객체의 업데이트가 이루어진 객체부터 매칭을 순차적으로 시도하는 것입니다. 예를 들어 현재 프레임에 대해 매칭을 수행한다면, 살아있는 객체중, 이전 프레임에서 매칭이 수행된 객체부터 현재 탐지된 물체를 배정하는 것이 보다 옳은 매칭을 가능하게 할 수 있습니다. 이 때, 기존의 논문과는 달리, Arcface를 사용한 Feature를 지속적으로 저장하도록 하여 해당 과업에 맞는 목적을 이룰 수 있도록 하였습니다.\nfor level in range(cascade_depth): # 보통 Track 객체의 max_age만큼\n      if len(unmatched_detections) == 0:  # 모든 detection에 대해 매칭했다면 종료\n          break\n \n      track_indices_l = [ # 현재 level의 객체(즉 가장 최근에 업데이트된 Track 객체)를 가져옴\n          k for k in track_indices\n          if tracks[k].time_since_update == 1 + level\n      ]\n      if len(track_indices_l) == 0: # 현재 level의 객체가 없다면 다음 level 시도\n          continue\n \n\t\t\t# hungrian 알고리즘을 사용하여 현재 level에서 최적의 Matching 시도\n      matches_l, _, unmatched_detections = \\\n          min_cost_matching(\n              distance_metric, max_distance, tracks, detections,\n              track_indices_l, unmatched_detections)\n      matches += matches_l\n  unmatched_tracks = list(set(track_indices) - set(k for k, _ in matches))\n해당 알고리즘에서는 Matching cascade를 통하여 모든 Track 객체에 대해 순차적으로 Matching을 시도하여, 매칭된 Track객체를 구합니다. 또한 이러한 Cascade 방법을 사용했음에도 max_threshold를 넘지 못하는 객체의 경우, unmatched_track으로 판정됩니다. 이러한 unmatched_track의 경우, 일반적으로 사용하는 IoU 매칭을 한번에 연산하여 추가적인 가능성을 한번더 줄여주었습니다.\nFace Assignment §\n이렇게 매칭된 Track들을 계산한 후에는, 해당 Track 객체들이 가진 Feature 정보를 기반으로 Face DB에 있는 인물의 얼굴 Feature와의 비교를 통해 추가적으로 얼굴을 배정해주게 됩니다. 이 때, ResNet50을 백본으로 학습된 Arc_res50의 Pretrained model을 사용하여 Feature를 추출하였습니다.\nface_db[person_name] = dict({&quot;used&quot;: False, &quot;db&quot;: name_db})\n보통의 영상에서 특정 프레임의 사람은 1명만 나오기 때문에, 이러한점을 반영하여 구조를 제작하였습니다. “used”의 변수를 조작하여, 탐지를 했을 때, 가장 높은 유사도를 가지는 사람을 배정하고, 이후에 다른 객체가 같은 사람이라고 판정했을 때, 배정하지 않도록 하였습니다.\nfor i in face_db:\n    for track_idx, detection_idx in matches: # Cascade를 통해 매칭된 Track 객체에 대해\n        self.tracks[track_idx].update( # 먼저 Kalman filter를 통해 다음 위치를 예측함\n            self.kf, detections[detection_idx])\n        \n        if self.tracks[track_idx].get_face_name() == &quot;&quot;: # 현재 얼굴을 배정받지 못한 Track 객체라면 배정\n            self.tracks[track_idx].find_face_name(face_db, max_face_threshold)\n \n    for track_idx in unmatched_tracks: # 매칭에 실패한 Track 객체에 대해서는 얼굴 배정을 해제한다.\n        self.tracks[track_idx].mark_missed(face_db) \n    for detection_idx in unmatched_detections: # Track 객체를 초기화할 때, 한번 얼굴 배정을 시도한다.\n        self._initiate_track(detections[detection_idx], face_db, max_face_threshold)\n    self.tracks = [t for t in self.tracks if not t.is_deleted()]\n이미 배정된 사람에 대해 face_name을 변하지 않도록 하여, id switching이 많이 발생하지 않도록 하였습니다. 다만 이렇게 할 경우, 첫 배정때 사람의 이름을 잘못 배정할 경우, 정확도가 떨어질 수 있다는 단점이 존재합니다. 하지만 Track의 경향성을 유지할 수 있기 때문에 이러한 방법을 채택하였습니다.\nResult §\nTracking Persons-of-Interests via Adaptive Discriminative Features(ECCV 2016에서 제작한 Music Video Dataset을 기반으로 성능 테스트를 진행했다. 제작한 모델은 두 가지 기능이 가능하다. 기존 사람 사진에 대한 정보가 없을 때, 영상을 기반으로 고유한 id를 추출하여 추적을 하는 방법, 그리고 Face DB가 주어졌을 때 이를 매칭한 Face id를 매칭하는 방법이다. 이 두가지 방법을 적용하여 테스트를 진행했다.\n\n이전 연구 결과 §\n|IDF1|IDP|IDR|Rcll|Prcn|FP|FN|IDs|FM|MOTA|MOTP|FAR|\n|:—:|:-:|:-:|:—:|:—:|::|::|:-:|::|:—:|:—:|:-:|\n|-|-|-|70%|89%|-|-|1152|-|61.1%|65.7%|0.2|\nFace DB없이 고유 ID를 배정한 경우 §\n|IDF1|IDP|IDR|Rcll|Prcn|FP|FN|IDs|FM|MOTA|MOTP|FAR|\n|:—:|:-:|:-:|:—:|:—:|::|::|:-:|::|:—:|:—:|:-:|\n|6.9%|6.98%|6.97%|80.7%|80.87%|2421|2261|348|589|57.4%|68.7%|0.34|\nFace DB를 활용하여 인물을 배정을 우선시 한 경우 §\n|IDF1|IDP|IDR|Rcll|Prcn|FP|FN|IDs|FM|MOTA|MOTP|FAR|\n|:—:|:-:|:-:|:—:|:—:|::|::|:-:|::|:—:|:—:|:-:|\n|52.6%|60.1%|51.95%|79.35%|81.84%|2220|2434|201|603|59.01%|67.2%|0.32|\n추적의 성능을 나타내는 MOTA와 MOTP가 약 60%의 성능을 달성하는 모습을 보였다. 또한 Face DB에서, 등장하는 인물에 대한 사전 정보를 통해 ID를 추출해본 결과, ID에 관련된 지표(IDF1, IDP, IDR) 역시 좋은 결과를 만들었다. 또한 ids에서 기존 보다 좋은 성능을 가진다. 하지만 MOTA에 있어서 FN, FP가 많아 좋은 성능을 가지지 못했다.\n결론 §\n주요 특징은 크게 세 가지로 구분된다.\n\n먼저 임의의 사람에 대해 추적이 가능하다. 영상에 몇명의 사람이 존재하는지 모르더라도 등장하는 인물에 대해 고유한 id를 배정할 수 있다.\n두번째로 가려진 경우에도 적은 ID switching를 가진 상태로 연속적인 추적이 가능하다. 하나의 Track이 얼굴을 탐지한 상태일 때, 이 얼굴이 가려진 경우, 30frame 내에는 해당 Track 객체가 메모리에 존재한 상태로 만들어, 만약 30초 내에 재등장한다면 해당 Track id를 배정함으로써 문제를 어느정도 해결했다.\n마지막으로 이미 사람에 대한 정보를 가지고 있다면, 이 정보를 바탕으로 해당 사람을 찾아낼 수 있다. 만약 인물 사진을 가지고 있을 경우, 이 정보를 바탕으로 Feature를 생산하고, 가장 유사한 사람과 매칭할 수 있다.\n\nEnvironment Setting §\n\npython 3.7\ntensorflow 2.4.1\ncuda 11.2\ncudnn 8.0.5\nGPU : RTX 3080\nCPU : AMD Ryzen 7 5800X 8-Core Processor\n\n추가적으로 사용한 라이브러리는 아래 파일을 통해 설치할 수 있습니다.\n$ pip install requirement.txt\nIf you want Evaluation §\n여기에서 가중치 파일을 받아 ./ 최상위 경로에 압축을 풀어주세요.\nDownload Music Video Dataset §\n여기에서 비디오, ground truth 파일을 받아서 최상위 경로에 압축을 풀어주세요. 해당 데이터셋은  Tracking Persons-of-Interests via Adaptive Discriminative Features(ECCV 2016)에서 가져왔습니다.\nConvert GT xml file to txt §\nground truth 파일을 tracking evaluation을 위해 변환해주는 과정을 거칩니다.\npython xml2txt.py \\\n    --gt_path ./resources/gt/T-ara_gt.xml \\\n    --gt_file_path ./resources/gt/T-ara_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/GirlsAloud_gt.xml \\\n    --gt_file_path ./resources/gt/GirlsAloud_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/Darling_gt.xml \\\n    --gt_file_path ./resources/gt/Darling_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/Westlife_gt.xml \\\n    --gt_file_path ./resources/gt/Westlife_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/BrunoMars_gt.xml \\\n    --gt_file_path ./resources/gt/BrunoMars_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/HelloBubble_gt.xml \\\n    --gt_file_path ./resources/gt/HelloBubble_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/Apink_gt.xml \\\n    --gt_file_path ./resources/gt/Apink_gt.txt\n\nExtract Reference Image §\n다음으로 해당 데이터셋에서 gt에 맞는 얼굴을 추출하여 face db에 반영하기 위해 아래의 코드를 동작시킵니다.\npython generate_face.py \\\n    --gt_file_path ./resources/gt/T-ara_gt.txt \\\n    --video_file_path ./resources/video/in/T-ara.mov \\\n    --face_data_path ./resources/database/T-ara\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/GirlsAloud_gt.txt \\\n    --video_file_path ./resources/video/in/GirlsAloud.mp4 \\\n    --face_data_path ./resources/database/GirlsAloud\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/Darling_gt.txt \\\n    --video_file_path ./resources/video/in/Darling.mp4 \\\n    --face_data_path ./resources/database/Darling\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/Westlife_gt.txt \\\n    --video_file_path ./resources/video/in/Westlife.mp4 \\\n    --face_data_path ./resources/database/Westlife\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/BrunoMars_gt.txt \\\n    --video_file_path ./resources/video/in/BrunoMars.mp4 \\\n    --face_data_path ./resources/database/BrunoMars\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/HelloBubble_gt.txt \\\n    --video_file_path ./resources/video/in/HelloBubble.mp4 \\\n    --face_data_path ./resources/database/HelloBubble\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/Apink_gt.txt \\\n    --video_file_path ./resources/video/in/Apink.mp4 \\\n    --face_data_path ./resources/database/Apink\n\nLet’s Tracking §\n이제 모든 준비가 완료되었습니다. 비디오에 대해서 tracking을 진행합니다.\npython object_tracker.py \\\n    --video ./resources/video/in/T-ara.mov \\\n    --database ./resources/database/T-ara \\\n    --output ./resources/video/out/T-ara.mp4 \\\n    --eval ./resources/gt/T-ara_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/BrunoMars.mp4 \\\n    --database ./resources/database/BrunoMars \\\n    --output ./resources/video/out/BrunoMars.mp4 \\\n    --eval ./resources/gt/BrunoMars_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/Darling.mp4 \\\n    --database ./resources/database/Darling \\\n    --output ./resources/video/out/Darling.mp4 \\\n    --eval ./resources/gt/Darling_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/GirlsAloud.mp4 \\\n    --database ./resources/database/GirlsAloud \\\n    --output ./resources/video/out/GirlsAloud.mp4 \\\n    --eval ./resources/gt/GirlsAloud_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/HelloBubble.mp4 \\\n    --database ./resources/database/HelloBubble \\\n    --output ./resources/video/out/HelloBubble.mp4 \\\n    --eval ./resources/gt/HelloBubble_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/Westlife.mp4 \\\n    --database ./resources/database/Westlife \\\n    --output ./resources/video/out/Westlife.mp4 \\\n    --eval ./resources/gt/Westlife_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/Apink.mp4 \\\n    --database ./resources/database/Apink \\\n    --output ./resources/video/out/Apink.mp4 \\\n    --eval ./resources/gt/Apink_pred.txt\n\nEvaluation §\n이제 생성된 tracking file을 가지고 평가를 진행합니다.\npython evaluation.py \\\n    --gt_file_path ./resources/gt/T-ara_gt.txt \\\n    --pred_file_path ./resources/gt/T-ara_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/GirlsAloud_gt.txt \\\n    --pred_file_path ./resources/gt/GirlsAloud_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/Darling_gt.txt \\\n    --pred_file_path ./resources/gt/Darling_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/Westlife_gt.txt \\\n    --pred_file_path ./resources/gt/Westlife_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/BrunoMars_gt.txt \\\n    --pred_file_path ./resources/gt/BrunoMars_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/HelloBubble_gt.txt \\\n    --pred_file_path ./resources/gt/HelloBubble_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/Apink_gt.txt \\\n    --pred_file_path ./resources/gt/Apink_pred.txt\n\nReference §\n\ndeepface\nDeep SORT\nYoloV3 Implemented in TensorFlow 2.0\nYOLOFace\nTracking Persons-of-Interests via Adaptive Discriminative Features(ECCV 2016)\nSimple Online and Realtime Tracking with a Deep Association Metric(IEEE 2016)\nArcFace: Additive Angular Margin Loss for Deep Face Recognition\nMultiFaceTrackerUsingDeepsort\n"},"Traces/Face-Tracker":{"title":"Face Tracker","links":[],"tags":[],"content":"Description §\n\n개선된 DeepSORT를 이용한 실시간 다중 얼굴 추적 (한국정보과학회)\n\nDeepSort 알고리즘을 개선하여 여러 사람이 등장하는 동영상에서 얼굴을 추적하는 기능을 제작하였습니다.\nIntroduction §\nYolov3와 Arcface 를 통한 얼굴 탐지 및 feature extration을 통해 원하는 사진을 기반으로 영상에서 인물을 찾아 추적하는 모델을 제작하였습니다.\n\n동작 영상 §\n\n\n\n\n\n\n\n\n프로젝트 시작 배경 §\n\n사람의 얼굴을 지속적으로 추적하는 것은 미래 사회에서 상당히 중요한 기술로 자리매김할 것입니다. 상점에 있는 전광판, 키오스크 등에 장치할 경우, 디스플레이를 쳐다보고 있는 사람 수, 보는 시간 등을 수치적으로 산출할 수 있습니다. 이러한 방법은 광고주가 광고 캠페인을 최적화하는데 사용할 수 있습니다.\n또한 실내 환경의 상태를 추적하는데도 사용이 가능합니다. 공장/사무실과 같은 공간에서 현재 근무하고 있는 사람의 수를 측정하고, 각각의 사람을 인지할 수 있다면, 출근 명부와 같은 단순한 작업을 자동화할 수 있습니다. 또한 자동차와 같은 실내 공간에서 탑승객의 상태를 인지하는데 사용할 수 있습니다. 특히 운전자가 어떤 상태로 주행을 하고 있는지 알 수 있다면, 이는 주행의 안전을 보조하는 하나의 장치로 사용이 가능할 것으로 보입니다.\n\n주요 내용 §\n\nYolov3 구조를 기반으로WIDERFACE dataset을 사용하여 학습한다.\n제작된 네트워크를 기반으로 실시간 Detection알고리즘을 제작한다.\nDeepsort 구조를 개선하여, 얼굴 추적에 맞도록 Feature Descriptor를 Arcface로 대체하여 얼굴에 맞는 feature로 추적 알고리즘을 제작한다. 이 때 임의의 사람에 대해서 고유한 id를 주어 추적하도록 한다.\n정적인 사람 이미지에 대해서 Feature 정보를 추출하고, 이를 기반으로 영상에 존재하는 사람을 추적하는 알고리즘을 개발한다. 알고있는 사람의 얼굴 정보가 주어진다면, 해당 사람을 계속해서 추적하도록 한다.\n\n변경 사항 §\n\n실시간 구조 설계\nDeep sort 알고리즘은 탐지된 물체에 대해 추적만을 진행했기 때문에, 이를 실시간 화면을 기반으로 적용하기 위해서는 추가적인 조치가 필요했다. Opencv와 tensorflow를 기반으로 기존의 Deep sort Repository를 fork하여 실시간으로 영상에 대해 처리가 가능하도록 구조를 변경하였다.\nYolov3 사용 및 Feature Descriptor 변경\n\nYolov3 사용 : 문제를 종합해본 결과, Detector의 성능이 떨어지는 것이 가장 중요한 문제라고 판단하였다. 이에 Yolov3를 사용하여 얼굴에 국한된 훈련 모델을 제작하였다. 학습 데이터로는 WIDER FACE(A Face Detection Benchmark)를 사용하였다. WIDER FACE 데이터 셋은 얼굴 검출 벤치마크 데이터 셋으로서, 총 32,203개의 이미지를 가지고 있으며, 약 40만개의 얼굴 label로 이루어져 있다. 또한 이 label은 다양한 스케일을 반영하고 있기 때문에, 영상에서 발생하는 다양한 Scale을 반영하기 충분하다고 판단했다.\nArcface를 사용한 Feature Descriptor 변경 : 기존 Deep sort는 보행자를 기반으로 해서, Track matching을 진행했기 때문에, FeatureDescriptor의 Input shape이 2:1 비율로 제작되어 있었다. 하지만 실제로 Face Detection의 결과는 사람의 얼굴이기 때문에 정사각형에 가깝다. 또한 기존의 Feature Descriptor의 경우 보행자 이미지를 기반으로 훈련하여 현재 과업에 맞지 않아 실제 테스트를 진행했을 때, id 매칭에 있어서 실패하는 모습을 보였다. 그렇기 때문에 이 부분을 변경하여 실험을 진행하였다.\n\n\nFace Matching 알고리즘 제작\n\n\nFACE DB 제작 : 영상속에 등장하는 사람을 인식할 수 있도록 사전에 라벨링된 사람의 이미지를 바탕으로 Feature를 추출하였다. 이 때, Feature 추출기로 얼굴에 최적화된 Arcface 추출기를 사용하였으며, 해당 데이터는 hash 자료형을 기반으로 메모리에 저장되어 있다.\n\n\nFACE Matching Algorithm 제작 : 위에서 제작된 Face DB를 바탕으로 런타임에 지속적으로 탐지된 얼굴에 대해 인식을 시도한다. 기존의 Track 객체에는 이전 프레임동안 추적해온 얼굴에 대한 Feature 정보들이 저장되어 있다. 이를 기반으로 Face DB에 있는 사람 얼굴 정보와 Cosine similarity를 통해 가장 작은 값을 해당 Track 객체의 얼굴이라고 판단한다. 이 때, 특정 Threshold(0.68)보다 큰 값일 경우 잘못 탐지했다고 판단하고, id를 배정하지 않는다. 해당 Threshold는 Arcface의 Cosine similarity threshold 실험값을 반영하였다.\n\n\n\n\nMatching Algorithm §\n\n매칭을 하는데 있어서 중요하게 생각한 것은 세가지입니다.\n\n얼굴의 Feature 정보를 반영할 수 있어야 한다.\n가장 최근에 탐지된 Track 객체부터 배정하도록 한다.\nFace DB에 정보가 있다면, 가장 유사한 사람에게 이를 배정한다.\n\n이를 위해서는 Track 객체가 가지는 attibute부터 이해할 필요가 있습니다.\nTrack §\nclass Track:\n\ttrack_id : 트랙의 고유한 id\n\tmax_age : 트랙이 탐지되지 않았을 때, 사라지기까지 대기하는 시간\n\tfeature : 해당 트랙이 탐지한 얼굴에 대한 Feature를 누적하여 저장하는 배열\n\thits : 트랙이 초기화된 이후로, 실제로 추적가능한 객체임을 판단하기 위해 성공해야하는 횟수의 하한값\n\ttime_since_update : 측정이 반영된 이후로 부터 현재까지의 프레임 수\n\tface_name : Face_db가 있을 경우 배정되는 사람의 이름\n\nMatching cascade와 Face Assignment를 반영하기 위해, Track 객체는 위와 같이 구성되어 있습니다. 이제 아래에 서술한 알고리즘에서 time_since_update를 순차적으로 반영하여 Matching cascade를 사용할 수 있도록 하였습니다. 또한 face_name의 경우 배정되는 얼굴 str를 주기 위해서 추가하였습니다. feature의 경우, 얼굴 특징을 지속적으로 저장할 수 있도록 하기 위해 기존 논문에서 변화를 주었습니다.\n아래에서는 위 과업을 달성하기 위해 변경한 두가지 알고리즘, Matching Cascade와 Face Alignment를 설명하겠습니다.\nMatching Cascade §\nMatching Cascade는 Matching의 정확도를 높히기 위해, 가장 최근에 객체의 업데이트가 이루어진 객체부터 매칭을 순차적으로 시도하는 것입니다. 예를 들어 현재 프레임에 대해 매칭을 수행한다면, 살아있는 객체중, 이전 프레임에서 매칭이 수행된 객체부터 현재 탐지된 물체를 배정하는 것이 보다 옳은 매칭을 가능하게 할 수 있습니다. 이 때, 기존의 논문과는 달리, Arcface를 사용한 Feature를 지속적으로 저장하도록 하여 해당 과업에 맞는 목적을 이룰 수 있도록 하였습니다.\nfor level in range(cascade_depth): # 보통 Track 객체의 max_age만큼\n      if len(unmatched_detections) == 0:  # 모든 detection에 대해 매칭했다면 종료\n          break\n \n      track_indices_l = [ # 현재 level의 객체(즉 가장 최근에 업데이트된 Track 객체)를 가져옴\n          k for k in track_indices\n          if tracks[k].time_since_update == 1 + level\n      ]\n      if len(track_indices_l) == 0: # 현재 level의 객체가 없다면 다음 level 시도\n          continue\n \n\t\t\t# hungrian 알고리즘을 사용하여 현재 level에서 최적의 Matching 시도\n      matches_l, _, unmatched_detections = \\\n          min_cost_matching(\n              distance_metric, max_distance, tracks, detections,\n              track_indices_l, unmatched_detections)\n      matches += matches_l\n  unmatched_tracks = list(set(track_indices) - set(k for k, _ in matches))\n해당 알고리즘에서는 Matching cascade를 통하여 모든 Track 객체에 대해 순차적으로 Matching을 시도하여, 매칭된 Track객체를 구합니다. 또한 이러한 Cascade 방법을 사용했음에도 max_threshold를 넘지 못하는 객체의 경우, unmatched_track으로 판정됩니다. 이러한 unmatched_track의 경우, 일반적으로 사용하는 IoU 매칭을 한번에 연산하여 추가적인 가능성을 한번더 줄여주었습니다.\nFace Assignment §\n이렇게 매칭된 Track들을 계산한 후에는, 해당 Track 객체들이 가진 Feature 정보를 기반으로 Face DB에 있는 인물의 얼굴 Feature와의 비교를 통해 추가적으로 얼굴을 배정해주게 됩니다. 이 때, ResNet50을 백본으로 학습된 Arc_res50의 Pretrained model을 사용하여 Feature를 추출하였습니다.\nface_db[person_name] = dict({&quot;used&quot;: False, &quot;db&quot;: name_db})\n보통의 영상에서 특정 프레임의 사람은 1명만 나오기 때문에, 이러한점을 반영하여 구조를 제작하였습니다. “used”의 변수를 조작하여, 탐지를 했을 때, 가장 높은 유사도를 가지는 사람을 배정하고, 이후에 다른 객체가 같은 사람이라고 판정했을 때, 배정하지 않도록 하였습니다.\nfor i in face_db:\n    for track_idx, detection_idx in matches: # Cascade를 통해 매칭된 Track 객체에 대해\n        self.tracks[track_idx].update( # 먼저 Kalman filter를 통해 다음 위치를 예측함\n            self.kf, detections[detection_idx])\n        \n        if self.tracks[track_idx].get_face_name() == &quot;&quot;: # 현재 얼굴을 배정받지 못한 Track 객체라면 배정\n            self.tracks[track_idx].find_face_name(face_db, max_face_threshold)\n \n    for track_idx in unmatched_tracks: # 매칭에 실패한 Track 객체에 대해서는 얼굴 배정을 해제한다.\n        self.tracks[track_idx].mark_missed(face_db) \n    for detection_idx in unmatched_detections: # Track 객체를 초기화할 때, 한번 얼굴 배정을 시도한다.\n        self._initiate_track(detections[detection_idx], face_db, max_face_threshold)\n    self.tracks = [t for t in self.tracks if not t.is_deleted()]\n이미 배정된 사람에 대해 face_name을 변하지 않도록 하여, id switching이 많이 발생하지 않도록 하였습니다. 다만 이렇게 할 경우, 첫 배정때 사람의 이름을 잘못 배정할 경우, 정확도가 떨어질 수 있다는 단점이 존재합니다. 하지만 Track의 경향성을 유지할 수 있기 때문에 이러한 방법을 채택하였습니다.\nResult §\nTracking Persons-of-Interests via Adaptive Discriminative Features(ECCV 2016에서 제작한 Music Video Dataset을 기반으로 성능 테스트를 진행했다. 제작한 모델은 두 가지 기능이 가능하다. 기존 사람 사진에 대한 정보가 없을 때, 영상을 기반으로 고유한 id를 추출하여 추적을 하는 방법, 그리고 Face DB가 주어졌을 때 이를 매칭한 Face id를 매칭하는 방법이다. 이 두가지 방법을 적용하여 테스트를 진행했다.\n\n이전 연구 결과 §\n|IDF1|IDP|IDR|Rcll|Prcn|FP|FN|IDs|FM|MOTA|MOTP|FAR|\n|:—:|:-:|:-:|:—:|:—:|::|::|:-:|::|:—:|:—:|:-:|\n|-|-|-|70%|89%|-|-|1152|-|61.1%|65.7%|0.2|\nFace DB없이 고유 ID를 배정한 경우 §\n|IDF1|IDP|IDR|Rcll|Prcn|FP|FN|IDs|FM|MOTA|MOTP|FAR|\n|:—:|:-:|:-:|:—:|:—:|::|::|:-:|::|:—:|:—:|:-:|\n|6.9%|6.98%|6.97%|80.7%|80.87%|2421|2261|348|589|57.4%|68.7%|0.34|\nFace DB를 활용하여 인물을 배정을 우선시 한 경우 §\n|IDF1|IDP|IDR|Rcll|Prcn|FP|FN|IDs|FM|MOTA|MOTP|FAR|\n|:—:|:-:|:-:|:—:|:—:|::|::|:-:|::|:—:|:—:|:-:|\n|52.6%|60.1%|51.95%|79.35%|81.84%|2220|2434|201|603|59.01%|67.2%|0.32|\n추적의 성능을 나타내는 MOTA와 MOTP가 약 60%의 성능을 달성하는 모습을 보였다. 또한 Face DB에서, 등장하는 인물에 대한 사전 정보를 통해 ID를 추출해본 결과, ID에 관련된 지표(IDF1, IDP, IDR) 역시 좋은 결과를 만들었다. 또한 ids에서 기존 보다 좋은 성능을 가진다. 하지만 MOTA에 있어서 FN, FP가 많아 좋은 성능을 가지지 못했다.\n결론 §\n주요 특징은 크게 세 가지로 구분된다.\n\n먼저 임의의 사람에 대해 추적이 가능하다. 영상에 몇명의 사람이 존재하는지 모르더라도 등장하는 인물에 대해 고유한 id를 배정할 수 있다.\n두번째로 가려진 경우에도 적은 ID switching를 가진 상태로 연속적인 추적이 가능하다. 하나의 Track이 얼굴을 탐지한 상태일 때, 이 얼굴이 가려진 경우, 30frame 내에는 해당 Track 객체가 메모리에 존재한 상태로 만들어, 만약 30초 내에 재등장한다면 해당 Track id를 배정함으로써 문제를 어느정도 해결했다.\n마지막으로 이미 사람에 대한 정보를 가지고 있다면, 이 정보를 바탕으로 해당 사람을 찾아낼 수 있다. 만약 인물 사진을 가지고 있을 경우, 이 정보를 바탕으로 Feature를 생산하고, 가장 유사한 사람과 매칭할 수 있다.\n\nEnvironment Setting §\n\npython 3.7\ntensorflow 2.4.1\ncuda 11.2\ncudnn 8.0.5\nGPU : RTX 3080\nCPU : AMD Ryzen 7 5800X 8-Core Processor\n\n추가적으로 사용한 라이브러리는 아래 파일을 통해 설치할 수 있습니다.\n$ pip install requirement.txt\nIf you want Evaluation §\n여기에서 가중치 파일을 받아 ./ 최상위 경로에 압축을 풀어주세요.\nDownload Music Video Dataset §\n여기에서 비디오, ground truth 파일을 받아서 최상위 경로에 압축을 풀어주세요. 해당 데이터셋은  Tracking Persons-of-Interests via Adaptive Discriminative Features(ECCV 2016)에서 가져왔습니다.\nConvert GT xml file to txt §\nground truth 파일을 tracking evaluation을 위해 변환해주는 과정을 거칩니다.\npython xml2txt.py \\\n    --gt_path ./resources/gt/T-ara_gt.xml \\\n    --gt_file_path ./resources/gt/T-ara_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/GirlsAloud_gt.xml \\\n    --gt_file_path ./resources/gt/GirlsAloud_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/Darling_gt.xml \\\n    --gt_file_path ./resources/gt/Darling_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/Westlife_gt.xml \\\n    --gt_file_path ./resources/gt/Westlife_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/BrunoMars_gt.xml \\\n    --gt_file_path ./resources/gt/BrunoMars_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/HelloBubble_gt.xml \\\n    --gt_file_path ./resources/gt/HelloBubble_gt.txt\n\npython xml2txt.py \\\n    --gt_path ./resources/gt/Apink_gt.xml \\\n    --gt_file_path ./resources/gt/Apink_gt.txt\n\nExtract Reference Image §\n다음으로 해당 데이터셋에서 gt에 맞는 얼굴을 추출하여 face db에 반영하기 위해 아래의 코드를 동작시킵니다.\npython generate_face.py \\\n    --gt_file_path ./resources/gt/T-ara_gt.txt \\\n    --video_file_path ./resources/video/in/T-ara.mov \\\n    --face_data_path ./resources/database/T-ara\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/GirlsAloud_gt.txt \\\n    --video_file_path ./resources/video/in/GirlsAloud.mp4 \\\n    --face_data_path ./resources/database/GirlsAloud\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/Darling_gt.txt \\\n    --video_file_path ./resources/video/in/Darling.mp4 \\\n    --face_data_path ./resources/database/Darling\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/Westlife_gt.txt \\\n    --video_file_path ./resources/video/in/Westlife.mp4 \\\n    --face_data_path ./resources/database/Westlife\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/BrunoMars_gt.txt \\\n    --video_file_path ./resources/video/in/BrunoMars.mp4 \\\n    --face_data_path ./resources/database/BrunoMars\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/HelloBubble_gt.txt \\\n    --video_file_path ./resources/video/in/HelloBubble.mp4 \\\n    --face_data_path ./resources/database/HelloBubble\n\npython generate_face.py \\\n    --gt_file_path ./resources/gt/Apink_gt.txt \\\n    --video_file_path ./resources/video/in/Apink.mp4 \\\n    --face_data_path ./resources/database/Apink\n\nLet’s Tracking §\n이제 모든 준비가 완료되었습니다. 비디오에 대해서 tracking을 진행합니다.\npython object_tracker.py \\\n    --video ./resources/video/in/T-ara.mov \\\n    --database ./resources/database/T-ara \\\n    --output ./resources/video/out/T-ara.mp4 \\\n    --eval ./resources/gt/T-ara_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/BrunoMars.mp4 \\\n    --database ./resources/database/BrunoMars \\\n    --output ./resources/video/out/BrunoMars.mp4 \\\n    --eval ./resources/gt/BrunoMars_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/Darling.mp4 \\\n    --database ./resources/database/Darling \\\n    --output ./resources/video/out/Darling.mp4 \\\n    --eval ./resources/gt/Darling_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/GirlsAloud.mp4 \\\n    --database ./resources/database/GirlsAloud \\\n    --output ./resources/video/out/GirlsAloud.mp4 \\\n    --eval ./resources/gt/GirlsAloud_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/HelloBubble.mp4 \\\n    --database ./resources/database/HelloBubble \\\n    --output ./resources/video/out/HelloBubble.mp4 \\\n    --eval ./resources/gt/HelloBubble_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/Westlife.mp4 \\\n    --database ./resources/database/Westlife \\\n    --output ./resources/video/out/Westlife.mp4 \\\n    --eval ./resources/gt/Westlife_pred.txt\n\npython object_tracker.py \\\n    --video ./resources/video/in/Apink.mp4 \\\n    --database ./resources/database/Apink \\\n    --output ./resources/video/out/Apink.mp4 \\\n    --eval ./resources/gt/Apink_pred.txt\n\nEvaluation §\n이제 생성된 tracking file을 가지고 평가를 진행합니다.\npython evaluation.py \\\n    --gt_file_path ./resources/gt/T-ara_gt.txt \\\n    --pred_file_path ./resources/gt/T-ara_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/GirlsAloud_gt.txt \\\n    --pred_file_path ./resources/gt/GirlsAloud_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/Darling_gt.txt \\\n    --pred_file_path ./resources/gt/Darling_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/Westlife_gt.txt \\\n    --pred_file_path ./resources/gt/Westlife_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/BrunoMars_gt.txt \\\n    --pred_file_path ./resources/gt/BrunoMars_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/HelloBubble_gt.txt \\\n    --pred_file_path ./resources/gt/HelloBubble_pred.txt\n\npython evaluation.py \\\n    --gt_file_path ./resources/gt/Apink_gt.txt \\\n    --pred_file_path ./resources/gt/Apink_pred.txt\n\nReference §\n\ndeepface\nDeep SORT\nYoloV3 Implemented in TensorFlow 2.0\nYOLOFace\nTracking Persons-of-Interests via Adaptive Discriminative Features(ECCV 2016)\nSimple Online and Realtime Tracking with a Deep Association Metric(IEEE 2016)\nArcFace: Additive Angular Margin Loss for Deep Face Recognition\nMultiFaceTrackerUsingDeepsort\n"},"Traces/Flight-Delay-Prediction":{"title":"Flight Delay Prediction","links":[],"tags":["trace","data-analysis"],"content":"\n항공기의 운행을 따라가는 Schedule이라는 변수를 사용하여 높은 정확도로 지연편을 검출할 수 있었다.\n\n\n2019.07~2019.11(4개월)\nPandas, Numpy, Lightgbm, sklearn\n항공기 지연 예측 과제\n100만건의 데이터 핸들링\n클래스 불균형 문제를 해결하고자 의사결정나무 기반이자 부스팅 모델인 Lightgbm 모델 사용\n지연에 가장 영향을 끼치는 문제는 비행기 노선에 있어서 연이어 발생하는 A/C 문제(항공기 연결 문제)라고 판단\n주어진 데이터에서 비행기의 노선은 정해져있다는 가정을 도입하고, 이를 검증 후 스케쥴이라는 변수 생성\n지연이 아니라 예측했으나 실제로 지연인 경우(FN)가 현장 도입시 치명적이기 때문에 이를 반영하도록 재현율에 초점을 맞춰 Threshold 조절\n“스케쥴” 변수를 통해 정확도 13% 개선, 최종적으로 76%에서 89%의 정확도를 갖는 모델 구축\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResult §\n\nReference §\n\nBigcontest Flight Delay Prediction\n"},"Traces/Frostiness-Prediction-Contest-2":{"title":"Frostiness Prediction Contest","links":[],"tags":["data-analysis","trace"],"content":"\n2 Stage model을 사용하여 효과적으로 결로를 예측하고과 서비스를 구축하였다.\n\n\n2020.07~2020.08(2개월)\nPandas, Sklearn, Numpy, Matplotlib, Django\n현대 제철소 철강 보관소에 있는 철강의 24시간, 28시간 후의 결로 발생 확률 예측 과제\n외부 기상 관측소의 데이터를 기반으로 공장 내부 온도을 예측하는 모델과 이를 기반으로 철강의 결로를 예측하는 2 Step 구조 고안\n결로에 영향을 주는 계절적 요인(봄, 가을)과 시간적 요인(새벽)을 고려한 예측을 수행하기 위해 군집화를 통한 피쳐 생성\n데이터 불균형, 일반화 성능, 해석 가능성 등을 고려하여 Extra Tree 모델 사용\n피어슨 상관계수, 크레머 상관계수를 사용하여 변수 선택\n평균 AUC 0.9831을 갖는 모델 구현\n최종적으로 Django 서버에 모델 탑재후, inference 시연\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResult §\n"},"Traces/Frostiness-Prediction-Contest":{"title":"Frostiness Prediction Contest","links":[],"tags":["data-analysis","trace"],"content":"\n2 Stage model을 사용하여 효과적으로 결로를 예측하고과 서비스를 구축하였다.\n\n\n2020.07~2020.08(2개월)\nPandas, Sklearn, Numpy, Matplotlib, Django\n현대 제철소 철강 보관소에 있는 철강의 24시간, 28시간 후의 결로 발생 확률 예측 과제\n외부 기상 관측소의 데이터를 기반으로 공장 내부 온도을 예측하는 모델과 이를 기반으로 철강의 결로를 예측하는 2 Step 구조 고안\n결로에 영향을 주는 계절적 요인(봄, 가을)과 시간적 요인(새벽)을 고려한 예측을 수행하기 위해 군집화를 통한 피쳐 생성\n데이터 불균형, 일반화 성능, 해석 가능성 등을 고려하여 Extra Tree 모델 사용\n피어슨 상관계수, 크레머 상관계수를 사용하여 변수 선택\n평균 AUC 0.9831을 갖는 모델 구현\n최종적으로 Django 서버에 모델 탑재후, inference 시연\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResult §\n"},"Traces/Fruit-Card-Game":{"title":"Fruit Card Game","links":[],"tags":["boost-camp","ios","mvc"],"content":"과일 카드 게임 §\nStack: MVC, UIKit, XCTest, iOS\nTeam: 1인\n진행 기간: 2021/08/30 → 2021/09/10\nAbout: MVC 패턴에서 Model을 설계하는 것을 연습하고, 이를 View에 보여주는 간단한 카드게임을 만들었습니다.\n개요 §\n\nMVC 패턴에서 Model을 설계하는 것을 연습하고, 이를 View에 보여주는 간단한 카드게임을 만들었습니다.\n각 모델이 테스트 가능하도록 이를 분리하는 것을 연습하였습니다.\n\n\n\n\n\nMVC 패턴에서 Model을 설계하는 것을 연습하고, 이를 View에 보여주는 간단한 카드게임을 만들었습니다.\n"},"Traces/Government-Hackathon":{"title":"Government Hackathon","links":[],"tags":[],"content":"\nGoogle NMT api와 kobert를 사용하여 감성 분석을 진행하고, 서비스에 탑재하였다.\n\n\n2020.12(1개월)\nOpen api, pytorch, Flask\n자연어 처리 모델 기반 우울감 자가진단 서비스 “마인드디텍터” 웹 어플리케이션 제작 프로젝트\nSKT에서 개발한 Kobert를 기반으로 Naver 영화 감정 분석 데이터셋과 짧은 감정 분류를 위한 데이터셋(영문)을 통해 모델 미세 조정\n영문 데이터의 경우 Google transform api를 통해 번역 후 학습에 사용\n우울 지수를 계산하기 위해 공공 데이터 포털에서 자살률과 감정 예측 결과를 조합하여 사용\n최종적으로 서비스를 위해 flask 서버를 띄우고 요청의 대한 결과로 결과 응답\n정부혁신제안 끝장개발대회 메이커톤 최우수상\n\nProject §\n\n\n\n\n\n\n\nResult §\n\nReference §\n\n마음을 읽는 AI 우울감 자가진단 서비스, 마인드디텍터\nserver github\nemotion analysis github\n"},"Traces/Guarantee-Order-of-Image-by-cache-2":{"title":"Guarantee Order of Image by cache","links":[],"tags":["image","cache","ios","boost-camp"],"content":"\n비동기 네트워크 처리에 있어 순서대로 이미지 순서가 보장되어야 하는 문제를 해결했습니다.\n\n\n\n방탈출 테마 세부페이지에서는 해당 방을 방문한 유저들의 Top 5 랭킹이 보여지도록 하였습니다.\n이 때, 이상적인 상황의 경우, 모든 이미지 다운로드 속도가 동일하여 요청 순서대로 응답이 온다면 원하는 결과를 얻을 수 있습니다.\n\n\n\n하지만, 각 이미지 크기가 다르고, 순간적인 네트워크 속도가 다르기 때문에 데이터가 응답되는 시점이 순차적이지 않았습니다. 결과적으로 단순히 도착 순서대로 이미지를 반영할 경우, 잘못된 유저의 이미지가 매칭된다는 문제가 발생했습니다.\n\n\n\n이에 화면에 보이는 유저의 순서를 가지는 배열을 가지고, 도착 순서에 맞게 해당 유저 객체를 반영해주었습니다.\n모든 유저가 네트워크 요청에 성공했을 때, 실제 이미지를 반영하는 방법을 통해 목적을 달성하였습니다.\n\n순서 보장을 하는데 있어서 더 나은 방법은 없는가? §\n\n일단 가장 큰 문제점은, 해당 방법을 사용했을 경우, 먼저 응답이 온 유저의 경우 먼저 반영을 해줄 수 있음에도 불구하고 그러지 못한다는 점입니다. 이는 사용자 경험에 문제를 일으킬 수 있습니다.\n따라서, 응답이 왔을 때, 해당 응답이 실제 화면에 몇번째 인덱스에 해당하는 유저인지만 알 수 있다면, 도착 시점에 바로바로 그려지도록 하는 것이 가장 반응성에 있어 좋은 해결이라고 생각합니다.\n\n100명, 1000명의 유저가 있다면? 빠르게 스크롤 했을 때 문제점은? §\n\n테이블 뷰와 같은 많은 정보를 한번에 보여주는 경우, 빠르게 스크롤한다면 다음 셀에 대한 요청들이 큐에 쌓여 응답된 이미지들이 순차적으로 변경되는 문제가 발생할 수 있습니다.\n또한 이는 사용자가 원치않는 데이터 요청을 하는 것이기 때문에, 사용자가 현재 보고 있는 화면, 앞뒤로 padding에 해당하는 셀 이외의 네트워크 요청을 끊어 주는 것이 옳은 판단입니다.\n이를 가능하게 하는 방법으로는, 셀 내부에 해당 네트워크 테스크 자체를 가지도록 하고, 셀이 재사용되는 시점에 해당 task를 cancel 하는 방법이 있습니다. 이럴 경우, 재사용되는 시점에 무조건 이전 요청이 취소되기 때문에 문제를 해결할 수 있습니다.\n"},"Traces/Guarantee-Order-of-Image-by-cache":{"title":"Guarantee Order of Image by cache","links":[],"tags":["image","cache","ios","boost-camp"],"content":"\n비동기 네트워크 처리에 있어 순서대로 이미지 순서가 보장되어야 하는 문제를 해결했습니다.\n\n\n\n방탈출 테마 세부페이지에서는 해당 방을 방문한 유저들의 Top 5 랭킹이 보여지도록 하였습니다.\n이 때, 이상적인 상황의 경우, 모든 이미지 다운로드 속도가 동일하여 요청 순서대로 응답이 온다면 원하는 결과를 얻을 수 있습니다.\n\n\n\n하지만, 각 이미지 크기가 다르고, 순간적인 네트워크 속도가 다르기 때문에 데이터가 응답되는 시점이 순차적이지 않았습니다. 결과적으로 단순히 도착 순서대로 이미지를 반영할 경우, 잘못된 유저의 이미지가 매칭된다는 문제가 발생했습니다.\n\n\n\n이에 화면에 보이는 유저의 순서를 가지는 배열을 가지고, 도착 순서에 맞게 해당 유저 객체를 반영해주었습니다.\n모든 유저가 네트워크 요청에 성공했을 때, 실제 이미지를 반영하는 방법을 통해 목적을 달성하였습니다.\n\n순서 보장을 하는데 있어서 더 나은 방법은 없는가? §\n\n일단 가장 큰 문제점은, 해당 방법을 사용했을 경우, 먼저 응답이 온 유저의 경우 먼저 반영을 해줄 수 있음에도 불구하고 그러지 못한다는 점입니다. 이는 사용자 경험에 문제를 일으킬 수 있습니다.\n따라서, 응답이 왔을 때, 해당 응답이 실제 화면에 몇번째 인덱스에 해당하는 유저인지만 알 수 있다면, 도착 시점에 바로바로 그려지도록 하는 것이 가장 반응성에 있어 좋은 해결이라고 생각합니다.\n\n100명, 1000명의 유저가 있다면? 빠르게 스크롤 했을 때 문제점은? §\n\n테이블 뷰와 같은 많은 정보를 한번에 보여주는 경우, 빠르게 스크롤한다면 다음 셀에 대한 요청들이 큐에 쌓여 응답된 이미지들이 순차적으로 변경되는 문제가 발생할 수 있습니다.\n또한 이는 사용자가 원치않는 데이터 요청을 하는 것이기 때문에, 사용자가 현재 보고 있는 화면, 앞뒤로 padding에 해당하는 셀 이외의 네트워크 요청을 끊어 주는 것이 옳은 판단입니다.\n이를 가능하게 하는 방법으로는, 셀 내부에 해당 네트워크 테스크 자체를 가지도록 하고, 셀이 재사용되는 시점에 해당 task를 cancel 하는 방법이 있습니다. 이럴 경우, 재사용되는 시점에 무조건 이전 요청이 취소되기 때문에 문제를 해결할 수 있습니다.\n"},"Traces/Implement-ImageCache-2":{"title":"Implement ImageCache","links":[],"tags":["image","cache","boost-camp","ios","race-condition"],"content":"\n현재 프로젝트에 적합한 간단한 이미지 캐시를 구현하여 사용하였습니다.\n\n\n\n기본에 임시로 작업한 이미지 캐시의 경우, 네트워크 요청후 디스크에 저장이 되는 구조로 제작하였습니다.\n이미지의 경우 상대적으로 용량이 크기 때문에, 이 이미지 자체를 메모리에 올려서 사용하는 것 자체가 낭비라 생각하였습니다.\n하지만 진정한 의미의 캐시를 조금이라도 구현하려면 메모리 캐시 기능 자체도 사용해야 한다는 생각에 이미지 캐시를 수정하기로 마음 먹었습니다.\n\n\n\n이미지 캐시를 구현하기 위해서는 사실 많은 부분을 고려해야 합니다. 캐시의 신선도 판단 방법에 따른 정책들이 그 예가 될 수 있습니다.\n하지만 저희는 당장 저희의 프로젝트에서 사용할 로직이 무엇인가에 보다 집중하였습니다.\n사용자가 업로드한 이미지가 변경되지 않는 기획 특성상, 캐시의 신선도를 위한 로직 자체를 구현하는 것은 오버엔지니어링이라 판단하였습니다. 그래서 추후 확장하더라도 쉽게 가능하면서 현재의 목적을 달성할 수 있는 apple 프레임 워크를 사용하였습니다.\n이 때, 애플에서 제공하는 URLCache를 사용하였습니다. 해당 문서를 기반으로 의사 결정 트리에 대해 이해후 적용하였습니다.\n캐시 정책의 경우 returnCacheDataElseLoad, 즉 캐시가 있으면 반환하고, 그렇지 않을 경우 가져오는 방식을 채택하였습니다.\n\nApple Developer Documentation\n\n\nURLCache를 사용하기 위해서는 요청에 대한 정의, 그리고 그 응답에 대해 캐시에 저장해야 했습니다.\ndata Task의 경우, 응답에 대해 자동으로 저장해주지만, download task의 경우 보통 큰 용량의 리소스들을 받기 때문에, 캐시에 등록하는 부분을 수동으로 처리해 주어야 했습니다.\n따라서 이미지 응답에 대해 요청을 키로, 응답을 값으로 설정하여 캐시에 저장하였습니다.\n\nRace Condition 문제 §\n\n\n리더보드 화면에서는 1, 2, 3위를 가장 위에, 그리고 하위에는 1위부터 10위까지 표현을 할 수 있게 됩니다.\n만약 초기에 해당 데이터를 불러오지 못한 경우에 이미지 캐시를 사용한다면, 중복해서 1, 2, 3등의 사진을 요청해야 합니다.\n하지만 이 경우, race Condition 문제가 발생하였고, 해당 요청을 가져오려는 두개의 작업 단위에서 한쪽은 데이터를 write 하고 있고, 한쪽은 데이터를 read 하려는 문제가 발생하여 제대로된 동작을 수행하지 못했습니다.\n결국 해당 문제는 서로다른 두개의 작업 단위가 요청하는 시점에 따라 데이터가 있는 경우, 없는 경우가 발생하기 때문에 발생합니다.\n이런 부분에 대해 두가지 생각을 하였습니다.\n\n데이터를 순차적으로 요청하고, 해당 데이터가 도착한 시점에 다음 작업이 네트워크 요청을 할 수 있게 하자.\n\n하지만 이 방법의 경우, 이미지 통신 자체를 동기적으로 처리하자는 의견과 같았고, 이럴 경우 사용자 경험에 보다 치명적인 결과를 가져올 것이라 생각했습니다.\n\n\n캐시에 데이터가 있는지 확인하는 시점에, 없을 경우 데이터 요청을 한번 더하고, 응답이 온 경우에 캐시에 데이터가 도착해있는지 다시한번 확인하는 로직을 넣어서 해결하자.\n\n중복되는 데이터 요청자체를 두번한다는 점이 마음에 걸렸습니다.\n\n\n\n\n이런 부분에 대해 더 나은 생각이 나지않아 두번째 방법을 도입하여, 해결했습니다.\n하지만, 중복되는 요청이 많을 경우, 시점의 문제로 필요하지 않은 요청을 계속할 수 있다는 점이 마음에 걸립니다.\n"},"Traces/Implement-ImageCache":{"title":"Implement ImageCache","links":[],"tags":["image","cache","boost-camp","ios","race-condition"],"content":"\n현재 프로젝트에 적합한 간단한 이미지 캐시를 구현하여 사용하였습니다.\n\n\n\n기본에 임시로 작업한 이미지 캐시의 경우, 네트워크 요청후 디스크에 저장이 되는 구조로 제작하였습니다.\n이미지의 경우 상대적으로 용량이 크기 때문에, 이 이미지 자체를 메모리에 올려서 사용하는 것 자체가 낭비라 생각하였습니다.\n하지만 진정한 의미의 캐시를 조금이라도 구현하려면 메모리 캐시 기능 자체도 사용해야 한다는 생각에 이미지 캐시를 수정하기로 마음 먹었습니다.\n\n\n\n이미지 캐시를 구현하기 위해서는 사실 많은 부분을 고려해야 합니다. 캐시의 신선도 판단 방법에 따른 정책들이 그 예가 될 수 있습니다.\n하지만 저희는 당장 저희의 프로젝트에서 사용할 로직이 무엇인가에 보다 집중하였습니다.\n사용자가 업로드한 이미지가 변경되지 않는 기획 특성상, 캐시의 신선도를 위한 로직 자체를 구현하는 것은 오버엔지니어링이라 판단하였습니다. 그래서 추후 확장하더라도 쉽게 가능하면서 현재의 목적을 달성할 수 있는 apple 프레임 워크를 사용하였습니다.\n이 때, 애플에서 제공하는 URLCache를 사용하였습니다. 해당 문서를 기반으로 의사 결정 트리에 대해 이해후 적용하였습니다.\n캐시 정책의 경우 returnCacheDataElseLoad, 즉 캐시가 있으면 반환하고, 그렇지 않을 경우 가져오는 방식을 채택하였습니다.\n\nApple Developer Documentation\n\n\nURLCache를 사용하기 위해서는 요청에 대한 정의, 그리고 그 응답에 대해 캐시에 저장해야 했습니다.\ndata Task의 경우, 응답에 대해 자동으로 저장해주지만, download task의 경우 보통 큰 용량의 리소스들을 받기 때문에, 캐시에 등록하는 부분을 수동으로 처리해 주어야 했습니다.\n따라서 이미지 응답에 대해 요청을 키로, 응답을 값으로 설정하여 캐시에 저장하였습니다.\n\nRace Condition 문제 §\n\n\n리더보드 화면에서는 1, 2, 3위를 가장 위에, 그리고 하위에는 1위부터 10위까지 표현을 할 수 있게 됩니다.\n만약 초기에 해당 데이터를 불러오지 못한 경우에 이미지 캐시를 사용한다면, 중복해서 1, 2, 3등의 사진을 요청해야 합니다.\n하지만 이 경우, race Condition 문제가 발생하였고, 해당 요청을 가져오려는 두개의 작업 단위에서 한쪽은 데이터를 write 하고 있고, 한쪽은 데이터를 read 하려는 문제가 발생하여 제대로된 동작을 수행하지 못했습니다.\n결국 해당 문제는 서로다른 두개의 작업 단위가 요청하는 시점에 따라 데이터가 있는 경우, 없는 경우가 발생하기 때문에 발생합니다.\n이런 부분에 대해 두가지 생각을 하였습니다.\n\n데이터를 순차적으로 요청하고, 해당 데이터가 도착한 시점에 다음 작업이 네트워크 요청을 할 수 있게 하자.\n\n하지만 이 방법의 경우, 이미지 통신 자체를 동기적으로 처리하자는 의견과 같았고, 이럴 경우 사용자 경험에 보다 치명적인 결과를 가져올 것이라 생각했습니다.\n\n\n캐시에 데이터가 있는지 확인하는 시점에, 없을 경우 데이터 요청을 한번 더하고, 응답이 온 경우에 캐시에 데이터가 도착해있는지 다시한번 확인하는 로직을 넣어서 해결하자.\n\n중복되는 데이터 요청자체를 두번한다는 점이 마음에 걸렸습니다.\n\n\n\n\n이런 부분에 대해 더 나은 생각이 나지않아 두번째 방법을 도입하여, 해결했습니다.\n하지만, 중복되는 요청이 많을 경우, 시점의 문제로 필요하지 않은 요청을 계속할 수 있다는 점이 마음에 걸립니다.\n"},"Traces/Kyunghee-Valley-Program-2":{"title":"Kyunghee Valley Program","links":[],"tags":[],"content":"Lantern §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference §\n\n\n"},"Traces/Kyunghee-Valley-Program":{"title":"Kyunghee Valley Program","links":[],"tags":[],"content":"Lantern §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference §\n\n\n"},"Traces/OnBan":{"title":"OnBan","links":[],"tags":["boost-camp","ios","mvp","uikit","cache"],"content":"onBan §\nStack: Caching, MVP, Network, UIKit, UserDefault, iOS\nTeam: 1인\nRole: 개발\n진행 기간: 2021/09/27 → 2021/10/08\nAbout: 반찬을 주문할 수 있는 간단한 애플리케이션입니다.\n구조 §\n\n기능 §\n\n회원가입 기능\n상품 목록 기능\n세부화면 기능\n주문 기능\n연결성에 따라 화면 표현을 변경함\nDynamic Framework로 네트워크 프레임워크를 추가함\n스크롤뷰 pagenation 구현\n다크모드 대응\n\n동작 §\n회원 가입 §\n\n\n아래 이름을 눌렀을 떄, 대응되지 않는 기기(5s)가 있어, 눌렀을때 화면이 올라오도록 하였습니다.\n\n메인 화면 §\n\n\n네트워크 통신시 FileCache로 저장하고, 이를 불러옵니다.\nDispatchGroup을 사용하여 순차적인 이미지가 있을 경우, 해당 이미지를 모두 받은 후에 보여주는 방식으로 구성하였습니다.\n\n장바구니 §\n\n고민과 배운점 §\n\n비동기 통신에 있어서 보여지는 이미지의 순서를 동일하게 유지하는 것이 중요하다는 것을 배웠습니다. DisPatchGroup을 사용해서 해당 세부 뷰가 모두 받아진 경우에 이를 보여주도록 하였는데, 이럴 경우 먼저 받아진 이미지가 보여지지 않아 UX 측면에서 좋지 않을 수 있습니다.\n\n추후 프로젝트에서는 이러한 순서까지 고려하여 이미지를 업데이트 하는 방식을 사용하려 합니다.\n\n\nUseCase 객체에서는 각 기능들을 조합해서 전체 흐름을 관장하는 객체로 처리하였습니다.\n요청의 흐름이 View -&gt; Presenter -&gt; Usecase로 가면서 불필요한 함수들이 발생하였습니다.\n\n로직이 중복되는 경우가 많았습니다.\n하지만 Notification을 사용한다면 뭔가 전역적으로 알림을 보내는 듯 하여 해당 방법을 사용하지 않고, Delegate 패턴으로 변화사항을 전송하였습니다.\n\n\nCollectionView를 사용할 때, header를 클릭시 크기를 가변적으로 변화해주어야 했는데, 이를 동작하기 위해서 Model안에 해당 Header가 터치되었는지 상태를 저장하여 해결하였습니다.\n\n이후 프로젝트에서는 Diffable DataSource, compositionalDataSource를 사용해보고 싶습니다.\n\n\nCache를 저장하는데 있어서 모든 이미지를 저장합니다. 하지만 FileCache를 할 때, 특정한 정책이 있거나, 사용자로부터 캐시메모리를 삭제할 수 있어야 합니다. 해당 부분을 적용하지 못해 아쉽습니다.\n사용자의 네트워크 연결 상태에 따라 이를 확인할 수 있도록 가장 자리에 색을 표현하였습니다.\n\n네트워크에 연결되지 않은 상태라면, 기존에 저장해둔 json으로부터 파일을 로드하여 보여주었습니다.\n네트워크가 돌아오는 경우, 네트워크로부터 연결하여 화면을 다시 로드합니다.\n\n\n대부분의 작업을 스토리보드로 진행했습니다.\n\n이후 프로젝트에서는 모두 코드를 사용하여 진행해보려 합니다. (snapKit)\n\n\n네트워크 라이브러리를 사용하지 않고 URLSession을 사용해서 처리했습니다.\n\n추후에는 Alamofire, KingFisher를 사용해보려 합니다.\n\n\n"},"Traces/Optimal-Bicycle-Station-Selection-Contest-2":{"title":"Optimal Bicycle Station Selection Contest","links":[],"tags":[],"content":"\n공공자전거의 최적 위치를 수요와 리밸런싱을 고려하여 제시하였다.\n\n\nPandas, Maplotlib, Geopandas, Geojson, Seaborn, folium\n반입/반출이 빈번하게 일어나는 공유 자전거의 최적 정류소 선정 과제\n자전거 잠재 수요 발굴, 공공성 확보, Rebalancing 문제(정류소의 수요-공급 불균형 문제)로 분석 방향 설정\n잠재수요 : EDA를 통해 상업지역, 주거지역에 정류장 배치가 되어 있음을 확인, 거치대 주변 200m 반경에 존재하는 주거용 건축물 수의 평균을 통해 상업지역, 주거지역 구분\n공공성 확보 : 주변 사회 인프라 시설 분포를 기반으로 접근성 피쳐 생성, 미배치 지역 시각화\n위의 피쳐를 기반으로 미배치 지역과 접근성이라는 두 개의 지표를 가지고 후보군을 선별\nRebalancing : 최종 정류장 입지를 선정하기 위해 두가지 지표 선정\n\n절대 수요 : 반입량, 반출량의 절대적인 량 - 하나의 거치대에 방문하는 사용자의 총량\n상대 수요 : 반입량 , 반출량의 차이 - 하나의 거치대에서 유입/유출되는 자전거의 변화량\n\n\nExtra tree 모델을 사용하여 위의 두 지표 예측 - 일반화 성능을 보장하기 위해 선택, 낮은 loss 결과 확인\n각각의 후보군의 절대 수요와 상대 수요를 기반으로 Rebalancing을 가장 잘 해소할 수 있는 정류장 선택\n\n각각의 후보군에 절대 수요와 상대 수요를 평균으로 갖는 가우시안 분포 커널로 사용\n특정 후보군의 Rebalancing 정도를 이 분포의 부피값으로 사용 (0~1)\n각각의 행정동에서 발생하는 최적 후보군을 완전탐색하고 모든 행정동의 후보군을 최종답안으로 제출\n\n\n기존 배치 정류장의 Rebalancing Metric 0.3, 제안 후보군의 Rebalancing Metric 0.08로 73% 감소\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResult §\n\nReference §\n\nGoyang City Optimal Bicycle Station Suggestion\n"},"Traces/Optimal-Bicycle-Station-Selection-Contest":{"title":"Optimal Bicycle Station Selection Contest","links":[],"tags":[],"content":"\n공공자전거의 최적 위치를 수요와 리밸런싱을 고려하여 제시하였다.\n\n\nPandas, Maplotlib, Geopandas, Geojson, Seaborn, folium\n반입/반출이 빈번하게 일어나는 공유 자전거의 최적 정류소 선정 과제\n자전거 잠재 수요 발굴, 공공성 확보, Rebalancing 문제(정류소의 수요-공급 불균형 문제)로 분석 방향 설정\n잠재수요 : EDA를 통해 상업지역, 주거지역에 정류장 배치가 되어 있음을 확인, 거치대 주변 200m 반경에 존재하는 주거용 건축물 수의 평균을 통해 상업지역, 주거지역 구분\n공공성 확보 : 주변 사회 인프라 시설 분포를 기반으로 접근성 피쳐 생성, 미배치 지역 시각화\n위의 피쳐를 기반으로 미배치 지역과 접근성이라는 두 개의 지표를 가지고 후보군을 선별\nRebalancing : 최종 정류장 입지를 선정하기 위해 두가지 지표 선정\n\n절대 수요 : 반입량, 반출량의 절대적인 량 - 하나의 거치대에 방문하는 사용자의 총량\n상대 수요 : 반입량 , 반출량의 차이 - 하나의 거치대에서 유입/유출되는 자전거의 변화량\n\n\nExtra tree 모델을 사용하여 위의 두 지표 예측 - 일반화 성능을 보장하기 위해 선택, 낮은 loss 결과 확인\n각각의 후보군의 절대 수요와 상대 수요를 기반으로 Rebalancing을 가장 잘 해소할 수 있는 정류장 선택\n\n각각의 후보군에 절대 수요와 상대 수요를 평균으로 갖는 가우시안 분포 커널로 사용\n특정 후보군의 Rebalancing 정도를 이 분포의 부피값으로 사용 (0~1)\n각각의 행정동에서 발생하는 최적 후보군을 완전탐색하고 모든 행정동의 후보군을 최종답안으로 제출\n\n\n기존 배치 정류장의 Rebalancing Metric 0.3, 제안 후보군의 Rebalancing Metric 0.08로 73% 감소\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResult §\n\nReference §\n\nGoyang City Optimal Bicycle Station Suggestion\n"},"Traces/Restaurant-Headcount-Prediction":{"title":"Restaurant Headcount Prediction","links":[],"tags":["trace","data-analysis","tensorflow"],"content":"\n서울시 관내 식당의 식수인원을 예측하여 사회적 이익을 가져오는 프로젝트를 진행했다.\n\n\n2018.07~2019.03(8개월)\n매일매일 발생하는 서울시청 사내 식당의 일별 식수 인원 예측 프로젝트\nPandas, Numpy, Lightgbm, tensorflow, sklearn, matplotlib\n메뉴별, 월별 식수인원의 차이를 알아보기 위한 ANOVA 분석\n식수 인원의 시간적인 특성을 기반으로 시계열 분석 및 LSTM 모델 구현 및 평가\n모수(3년, 741개 데이터)의 절대량 부족으로 원하는 정도의 예측 모델 구현은 성공하지 못함\n접근 방법은 유의미하여 특허 출원까지 완료\n\nProject §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatent §\n"},"Traces/StarBoost":{"title":"StarBoost","links":[],"tags":["boost-camp","ios","branch","git","diffabledatasource","coreml","avfoundation","coredata","userdefaults","uiscrollview"],"content":"\n설명 §\n\n실제 동작하는 스타벅스 앱을 클론 코딩하였습니다.\n처음으로 팀플을 진행했으며, commit convention, 브랜치 전략등을 사용해보았습니다.\n\n동작 화면 §\n\nBranch Strategy §\n\n\nS03A forked branch에 feature 별로 나뉜 변경 사항을 Merge\nConflict 해결 후, Remote에 PR을 보내는 방식으로 진행\n이 때, Branch를 생성할 때, namespace를 Scene 단위로 작업하여 branch의 분리를 용이하게 하고자 함\n\nCode Structure §\n\nVIPER 구조를 사용하는 것을 첫번째 주의 도전과제로 정했습니다.\nRepository 패턴을 사용하여 사용자의 과금을 신경썼습니다.\n또한 API가 복잡하여 요청까지의 결과가 오래걸린다는 점을 감안하여 빠른 반응성을 위해 Core Data를 사용하였습니다.\n또한 최대한 외부라이브러리를 사용하지 않고 구현하는 것에 목적두었습니다.\n\n\n폴더 구조 §\n\n\n씬 별로 폴더를 나누어서 관리하였습니다.\n하지만, 씬마다 네트워크 통신이나 저장하는 방식이 달라지지 않는 문제가 발생하여 나중에는 중복된 코드를 저장하는 공간을 마련해야 했습니다.\n이렇게 장면별로 폴더를 나누어 관리하기 보다는, 전체적인 앱의 흐름을 기반으로 레이어를 나누어서 관리한느 것이 효율적이라는 생각을 했습니다.\n\nEvent Scene §\n\n24시간 이후 이벤트 클릭시 이벤트 화면 뜨도록\nUserDefault에 값을 저장하고, 이를 추적함\n화면 Layout 변경에 대응\n\n\nHome Scene §\n\n사용 기술\n\nUICompositionalLayout\nDiffableDataSource\n\n\n홈화면에 표시할 데이터를 불러와 화면에 표시함\n특정 section에 대하여 수직 스크롤 가능하도록 구현\n상품 터치시 상세화면으로 이동\nWhat’s New 버튼 탭시 화면으로 이동\n\n\nWhatsNewScene §\n\n신제품 소식 표시\ncompositional layout을 사용하여 가로 화면으로 볼 수있도록 함\n\n\n\nPayment Scene §\n\n\n랜덤으로 바코드 생성하여 화면에 표시\n화면 진입시 3분 카운트다운후 유효기간이 만료되었음을 알리고 바코드색깔을 옅게 처리\n실기기에서 사용시 money 버튼 터치시 카메라 실행\n사진촬영시 지폐를 인식하여 화면에 띄움\n1000원 마다 동전이 컵에 들어가는 애니메이션 재생\n사용 기술\n\nCoreAnimation\nCoreML\nVison\nAVFoundation\n\n\n\nOrder Scene §\n\n\n음료, 푸드, 상품 탭별로 카테고리 표시 (예: 콜드브루, 머그컵 등)\n상단의 검색창으로 카테고리 필터링 가능\n카테고리 탭시 해당 카테고리내의 상품들을 표시\n커스텀 SegmentedControll\n사용 기술\n\nDiffableDataSource\nUICompositionalLayout\n\n\n\nCategory Scene §\n\n\n카테고리내의 상품들을 표시\n상품 선택시 상세 화면으로 이동\n원래는 코어데이터에 저장하지 않고 네트워크 요청만으로 처리하고 싶었으나 반응성 문제때문에 코어데이터에 저장하고 로드하는 방식으로 변경\n사용 기술\n\nDiffableDataSource\nUICompositionalLayout\nCoreData\n\n\n\nDetail Scene §\n\n\n최대한 스타벅스 앱과 비슷한 UI를 가지도록 구현\n스크롤뷰의 contentOffset.y 와 이미지뷰의 topConstraint를 활용하여 스크롤시 이미지가 같이 올라가도록 구현\n특정위치까지 스크롤을 내렸을때 NavigationBar를 스타벅스 앱처럼 하고 싶었으나 구현실패\nnavigationController.navigationBar.barTintColor 를 변경할 수 없었음. + 다른 여러가지 문제\n하트 누를시 CoreData의 해당 아이템의 favorite bool값을 변경\n주문하기 누를시 1초후 로컬 푸시알림이 옴 (앱 최초실행시 권한 설정 alert 띄움)\n사용 기술\n\nDiffableDataSource\nUICompositionalLayout\nCoreData\n\n\n\nFavorite Scene §\n\n\nCoreData의 상품중 favorite bool값이 true 인 것만 표시\n하트, 주문하기 버튼 상세화면과 동일하게 동작. (+ 하트 터치시 바로 목록에서 제거)\n\n문제 상황 §\n\n\n상세화면을 실제 앱과 똑같이 구현하는것이 어려웠음\n\n\nScrollView vs CollectionView\n\n\nNavigationBar 알파, 색상 조절\n\n\nscrollView offset에 따른 이미지 위치 조정\n\n\n디테일 화면.. 도대체 어떻게 구현할 수 있을까\n\n\n문제1: 상세화면 뷰가 전부 내려와 있을때는 바운스동작을 하면서도 스크롤을 올릴때는 사진과 같이 올라갑니다. 저희는 스크롤뷰의 오프셋을 사진의 topConstraint와 동기화 하는식으로 구현했습니다.\n문제2: 네비게이션 바가 사진의 중간정도를 넘어가게되면, alpha가 변하면서 기존의 색으로 돌아옵니다. 그래서 navigation Bar의 titleView와 barTintColor의 alpha 값을 변경하는 방식으로 구현하려 했습니다. 그런데, titleView는 적용이 되지만, barTintcolor는 적용이 되지 않았습니다. navigationController.navigationBar.barTintColor = Color.. stackoverflow에 barTintcolor not working이라 쳤더니, 생각보다 많은 분들이 에러라 하는걸 보았습니다.\n문제3: 실제 스타벅스앱을 켜서 상세화면을 킨다음, 네비게이션 바가 있어야만 할곳부터 스크롤을 하면 스크롤이 됩니다. 하지만, 실제로 저희가 만들어보았을 때는, VC의 View가 Navigation Controller의 하위에 위치하게 되어, 스크롤이 불가했습니다.\n다른 부분보다 가장 어려웠던 부분이 이 세부화면이었던 것 같습니다. 읽어 주셔서 감사합니다!\n\n\n\n\n\nAPI가 불친절해서 힘들었음\n\n그에따른 비효율적 구조 발생\n\n\n\n폴더 구조가 씬별로 되어 있어, 후반부에 중복되는 코드가 발생\n\n레이어 별로 관리하는 것이 효율적이라 생각함\n\n\n\nCore 데이터 저장, 불러오기가 비동기 처리라 콜백함수가 필요했음\n\n꼭 기억해야 할 부분\n\n\n\nFramework §\n\nSwiftLint\nSnapKit\n\nTemplate Generator §\n\n[iOS-VIPER-Xcode-Templates](\nhttps://github.com/infinum/iOS-VIPER-Xcode-Templates)\n"},"Traces/Traces-2":{"title":"Traces","links":["Traces/Restaurant-Headcount-Prediction","Traces/Flight-Delay-Prediction","Traces/Dance-Copyright-Dataset","Traces/Data-Science-for-COVID-19","Traces/Frostiness-Prediction-Contest","Traces/Optimal-Bicycle-Station-Selection-Contest","Traces/Government-Hackathon","Traces/AI-Data-Idea-Contest","Traces/Kyunghee-Valley-Program","Traces/Face-Tracker","Traces/Boost-Camp"],"tags":[],"content":"2019 §\n\nRestaurant Headcount Prediction\nFlight Delay Prediction\nDance Copyright Dataset\n\n2020 §\n\nData Science for COVID-19\nFrostiness Prediction Contest\nOptimal Bicycle Station Selection Contest\nGovernment Hackathon\n\n2021 §\n\nAI Data Idea Contest\nKyunghee Valley Program\nFace Tracker\n\n2022 §\n\nBoost Camp\n"},"Traces/Traces":{"title":"Traces","links":["Traces/Restaurant-Headcount-Prediction","Traces/Flight-Delay-Prediction","Traces/Dance-Copyright-Dataset","Traces/Data-Science-for-COVID-19","Traces/Frostiness-Prediction-Contest","Traces/Optimal-Bicycle-Station-Selection-Contest","Traces/Government-Hackathon","Traces/AI-Data-Idea-Contest","Traces/Kyunghee-Valley-Program","Traces/Face-Tracker","Traces/Boost-Camp"],"tags":[],"content":"2019 §\n\nRestaurant Headcount Prediction\nFlight Delay Prediction\nDance Copyright Dataset\n\n2020 §\n\nData Science for COVID-19\nFrostiness Prediction Contest\nOptimal Bicycle Station Selection Contest\nGovernment Hackathon\n\n2021 §\n\nAI Data Idea Contest\nKyunghee Valley Program\nFace Tracker\n\n2022 §\n\nBoost Camp\n"},"index":{"title":"Wansook World.","links":["Essay/Essay","Knowledges/Knowledges","Channels/Channels","Logs/Logs","Traces/Traces"],"tags":[],"content":"Hi 👋 §\n\nGoal, Plan, Execute.\n\n배우고, 느끼고, 성장한 것들을 기록하는 공간입니다.\nIndex §\n\nEssay\nKnowledges\nChannels\nLogs\nTraces\n"}}